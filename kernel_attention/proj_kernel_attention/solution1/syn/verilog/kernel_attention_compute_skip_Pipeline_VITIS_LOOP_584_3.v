// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_attention_compute_skip_Pipeline_VITIS_LOOP_584_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        zext_ln580,
        bound66,
        bound21,
        afterAct,
        buffer_result
);

parameter    ap_ST_fsm_pp0_stage0 = 14'd1;
parameter    ap_ST_fsm_pp0_stage1 = 14'd2;
parameter    ap_ST_fsm_pp0_stage2 = 14'd4;
parameter    ap_ST_fsm_pp0_stage3 = 14'd8;
parameter    ap_ST_fsm_pp0_stage4 = 14'd16;
parameter    ap_ST_fsm_pp0_stage5 = 14'd32;
parameter    ap_ST_fsm_pp0_stage6 = 14'd64;
parameter    ap_ST_fsm_pp0_stage7 = 14'd128;
parameter    ap_ST_fsm_pp0_stage8 = 14'd256;
parameter    ap_ST_fsm_pp0_stage9 = 14'd512;
parameter    ap_ST_fsm_pp0_stage10 = 14'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 14'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 14'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [7:0] zext_ln580;
input  [15:0] bound66;
input  [13:0] bound21;
input  [63:0] afterAct;
input  [63:0] buffer_result;

reg ap_idle;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [0:0] icmp_ln584_1_reg_957;
reg    ap_block_state17_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln578_reg_925;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state14_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_subdone;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
reg    gmem_blk_n_B;
wire    ap_block_pp0_stage2;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg   [0:0] or_ln582_reg_943;
reg    gmem_blk_n_AW;
reg   [0:0] first_iter_0_reg_208;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state15_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] zext_ln580_cast_fu_221_p1;
reg   [9:0] zext_ln580_cast_reg_907;
reg   [2:0] n_2_reg_913;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state16_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [9:0] mul_ln580_fu_270_p2;
reg   [9:0] mul_ln580_reg_919;
wire   [0:0] icmp_ln578_fu_275_p2;
reg   [0:0] icmp_ln578_reg_925_pp0_iter1_reg;
wire   [0:0] icmp_ln580_fu_289_p2;
reg   [0:0] icmp_ln580_reg_929;
wire   [0:0] or_ln582_fu_635_p2;
reg    ap_block_pp0_stage2_11001;
reg   [61:0] sext_ln584_mid2_v_reg_947;
reg   [61:0] sext_ln584_1_mid2_v_reg_952;
wire   [0:0] icmp_ln584_1_fu_755_p2;
wire    ap_block_state4_pp0_stage3_iter0;
reg    ap_predicate_op154_readreq_state4;
reg    ap_predicate_op156_writereq_state4;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage3_11001;
reg   [31:0] gmem_addr_79_read_reg_977;
reg    ap_block_state11_pp0_stage10_iter0;
reg    ap_block_pp0_stage10_11001;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_213_p4;
wire    ap_loop_init;
wire    ap_block_pp0_stage0_subdone;
wire  signed [63:0] sext_ln582_1_fu_803_p1;
wire  signed [63:0] sext_ln582_2_fu_806_p1;
wire    ap_block_state12_pp0_stage11_iter0;
reg    ap_block_state12_io;
reg    ap_block_pp0_stage11_11001;
wire    ap_block_pp0_stage11_01001;
reg   [2:0] w_fu_118;
wire   [2:0] select_ln584_fu_747_p3;
reg   [2:0] h_fu_122;
wire   [2:0] select_ln582_1_fu_719_p3;
reg   [5:0] indvar_flatten_fu_126;
wire   [5:0] select_ln582_2_fu_770_p3;
reg   [7:0] c_fu_130;
wire   [7:0] select_ln580_7_fu_621_p3;
reg   [13:0] indvar_flatten61_fu_134;
wire   [13:0] select_ln580_8_fu_303_p3;
wire    ap_block_pp0_stage1;
reg   [2:0] n_fu_138;
wire   [2:0] select_ln578_fu_507_p3;
reg   [15:0] indvar_flatten128_fu_142;
wire   [15:0] add_ln578_fu_280_p2;
wire    ap_block_pp0_stage0;
wire   [2:0] mul_ln580_fu_270_p0;
wire   [7:0] mul_ln580_fu_270_p1;
wire   [13:0] add_ln580_1_fu_297_p2;
wire   [9:0] zext_ln580_2_fu_327_p1;
wire   [9:0] tmp2_fu_331_p2;
wire   [12:0] p_shl_fu_340_p3;
wire   [13:0] p_shl_cast_fu_348_p1;
wire   [13:0] tmp2_cast1_fu_336_p1;
wire   [13:0] h_cast_fu_358_p1;
wire   [13:0] tmp3_fu_352_p2;
wire  signed [13:0] empty_fu_362_p2;
wire   [16:0] p_shl1_fu_372_p3;
wire  signed [16:0] p_cast2_fu_368_p1;
wire   [2:0] add_ln578_1_fu_404_p2;
wire   [2:0] mul_ln580_1_fu_413_p0;
wire   [7:0] mul_ln580_1_fu_413_p1;
wire   [9:0] mul_ln580_1_fu_413_p2;
wire   [12:0] p_shl_mid_fu_428_p3;
wire   [13:0] p_shl_cast_mid184_fu_436_p1;
wire   [13:0] tmp2_cast1_mid178_fu_424_p1;
wire  signed [13:0] tmp3_mid186_fu_440_p2;
wire   [16:0] p_shl1_mid_fu_457_p3;
wire  signed [16:0] p_cast2_mid194_fu_453_p1;
wire   [16:0] p_mid198_fu_465_p2;
wire   [16:0] empty_143_fu_380_p2;
wire   [0:0] icmp_ln584_fu_483_p2;
wire   [0:0] xor_ln580_fu_478_p2;
wire   [0:0] icmp_ln582_fu_495_p2;
wire   [7:0] select_ln580_fu_392_p3;
wire   [0:0] and_ln580_1_fu_501_p2;
wire   [0:0] or_ln580_1_fu_519_p2;
wire   [0:0] or_ln580_fu_399_p2;
wire   [7:0] add_ln580_fu_513_p2;
wire   [9:0] zext_ln580_4_fu_538_p1;
wire   [9:0] select_ln580_1_fu_418_p3;
wire   [9:0] tmp2_mid1_fu_542_p2;
wire   [12:0] p_shl_mid1_fu_552_p3;
wire   [13:0] p_shl_cast_mid1_fu_560_p1;
wire   [13:0] tmp2_cast1_mid1_fu_548_p1;
wire  signed [13:0] tmp3_mid1_fu_564_p2;
wire   [13:0] select_ln580_2_fu_446_p3;
wire   [16:0] p_shl1_mid2_fu_582_p3;
wire  signed [16:0] p_cast2_mid131_fu_578_p1;
wire   [16:0] p_mid135_fu_590_p2;
wire   [16:0] select_ln580_3_fu_471_p3;
wire   [0:0] xor_ln580_1_fu_604_p2;
wire   [0:0] and_ln580_fu_489_p2;
wire   [0:0] or_ln580_3_fu_610_p2;
wire   [2:0] select_ln580_4_fu_524_p3;
wire   [0:0] and_ln580_2_fu_615_p2;
wire   [0:0] or_ln580_2_fu_532_p2;
wire   [2:0] add_ln582_fu_629_p2;
wire   [13:0] h_cast_mid1_fu_641_p1;
wire   [13:0] select_ln580_5_fu_570_p3;
wire  signed [13:0] p_mid1_fu_645_p2;
wire   [16:0] p_shl1_mid1_fu_655_p3;
wire  signed [16:0] p_cast2_mid1_fu_651_p1;
wire   [16:0] p_mid111_fu_663_p2;
wire   [16:0] select_ln580_6_fu_596_p3;
wire   [16:0] select_ln582_fu_669_p3;
wire   [18:0] tmp_s_fu_677_p3;
wire  signed [63:0] sext_ln582_fu_685_p1;
wire   [63:0] add_ln582_1_fu_689_p2;
wire   [63:0] add_ln582_2_fu_704_p2;
wire   [0:0] or_ln584_fu_736_p2;
wire   [0:0] or_ln584_1_fu_742_p2;
wire   [2:0] add_ln584_fu_730_p2;
wire   [5:0] add_ln582_3_fu_764_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage3_subdone;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage10_subdone;
reg    ap_block_pp0_stage11_subdone;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [9:0] mul_ln580_1_fu_413_p00;
wire   [9:0] mul_ln580_fu_270_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_attention_mul_3ns_8ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 10 ))
mul_3ns_8ns_10_1_1_U65(
    .din0(mul_ln580_fu_270_p0),
    .din1(mul_ln580_fu_270_p1),
    .dout(mul_ln580_fu_270_p2)
);

kernel_attention_mul_3ns_8ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 10 ))
mul_3ns_8ns_10_1_1_U66(
    .din0(mul_ln580_1_fu_413_p0),
    .din1(mul_ln580_1_fu_413_p1),
    .dout(mul_ln580_1_fu_413_p2)
);

kernel_attention_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c_fu_130 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln578_reg_925 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        c_fu_130 <= select_ln580_7_fu_621_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln578_reg_925_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        first_iter_0_reg_208 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_0_reg_208 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        h_fu_122 <= 3'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln578_reg_925 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        h_fu_122 <= select_ln582_1_fu_719_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten128_fu_142 <= 16'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln578_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten128_fu_142 <= add_ln578_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten61_fu_134 <= 14'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln578_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten61_fu_134 <= select_ln580_8_fu_303_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_fu_126 <= 6'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln578_reg_925 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        indvar_flatten_fu_126 <= select_ln582_2_fu_770_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        n_fu_138 <= 3'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln578_reg_925 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        n_fu_138 <= select_ln578_fu_507_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_fu_118 <= 3'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln578_reg_925 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        w_fu_118 <= select_ln584_fu_747_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln578_reg_925 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001))) begin
        gmem_addr_79_read_reg_977 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        icmp_ln578_reg_925 <= icmp_ln578_fu_275_p2;
        icmp_ln578_reg_925_pp0_iter1_reg <= icmp_ln578_reg_925;
        mul_ln580_reg_919 <= mul_ln580_fu_270_p2;
        n_2_reg_913 <= n_fu_138;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln578_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        icmp_ln580_reg_929 <= icmp_ln580_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln578_reg_925 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        icmp_ln584_1_reg_957 <= icmp_ln584_1_fu_755_p2;
        or_ln582_reg_943 <= or_ln582_fu_635_p2;
        sext_ln584_1_mid2_v_reg_952 <= {{add_ln582_2_fu_704_p2[63:2]}};
        sext_ln584_mid2_v_reg_947 <= {{add_ln582_1_fu_689_p2[63:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln580_cast_reg_907[7 : 0] <= zext_ln580_cast_fu_221_p1[7 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln578_reg_925 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln578_reg_925_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        ap_phi_mux_first_iter_0_phi_fu_213_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_213_p4 = first_iter_0_reg_208;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (or_ln582_reg_943 == 1'd1) & (icmp_ln578_reg_925 == 1'd0) & (1'b0 == ap_block_pp0_stage3))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (or_ln582_reg_943 == 1'd1) & (icmp_ln578_reg_925 == 1'd0) & (1'b0 == ap_block_pp0_stage3))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (icmp_ln584_1_reg_957 == 1'd1))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln578_reg_925 == 1'd0) & (1'b0 == ap_block_pp0_stage10))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln578_reg_925 == 1'd0) & (1'b0 == ap_block_pp0_stage11))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op154_readreq_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op156_writereq_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln584_1_reg_957 == 1'd1))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln578_reg_925 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln578_reg_925 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln578_1_fu_404_p2 = (n_2_reg_913 + 3'd1);

assign add_ln578_fu_280_p2 = (indvar_flatten128_fu_142 + 16'd1);

assign add_ln580_1_fu_297_p2 = (indvar_flatten61_fu_134 + 14'd1);

assign add_ln580_fu_513_p2 = (select_ln580_fu_392_p3 + 8'd1);

assign add_ln582_1_fu_689_p2 = ($signed(sext_ln582_fu_685_p1) + $signed(afterAct));

assign add_ln582_2_fu_704_p2 = ($signed(sext_ln582_fu_685_p1) + $signed(buffer_result));

assign add_ln582_3_fu_764_p2 = (indvar_flatten_fu_126 + 6'd1);

assign add_ln582_fu_629_p2 = (select_ln580_4_fu_524_p3 + 3'd1);

assign add_ln584_fu_730_p2 = (w_fu_118 + 3'd1);

assign and_ln580_1_fu_501_p2 = (xor_ln580_fu_478_p2 & icmp_ln582_fu_495_p2);

assign and_ln580_2_fu_615_p2 = (or_ln580_3_fu_610_p2 & and_ln580_fu_489_p2);

assign and_ln580_fu_489_p2 = (xor_ln580_fu_478_p2 & icmp_ln584_fu_483_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln578_reg_925 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln578_reg_925 == 1'd0));
end

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state12_io));
end

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state12_io));
end

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((m_axi_gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln584_1_reg_957 == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((m_axi_gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln584_1_reg_957 == 1'd1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io));
end

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage10_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln578_reg_925 == 1'd0));
end

always @ (*) begin
    ap_block_state12_io = ((m_axi_gmem_WREADY == 1'b0) & (icmp_ln578_reg_925 == 1'd0));
end

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage2_iter1 = ((m_axi_gmem_BVALID == 1'b0) & (icmp_ln584_1_reg_957 == 1'd1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = (((m_axi_gmem_AWREADY == 1'b0) & (ap_predicate_op156_writereq_state4 == 1'b1)) | ((m_axi_gmem_ARREADY == 1'b0) & (ap_predicate_op154_readreq_state4 == 1'b1)));
end

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

always @ (*) begin
    ap_predicate_op154_readreq_state4 = ((or_ln582_reg_943 == 1'd1) & (icmp_ln578_reg_925 == 1'd0));
end

always @ (*) begin
    ap_predicate_op156_writereq_state4 = ((or_ln582_reg_943 == 1'd1) & (icmp_ln578_reg_925 == 1'd0));
end

assign empty_143_fu_380_p2 = ($signed(p_shl1_fu_372_p3) - $signed(p_cast2_fu_368_p1));

assign empty_fu_362_p2 = (h_cast_fu_358_p1 + tmp3_fu_352_p2);

assign h_cast_fu_358_p1 = h_fu_122;

assign h_cast_mid1_fu_641_p1 = add_ln582_fu_629_p2;

assign icmp_ln578_fu_275_p2 = ((indvar_flatten128_fu_142 == bound66) ? 1'b1 : 1'b0);

assign icmp_ln580_fu_289_p2 = ((indvar_flatten61_fu_134 == bound21) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_495_p2 = ((indvar_flatten_fu_126 == 6'd49) ? 1'b1 : 1'b0);

assign icmp_ln584_1_fu_755_p2 = ((select_ln584_fu_747_p3 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln584_fu_483_p2 = ((w_fu_118 == 3'd7) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = sext_ln582_1_fu_803_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd7;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = sext_ln582_2_fu_806_p1;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd7;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = gmem_addr_79_read_reg_977;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign mul_ln580_1_fu_413_p0 = mul_ln580_1_fu_413_p00;

assign mul_ln580_1_fu_413_p00 = add_ln578_1_fu_404_p2;

assign mul_ln580_1_fu_413_p1 = zext_ln580_cast_reg_907;

assign mul_ln580_fu_270_p0 = mul_ln580_fu_270_p00;

assign mul_ln580_fu_270_p00 = n_fu_138;

assign mul_ln580_fu_270_p1 = zext_ln580_cast_reg_907;

assign or_ln580_1_fu_519_p2 = (icmp_ln580_reg_929 | and_ln580_1_fu_501_p2);

assign or_ln580_2_fu_532_p2 = (or_ln580_fu_399_p2 | and_ln580_1_fu_501_p2);

assign or_ln580_3_fu_610_p2 = (xor_ln580_1_fu_604_p2 | icmp_ln580_reg_929);

assign or_ln580_fu_399_p2 = (icmp_ln580_reg_929 | ap_phi_mux_first_iter_0_phi_fu_213_p4);

assign or_ln582_fu_635_p2 = (or_ln580_2_fu_532_p2 | and_ln580_2_fu_615_p2);

assign or_ln584_1_fu_742_p2 = (or_ln584_fu_736_p2 | icmp_ln580_reg_929);

assign or_ln584_fu_736_p2 = (and_ln580_2_fu_615_p2 | and_ln580_1_fu_501_p2);

assign p_cast2_fu_368_p1 = empty_fu_362_p2;

assign p_cast2_mid131_fu_578_p1 = tmp3_mid1_fu_564_p2;

assign p_cast2_mid194_fu_453_p1 = tmp3_mid186_fu_440_p2;

assign p_cast2_mid1_fu_651_p1 = p_mid1_fu_645_p2;

assign p_mid111_fu_663_p2 = ($signed(p_shl1_mid1_fu_655_p3) - $signed(p_cast2_mid1_fu_651_p1));

assign p_mid135_fu_590_p2 = ($signed(p_shl1_mid2_fu_582_p3) - $signed(p_cast2_mid131_fu_578_p1));

assign p_mid198_fu_465_p2 = ($signed(p_shl1_mid_fu_457_p3) - $signed(p_cast2_mid194_fu_453_p1));

assign p_mid1_fu_645_p2 = (h_cast_mid1_fu_641_p1 + select_ln580_5_fu_570_p3);

assign p_shl1_fu_372_p3 = {{empty_fu_362_p2}, {3'd0}};

assign p_shl1_mid1_fu_655_p3 = {{p_mid1_fu_645_p2}, {3'd0}};

assign p_shl1_mid2_fu_582_p3 = {{tmp3_mid1_fu_564_p2}, {3'd0}};

assign p_shl1_mid_fu_457_p3 = {{tmp3_mid186_fu_440_p2}, {3'd0}};

assign p_shl_cast_fu_348_p1 = p_shl_fu_340_p3;

assign p_shl_cast_mid184_fu_436_p1 = p_shl_mid_fu_428_p3;

assign p_shl_cast_mid1_fu_560_p1 = p_shl_mid1_fu_552_p3;

assign p_shl_fu_340_p3 = {{tmp2_fu_331_p2}, {3'd0}};

assign p_shl_mid1_fu_552_p3 = {{tmp2_mid1_fu_542_p2}, {3'd0}};

assign p_shl_mid_fu_428_p3 = {{mul_ln580_1_fu_413_p2}, {3'd0}};

assign select_ln578_fu_507_p3 = ((icmp_ln580_reg_929[0:0] == 1'b1) ? add_ln578_1_fu_404_p2 : n_2_reg_913);

assign select_ln580_1_fu_418_p3 = ((icmp_ln580_reg_929[0:0] == 1'b1) ? mul_ln580_1_fu_413_p2 : mul_ln580_reg_919);

assign select_ln580_2_fu_446_p3 = ((icmp_ln580_reg_929[0:0] == 1'b1) ? tmp3_mid186_fu_440_p2 : tmp3_fu_352_p2);

assign select_ln580_3_fu_471_p3 = ((icmp_ln580_reg_929[0:0] == 1'b1) ? p_mid198_fu_465_p2 : empty_143_fu_380_p2);

assign select_ln580_4_fu_524_p3 = ((or_ln580_1_fu_519_p2[0:0] == 1'b1) ? 3'd0 : h_fu_122);

assign select_ln580_5_fu_570_p3 = ((and_ln580_1_fu_501_p2[0:0] == 1'b1) ? tmp3_mid1_fu_564_p2 : select_ln580_2_fu_446_p3);

assign select_ln580_6_fu_596_p3 = ((and_ln580_1_fu_501_p2[0:0] == 1'b1) ? p_mid135_fu_590_p2 : select_ln580_3_fu_471_p3);

assign select_ln580_7_fu_621_p3 = ((and_ln580_1_fu_501_p2[0:0] == 1'b1) ? add_ln580_fu_513_p2 : select_ln580_fu_392_p3);

assign select_ln580_8_fu_303_p3 = ((icmp_ln580_fu_289_p2[0:0] == 1'b1) ? 14'd1 : add_ln580_1_fu_297_p2);

assign select_ln580_fu_392_p3 = ((icmp_ln580_reg_929[0:0] == 1'b1) ? 8'd0 : c_fu_130);

assign select_ln582_1_fu_719_p3 = ((and_ln580_2_fu_615_p2[0:0] == 1'b1) ? add_ln582_fu_629_p2 : select_ln580_4_fu_524_p3);

assign select_ln582_2_fu_770_p3 = ((or_ln580_1_fu_519_p2[0:0] == 1'b1) ? 6'd1 : add_ln582_3_fu_764_p2);

assign select_ln582_fu_669_p3 = ((and_ln580_2_fu_615_p2[0:0] == 1'b1) ? p_mid111_fu_663_p2 : select_ln580_6_fu_596_p3);

assign select_ln584_fu_747_p3 = ((or_ln584_1_fu_742_p2[0:0] == 1'b1) ? 3'd1 : add_ln584_fu_730_p2);

assign sext_ln582_1_fu_803_p1 = $signed(sext_ln584_mid2_v_reg_947);

assign sext_ln582_2_fu_806_p1 = $signed(sext_ln584_1_mid2_v_reg_952);

assign sext_ln582_fu_685_p1 = $signed(tmp_s_fu_677_p3);

assign tmp2_cast1_fu_336_p1 = tmp2_fu_331_p2;

assign tmp2_cast1_mid178_fu_424_p1 = mul_ln580_1_fu_413_p2;

assign tmp2_cast1_mid1_fu_548_p1 = tmp2_mid1_fu_542_p2;

assign tmp2_fu_331_p2 = (zext_ln580_2_fu_327_p1 + mul_ln580_reg_919);

assign tmp2_mid1_fu_542_p2 = (zext_ln580_4_fu_538_p1 + select_ln580_1_fu_418_p3);

assign tmp3_fu_352_p2 = (p_shl_cast_fu_348_p1 - tmp2_cast1_fu_336_p1);

assign tmp3_mid186_fu_440_p2 = (p_shl_cast_mid184_fu_436_p1 - tmp2_cast1_mid178_fu_424_p1);

assign tmp3_mid1_fu_564_p2 = (p_shl_cast_mid1_fu_560_p1 - tmp2_cast1_mid1_fu_548_p1);

assign tmp_s_fu_677_p3 = {{select_ln582_fu_669_p3}, {2'd0}};

assign xor_ln580_1_fu_604_p2 = (icmp_ln582_fu_495_p2 ^ 1'd1);

assign xor_ln580_fu_478_p2 = (icmp_ln580_reg_929 ^ 1'd1);

assign zext_ln580_2_fu_327_p1 = c_fu_130;

assign zext_ln580_4_fu_538_p1 = add_ln580_fu_513_p2;

assign zext_ln580_cast_fu_221_p1 = zext_ln580;

always @ (posedge ap_clk) begin
    zext_ln580_cast_reg_907[9:8] <= 2'b00;
end

endmodule //kernel_attention_compute_skip_Pipeline_VITIS_LOOP_584_3
