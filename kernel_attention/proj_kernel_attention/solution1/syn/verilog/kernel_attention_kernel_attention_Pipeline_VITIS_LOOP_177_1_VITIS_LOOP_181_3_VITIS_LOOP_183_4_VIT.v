// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_attention_kernel_attention_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_VITIS_LOOP_183_4_VIT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        sext_ln177,
        afterRearrangeQKX
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [61:0] sext_ln177;
input  [63:0] afterRearrangeQKX;

reg ap_idle;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg   [0:0] icmp_ln177_reg_911;
reg   [0:0] icmp_ln177_reg_911_pp0_iter4_reg;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_state6_io;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
reg    ap_block_state12_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln177_fu_266_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_AW;
reg    gmem_blk_n_W;
reg    gmem_blk_n_B;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln177_reg_911_pp0_iter2_reg;
reg   [0:0] icmp_ln177_reg_911_pp0_iter3_reg;
wire   [0:0] icmp_ln179_fu_290_p2;
reg   [0:0] icmp_ln179_reg_915;
reg   [0:0] icmp_ln179_reg_915_pp0_iter2_reg;
reg   [0:0] icmp_ln179_reg_915_pp0_iter3_reg;
wire   [0:0] and_ln177_2_fu_356_p2;
reg   [0:0] and_ln177_2_reg_922;
reg   [0:0] and_ln177_2_reg_922_pp0_iter2_reg;
reg   [0:0] and_ln177_2_reg_922_pp0_iter3_reg;
wire   [0:0] or_ln179_fu_368_p2;
reg   [0:0] or_ln179_reg_927;
reg   [0:0] or_ln179_reg_927_pp0_iter2_reg;
reg   [0:0] or_ln179_reg_927_pp0_iter3_reg;
wire   [0:0] and_ln179_1_fu_436_p2;
reg   [0:0] and_ln179_1_reg_932;
reg   [0:0] and_ln179_1_reg_932_pp0_iter2_reg;
reg   [0:0] and_ln179_1_reg_932_pp0_iter3_reg;
wire   [0:0] or_ln181_1_fu_456_p2;
reg   [0:0] or_ln181_1_reg_938;
reg   [0:0] or_ln181_1_reg_938_pp0_iter2_reg;
wire   [0:0] and_ln181_fu_468_p2;
reg   [0:0] and_ln181_reg_943;
reg   [0:0] and_ln181_reg_943_pp0_iter2_reg;
reg   [63:0] gmem_addr_17_reg_953;
reg   [31:0] gmem_addr_read_reg_959;
reg    ap_condition_exit_pp0_iter5_stage0;
wire  signed [63:0] sext_ln185_fu_801_p1;
reg    ap_block_pp0_stage0_01001;
reg   [4:0] x_fu_122;
wire   [4:0] add_ln184_fu_504_p2;
wire    ap_loop_init;
reg   [2:0] w_fu_126;
wire   [2:0] select_ln183_1_fu_598_p3;
reg   [7:0] indvar_flatten2932_fu_130;
wire   [7:0] select_ln183_2_fu_516_p3;
reg   [2:0] h_1_fu_134;
wire   [2:0] select_ln181_2_fu_758_p3;
reg   [10:0] indvar_flatten2949_fu_138;
wire   [10:0] select_ln181_3_fu_530_p3;
reg   [2:0] c_1_fu_142;
wire   [2:0] select_ln179_4_fu_442_p3;
reg   [12:0] indvar_flatten2985_fu_146;
wire   [12:0] select_ln179_5_fu_544_p3;
reg   [2:0] b_1_fu_150;
wire   [2:0] select_ln177_5_fu_692_p3;
reg   [13:0] indvar_flatten3044_fu_154;
wire   [13:0] add_ln177_fu_272_p2;
wire   [1:0] empty_106_fu_246_p1;
wire   [5:0] p_shl3_fu_250_p3;
wire   [3:0] p_shl4_fu_258_p3;
wire   [0:0] icmp_ln184_fu_326_p2;
wire   [0:0] xor_ln177_fu_320_p2;
wire   [0:0] icmp_ln183_fu_338_p2;
wire   [0:0] icmp_ln181_fu_350_p2;
wire   [2:0] select_ln177_fu_296_p3;
wire   [2:0] add_ln179_fu_362_p2;
wire   [1:0] empty_109_fu_374_p1;
wire   [5:0] p_shl10_mid1_fu_378_p3;
wire   [5:0] select_ln177_2_fu_304_p3;
wire   [5:0] select_ln179_1_fu_386_p3;
wire   [3:0] p_shl11_mid1_fu_398_p3;
wire   [3:0] select_ln177_3_fu_312_p3;
wire   [3:0] select_ln179_2_fu_406_p3;
wire   [0:0] xor_ln179_fu_418_p2;
wire   [0:0] and_ln177_fu_332_p2;
wire   [0:0] or_ln179_1_fu_424_p2;
wire   [0:0] and_ln177_1_fu_344_p2;
wire   [0:0] or_ln181_fu_450_p2;
wire   [0:0] and_ln179_fu_430_p2;
wire   [0:0] xor_ln181_fu_462_p2;
wire   [0:0] or_ln183_fu_474_p2;
wire   [0:0] or_ln183_1_fu_480_p2;
wire   [4:0] zext_ln179_fu_414_p1;
wire   [4:0] select_ln183_fu_486_p3;
wire   [4:0] add_ln185_1_fu_494_p2;
wire   [7:0] add_ln183_1_fu_510_p2;
wire   [10:0] add_ln181_1_fu_524_p2;
wire   [12:0] add_ln179_1_fu_538_p2;
wire   [2:0] select_ln181_fu_585_p3;
wire   [2:0] add_ln183_fu_592_p2;
wire   [2:0] empty_fu_624_p0;
wire   [12:0] empty_fu_624_p1;
wire   [5:0] p_shl6_fu_634_p3;
wire   [6:0] p_shl12_cast_fu_642_p1;
wire   [6:0] zext_ln181_fu_630_p1;
wire   [6:0] empty_107_fu_646_p2;
wire  signed [14:0] sext_ln183_fu_652_p1;
wire   [14:0] empty_fu_624_p2;
wire   [2:0] add_ln177_1_fu_662_p2;
wire   [2:0] p_mid13000_fu_672_p0;
wire   [12:0] p_mid13000_fu_672_p1;
wire   [14:0] p_mid13000_fu_672_p2;
wire   [14:0] add_ln185_2_fu_656_p2;
wire   [14:0] select_ln177_1_fu_678_p3;
wire   [14:0] select_ln177_4_fu_685_p3;
wire   [2:0] select_ln179_fu_699_p3;
wire   [2:0] add_ln181_fu_713_p2;
wire   [5:0] p_shl12_mid1_fu_723_p3;
wire   [6:0] p_shl12_cast_mid1_fu_731_p1;
wire   [6:0] zext_ln181_1_fu_719_p1;
wire   [6:0] p_mid12943_fu_735_p2;
wire  signed [14:0] sext_ln183_1_fu_741_p1;
wire   [14:0] add_ln185_6_fu_745_p2;
wire   [14:0] select_ln179_3_fu_706_p3;
wire   [11:0] grp_fu_827_p4;
wire   [14:0] zext_ln185_2_fu_765_p1;
wire   [14:0] select_ln181_1_fu_751_p3;
wire   [14:0] add_ln185_5_fu_768_p2;
wire   [16:0] tmp_s_fu_774_p3;
wire  signed [63:0] sext_ln185_1_fu_782_p1;
wire   [63:0] add_ln185_4_fu_786_p2;
wire   [61:0] trunc_ln_fu_791_p4;
wire   [4:0] grp_fu_827_p0;
wire   [5:0] grp_fu_827_p1;
wire   [5:0] grp_fu_827_p2;
wire   [2:0] grp_fu_827_p3;
reg    grp_fu_827_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [14:0] empty_fu_624_p00;
wire   [6:0] grp_fu_827_p00;
wire   [6:0] grp_fu_827_p10;
wire   [11:0] grp_fu_827_p30;
wire   [14:0] p_mid13000_fu_672_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_attention_mul_3ns_13ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 15 ))
mul_3ns_13ns_15_1_1_U168(
    .din0(empty_fu_624_p0),
    .din1(empty_fu_624_p1),
    .dout(empty_fu_624_p2)
);

kernel_attention_mul_3ns_13ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 15 ))
mul_3ns_13ns_15_1_1_U169(
    .din0(p_mid13000_fu_672_p0),
    .din1(p_mid13000_fu_672_p1),
    .dout(p_mid13000_fu_672_p2)
);

kernel_attention_ama_addmuladd_5ns_6ns_6ns_3ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 3 ),
    .dout_WIDTH( 12 ))
ama_addmuladd_5ns_6ns_6ns_3ns_12_4_1_U170(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_827_p0),
    .din1(grp_fu_827_p1),
    .din2(grp_fu_827_p2),
    .din3(grp_fu_827_p3),
    .ce(grp_fu_827_ce),
    .dout(grp_fu_827_p4)
);

kernel_attention_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter5_stage0)) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            b_1_fu_150 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln177_reg_911_pp0_iter3_reg == 1'd0))) begin
            b_1_fu_150 <= select_ln177_5_fu_692_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            c_1_fu_142 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln177_fu_266_p2 == 1'd0))) begin
            c_1_fu_142 <= select_ln179_4_fu_442_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            h_1_fu_134 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln177_reg_911_pp0_iter3_reg == 1'd0))) begin
            h_1_fu_134 <= select_ln181_2_fu_758_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten2932_fu_130 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln177_fu_266_p2 == 1'd0))) begin
            indvar_flatten2932_fu_130 <= select_ln183_2_fu_516_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten2949_fu_138 <= 11'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln177_fu_266_p2 == 1'd0))) begin
            indvar_flatten2949_fu_138 <= select_ln181_3_fu_530_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten2985_fu_146 <= 13'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln177_fu_266_p2 == 1'd0))) begin
            indvar_flatten2985_fu_146 <= select_ln179_5_fu_544_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten3044_fu_154 <= 14'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln177_fu_266_p2 == 1'd0))) begin
            indvar_flatten3044_fu_154 <= add_ln177_fu_272_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            w_fu_126 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln177_reg_911_pp0_iter2_reg == 1'd0))) begin
            w_fu_126 <= select_ln183_1_fu_598_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_122 <= 5'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln177_fu_266_p2 == 1'd0))) begin
            x_fu_122 <= add_ln184_fu_504_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln177_fu_266_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln177_2_reg_922 <= and_ln177_2_fu_356_p2;
        and_ln179_1_reg_932 <= and_ln179_1_fu_436_p2;
        and_ln181_reg_943 <= and_ln181_fu_468_p2;
        icmp_ln179_reg_915 <= icmp_ln179_fu_290_p2;
        or_ln179_reg_927 <= or_ln179_fu_368_p2;
        or_ln181_1_reg_938 <= or_ln181_1_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln177_2_reg_922_pp0_iter2_reg <= and_ln177_2_reg_922;
        and_ln177_2_reg_922_pp0_iter3_reg <= and_ln177_2_reg_922_pp0_iter2_reg;
        and_ln179_1_reg_932_pp0_iter2_reg <= and_ln179_1_reg_932;
        and_ln179_1_reg_932_pp0_iter3_reg <= and_ln179_1_reg_932_pp0_iter2_reg;
        and_ln181_reg_943_pp0_iter2_reg <= and_ln181_reg_943;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln177_reg_911_pp0_iter2_reg <= icmp_ln177_reg_911;
        icmp_ln177_reg_911_pp0_iter3_reg <= icmp_ln177_reg_911_pp0_iter2_reg;
        icmp_ln177_reg_911_pp0_iter4_reg <= icmp_ln177_reg_911_pp0_iter3_reg;
        icmp_ln179_reg_915_pp0_iter2_reg <= icmp_ln179_reg_915;
        icmp_ln179_reg_915_pp0_iter3_reg <= icmp_ln179_reg_915_pp0_iter2_reg;
        or_ln179_reg_927_pp0_iter2_reg <= or_ln179_reg_927;
        or_ln179_reg_927_pp0_iter3_reg <= or_ln179_reg_927_pp0_iter2_reg;
        or_ln181_1_reg_938_pp0_iter2_reg <= or_ln181_1_reg_938;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln177_reg_911 <= icmp_ln177_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_reg_911_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_17_reg_953 <= sext_ln185_fu_801_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln177_reg_911_pp0_iter4_reg == 1'd0))) begin
        gmem_addr_read_reg_959 <= m_axi_gmem_RDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln177_fu_266_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln177_reg_911_pp0_iter4_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln177_reg_911_pp0_iter4_reg == 1'd0))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln177_reg_911_pp0_iter4_reg == 1'd0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_827_ce = 1'b1;
    end else begin
        grp_fu_827_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln177_reg_911_pp0_iter4_reg == 1'd0))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln177_reg_911_pp0_iter4_reg == 1'd0))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln177_1_fu_662_p2 = (b_1_fu_150 + 3'd1);

assign add_ln177_fu_272_p2 = (indvar_flatten3044_fu_154 + 14'd1);

assign add_ln179_1_fu_538_p2 = (indvar_flatten2985_fu_146 + 13'd1);

assign add_ln179_fu_362_p2 = (select_ln177_fu_296_p3 + 3'd1);

assign add_ln181_1_fu_524_p2 = (indvar_flatten2949_fu_138 + 11'd1);

assign add_ln181_fu_713_p2 = (select_ln179_fu_699_p3 + 3'd1);

assign add_ln183_1_fu_510_p2 = (indvar_flatten2932_fu_130 + 8'd1);

assign add_ln183_fu_592_p2 = (select_ln181_fu_585_p3 + 3'd1);

assign add_ln184_fu_504_p2 = (select_ln183_fu_486_p3 + 5'd1);

assign add_ln185_1_fu_494_p2 = (zext_ln179_fu_414_p1 + select_ln183_fu_486_p3);

assign add_ln185_2_fu_656_p2 = ($signed(sext_ln183_fu_652_p1) + $signed(empty_fu_624_p2));

assign add_ln185_4_fu_786_p2 = ($signed(sext_ln185_1_fu_782_p1) + $signed(afterRearrangeQKX));

assign add_ln185_5_fu_768_p2 = (zext_ln185_2_fu_765_p1 + select_ln181_1_fu_751_p3);

assign add_ln185_6_fu_745_p2 = ($signed(sext_ln183_1_fu_741_p1) + $signed(select_ln177_1_fu_678_p3));

assign and_ln177_1_fu_344_p2 = (xor_ln177_fu_320_p2 & icmp_ln183_fu_338_p2);

assign and_ln177_2_fu_356_p2 = (xor_ln177_fu_320_p2 & icmp_ln181_fu_350_p2);

assign and_ln177_fu_332_p2 = (xor_ln177_fu_320_p2 & icmp_ln184_fu_326_p2);

assign and_ln179_1_fu_436_p2 = (or_ln179_1_fu_424_p2 & and_ln177_1_fu_344_p2);

assign and_ln179_fu_430_p2 = (or_ln179_1_fu_424_p2 & and_ln177_fu_332_p2);

assign and_ln181_fu_468_p2 = (xor_ln181_fu_462_p2 & and_ln179_fu_430_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln177_reg_911_pp0_iter4_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((icmp_ln177_reg_911_pp0_iter4_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((icmp_ln177_reg_911_pp0_iter4_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0)))));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter11 = (m_axi_gmem_BVALID == 1'b0);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((m_axi_gmem_AWREADY == 1'b0) & (icmp_ln177_reg_911_pp0_iter4_reg == 1'd0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((icmp_ln177_reg_911_pp0_iter4_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_106_fu_246_p1 = c_1_fu_142[1:0];

assign empty_107_fu_646_p2 = (p_shl12_cast_fu_642_p1 - zext_ln181_fu_630_p1);

assign empty_109_fu_374_p1 = add_ln179_fu_362_p2[1:0];

assign empty_fu_624_p0 = empty_fu_624_p00;

assign empty_fu_624_p00 = b_1_fu_150;

assign empty_fu_624_p1 = 15'd3920;

assign grp_fu_827_p0 = grp_fu_827_p00;

assign grp_fu_827_p00 = add_ln185_1_fu_494_p2;

assign grp_fu_827_p1 = grp_fu_827_p10;

assign grp_fu_827_p10 = select_ln179_1_fu_386_p3;

assign grp_fu_827_p2 = 12'd49;

assign grp_fu_827_p3 = grp_fu_827_p30;

assign grp_fu_827_p30 = select_ln183_1_fu_598_p3;

assign icmp_ln177_fu_266_p2 = ((indvar_flatten3044_fu_154 == 14'd15680) ? 1'b1 : 1'b0);

assign icmp_ln179_fu_290_p2 = ((indvar_flatten2985_fu_146 == 13'd3920) ? 1'b1 : 1'b0);

assign icmp_ln181_fu_350_p2 = ((indvar_flatten2949_fu_138 == 11'd980) ? 1'b1 : 1'b0);

assign icmp_ln183_fu_338_p2 = ((indvar_flatten2932_fu_130 == 8'd140) ? 1'b1 : 1'b0);

assign icmp_ln184_fu_326_p2 = ((x_fu_122 == 5'd20) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = gmem_addr_17_reg_953;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = gmem_addr_read_reg_959;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign or_ln179_1_fu_424_p2 = (xor_ln179_fu_418_p2 | icmp_ln179_fu_290_p2);

assign or_ln179_fu_368_p2 = (icmp_ln179_fu_290_p2 | and_ln177_2_fu_356_p2);

assign or_ln181_1_fu_456_p2 = (or_ln181_fu_450_p2 | icmp_ln179_fu_290_p2);

assign or_ln181_fu_450_p2 = (and_ln179_1_fu_436_p2 | and_ln177_2_fu_356_p2);

assign or_ln183_1_fu_480_p2 = (or_ln183_fu_474_p2 | or_ln179_fu_368_p2);

assign or_ln183_fu_474_p2 = (and_ln181_fu_468_p2 | and_ln179_1_fu_436_p2);

assign p_mid12943_fu_735_p2 = (p_shl12_cast_mid1_fu_731_p1 - zext_ln181_1_fu_719_p1);

assign p_mid13000_fu_672_p0 = p_mid13000_fu_672_p00;

assign p_mid13000_fu_672_p00 = add_ln177_1_fu_662_p2;

assign p_mid13000_fu_672_p1 = 15'd3920;

assign p_shl10_mid1_fu_378_p3 = {{empty_109_fu_374_p1}, {4'd0}};

assign p_shl11_mid1_fu_398_p3 = {{empty_109_fu_374_p1}, {2'd0}};

assign p_shl12_cast_fu_642_p1 = p_shl6_fu_634_p3;

assign p_shl12_cast_mid1_fu_731_p1 = p_shl12_mid1_fu_723_p3;

assign p_shl12_mid1_fu_723_p3 = {{add_ln181_fu_713_p2}, {3'd0}};

assign p_shl3_fu_250_p3 = {{empty_106_fu_246_p1}, {4'd0}};

assign p_shl4_fu_258_p3 = {{empty_106_fu_246_p1}, {2'd0}};

assign p_shl6_fu_634_p3 = {{h_1_fu_134}, {3'd0}};

assign select_ln177_1_fu_678_p3 = ((icmp_ln179_reg_915_pp0_iter3_reg[0:0] == 1'b1) ? p_mid13000_fu_672_p2 : empty_fu_624_p2);

assign select_ln177_2_fu_304_p3 = ((icmp_ln179_fu_290_p2[0:0] == 1'b1) ? 6'd0 : p_shl3_fu_250_p3);

assign select_ln177_3_fu_312_p3 = ((icmp_ln179_fu_290_p2[0:0] == 1'b1) ? 4'd0 : p_shl4_fu_258_p3);

assign select_ln177_4_fu_685_p3 = ((icmp_ln179_reg_915_pp0_iter3_reg[0:0] == 1'b1) ? p_mid13000_fu_672_p2 : add_ln185_2_fu_656_p2);

assign select_ln177_5_fu_692_p3 = ((icmp_ln179_reg_915_pp0_iter3_reg[0:0] == 1'b1) ? add_ln177_1_fu_662_p2 : b_1_fu_150);

assign select_ln177_fu_296_p3 = ((icmp_ln179_fu_290_p2[0:0] == 1'b1) ? 3'd0 : c_1_fu_142);

assign select_ln179_1_fu_386_p3 = ((and_ln177_2_fu_356_p2[0:0] == 1'b1) ? p_shl10_mid1_fu_378_p3 : select_ln177_2_fu_304_p3);

assign select_ln179_2_fu_406_p3 = ((and_ln177_2_fu_356_p2[0:0] == 1'b1) ? p_shl11_mid1_fu_398_p3 : select_ln177_3_fu_312_p3);

assign select_ln179_3_fu_706_p3 = ((and_ln177_2_reg_922_pp0_iter3_reg[0:0] == 1'b1) ? select_ln177_1_fu_678_p3 : select_ln177_4_fu_685_p3);

assign select_ln179_4_fu_442_p3 = ((and_ln177_2_fu_356_p2[0:0] == 1'b1) ? add_ln179_fu_362_p2 : select_ln177_fu_296_p3);

assign select_ln179_5_fu_544_p3 = ((icmp_ln179_fu_290_p2[0:0] == 1'b1) ? 13'd1 : add_ln179_1_fu_538_p2);

assign select_ln179_fu_699_p3 = ((or_ln179_reg_927_pp0_iter3_reg[0:0] == 1'b1) ? 3'd0 : h_1_fu_134);

assign select_ln181_1_fu_751_p3 = ((and_ln179_1_reg_932_pp0_iter3_reg[0:0] == 1'b1) ? add_ln185_6_fu_745_p2 : select_ln179_3_fu_706_p3);

assign select_ln181_2_fu_758_p3 = ((and_ln179_1_reg_932_pp0_iter3_reg[0:0] == 1'b1) ? add_ln181_fu_713_p2 : select_ln179_fu_699_p3);

assign select_ln181_3_fu_530_p3 = ((or_ln179_fu_368_p2[0:0] == 1'b1) ? 11'd1 : add_ln181_1_fu_524_p2);

assign select_ln181_fu_585_p3 = ((or_ln181_1_reg_938_pp0_iter2_reg[0:0] == 1'b1) ? 3'd0 : w_fu_126);

assign select_ln183_1_fu_598_p3 = ((and_ln181_reg_943_pp0_iter2_reg[0:0] == 1'b1) ? add_ln183_fu_592_p2 : select_ln181_fu_585_p3);

assign select_ln183_2_fu_516_p3 = ((or_ln181_1_fu_456_p2[0:0] == 1'b1) ? 8'd1 : add_ln183_1_fu_510_p2);

assign select_ln183_fu_486_p3 = ((or_ln183_1_fu_480_p2[0:0] == 1'b1) ? 5'd0 : x_fu_122);

assign sext_ln183_1_fu_741_p1 = $signed(p_mid12943_fu_735_p2);

assign sext_ln183_fu_652_p1 = $signed(empty_107_fu_646_p2);

assign sext_ln185_1_fu_782_p1 = $signed(tmp_s_fu_774_p3);

assign sext_ln185_fu_801_p1 = $signed(trunc_ln_fu_791_p4);

assign tmp_s_fu_774_p3 = {{add_ln185_5_fu_768_p2}, {2'd0}};

assign trunc_ln_fu_791_p4 = {{add_ln185_4_fu_786_p2[63:2]}};

assign xor_ln177_fu_320_p2 = (icmp_ln179_fu_290_p2 ^ 1'd1);

assign xor_ln179_fu_418_p2 = (icmp_ln181_fu_350_p2 ^ 1'd1);

assign xor_ln181_fu_462_p2 = (1'd1 ^ and_ln179_1_fu_436_p2);

assign zext_ln179_fu_414_p1 = select_ln179_2_fu_406_p3;

assign zext_ln181_1_fu_719_p1 = add_ln181_fu_713_p2;

assign zext_ln181_fu_630_p1 = h_1_fu_134;

assign zext_ln185_2_fu_765_p1 = grp_fu_827_p4;

endmodule //kernel_attention_kernel_attention_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_VITIS_LOOP_183_4_VIT
