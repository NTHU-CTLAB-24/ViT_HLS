// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_attention_kernel_attention_Pipeline_VITIS_LOOP_110_1_VITIS_LOOP_114_3_VITIS_LOOP_116_4_VIT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        sext_ln110,
        afterRearrangeX2
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [61:0] sext_ln110;
input  [63:0] afterRearrangeX2;

reg ap_idle;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg   [0:0] icmp_ln110_reg_905;
reg   [0:0] icmp_ln110_reg_905_pp0_iter4_reg;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_state6_io;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
reg    ap_block_state12_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln110_fu_250_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_AW;
reg    gmem_blk_n_W;
reg    gmem_blk_n_B;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln110_reg_905_pp0_iter2_reg;
reg   [0:0] icmp_ln110_reg_905_pp0_iter3_reg;
wire   [0:0] icmp_ln112_fu_268_p2;
reg   [0:0] icmp_ln112_reg_909;
reg   [0:0] icmp_ln112_reg_909_pp0_iter2_reg;
reg   [0:0] icmp_ln112_reg_909_pp0_iter3_reg;
wire   [0:0] xor_ln112_fu_282_p2;
reg   [0:0] xor_ln112_reg_919;
reg   [0:0] xor_ln112_reg_919_pp0_iter2_reg;
reg   [0:0] xor_ln112_reg_919_pp0_iter3_reg;
wire   [0:0] icmp_ln114_fu_288_p2;
reg   [0:0] icmp_ln114_reg_925;
reg   [0:0] icmp_ln114_reg_925_pp0_iter2_reg;
reg   [0:0] icmp_ln114_reg_925_pp0_iter3_reg;
wire   [0:0] and_ln112_2_fu_294_p2;
reg   [0:0] and_ln112_2_reg_930;
reg   [0:0] and_ln112_2_reg_930_pp0_iter2_reg;
reg   [0:0] and_ln112_2_reg_930_pp0_iter3_reg;
wire   [0:0] or_ln112_fu_306_p2;
reg   [0:0] or_ln112_reg_937;
reg   [0:0] or_ln112_reg_937_pp0_iter2_reg;
reg   [0:0] or_ln112_reg_937_pp0_iter3_reg;
wire   [13:0] mul_ln112_fu_379_p2;
wire   [13:0] mul_ln112_1_fu_395_p2;
reg   [13:0] mul_ln112_1_reg_953;
reg   [63:0] gmem_addr_15_reg_964;
reg   [31:0] gmem_addr_read_reg_970;
reg    ap_condition_exit_pp0_iter5_stage0;
wire  signed [63:0] sext_ln122_fu_751_p1;
reg    ap_block_pp0_stage0_01001;
reg   [2:0] m_fu_122;
wire   [2:0] add_ln118_fu_761_p2;
wire    ap_loop_init;
reg   [2:0] l_fu_126;
wire   [2:0] select_ln116_2_fu_666_p3;
reg   [5:0] indvar_flatten2812_fu_130;
wire   [5:0] select_ln116_3_fu_773_p3;
reg   [4:0] k_fu_134;
wire   [4:0] select_ln114_3_fu_603_p3;
reg   [10:0] indvar_flatten2834_fu_138;
wire   [10:0] select_ln114_4_fu_330_p3;
reg   [2:0] j_fu_142;
wire   [2:0] select_ln112_7_fu_316_p3;
reg   [12:0] indvar_flatten2873_fu_146;
wire   [12:0] select_ln112_8_fu_344_p3;
reg   [2:0] i_fu_150;
wire   [2:0] select_ln110_fu_408_p3;
reg   [13:0] indvar_flatten2925_fu_154;
wire   [13:0] add_ln110_fu_256_p2;
wire   [2:0] select_ln112_fu_274_p3;
wire   [2:0] add_ln112_fu_300_p2;
wire   [10:0] add_ln114_1_fu_324_p2;
wire   [12:0] add_ln112_1_fu_338_p2;
wire   [2:0] mul_ln112_fu_379_p0;
wire   [12:0] mul_ln112_fu_379_p1;
wire   [2:0] add_ln110_1_fu_385_p2;
wire   [2:0] mul_ln112_1_fu_395_p0;
wire   [12:0] mul_ln112_1_fu_395_p1;
wire   [13:0] grp_fu_807_p3;
wire   [13:0] zext_ln116_fu_426_p1;
wire   [5:0] p_shl5_fu_439_p3;
wire   [6:0] p_shl5_cast_fu_447_p1;
wire   [6:0] zext_ln116_1_fu_435_p1;
(* use_dsp48 = "no" *) wire   [13:0] add_ln120_2_fu_430_p2;
wire   [0:0] icmp_ln118_fu_474_p2;
wire   [0:0] icmp_ln116_fu_485_p2;
wire   [13:0] grp_fu_817_p3;
wire   [13:0] select_ln112_2_fu_463_p3;
wire   [13:0] select_ln112_3_fu_468_p3;
wire   [0:0] xor_ln112_1_fu_515_p2;
wire   [0:0] and_ln112_fu_480_p2;
wire   [0:0] or_ln112_1_fu_520_p2;
wire   [0:0] and_ln112_1_fu_491_p2;
wire   [4:0] select_ln112_4_fu_496_p3;
wire   [0:0] and_ln112_4_fu_531_p2;
wire   [0:0] or_ln114_fu_543_p2;
wire   [0:0] or_ln114_1_fu_548_p2;
wire   [4:0] add_ln114_fu_537_p2;
wire   [13:0] select_ln112_5_fu_503_p3;
wire   [13:0] zext_ln116_2_fu_561_p1;
wire   [13:0] add_ln120_4_fu_565_p2;
wire   [13:0] select_ln112_6_fu_509_p3;
wire   [13:0] select_ln114_1_fu_571_p3;
wire   [6:0] sub_ln121_fu_451_p2;
wire   [0:0] and_ln112_3_fu_525_p2;
wire   [0:0] xor_ln114_fu_591_p2;
wire   [2:0] select_ln114_fu_553_p3;
wire   [0:0] and_ln114_fu_597_p2;
wire   [0:0] or_ln116_fu_617_p2;
wire   [0:0] or_ln116_1_fu_623_p2;
wire   [2:0] add_ln116_fu_611_p2;
wire   [5:0] p_shl5_mid1_fu_640_p3;
wire   [6:0] p_shl5_cast_mid1_fu_648_p1;
wire   [6:0] zext_ln116_3_fu_636_p1;
wire   [6:0] sub_ln121_1_fu_652_p2;
wire   [6:0] select_ln114_2_fu_583_p3;
wire   [2:0] select_ln116_fu_628_p3;
wire   [6:0] zext_ln121_fu_674_p1;
wire   [6:0] select_ln116_1_fu_658_p3;
wire   [6:0] add_ln121_fu_678_p2;
wire   [8:0] shl_ln_fu_684_p3;
wire   [10:0] shl_ln121_1_fu_696_p3;
wire  signed [11:0] sext_ln121_fu_692_p1;
wire  signed [11:0] sext_ln120_fu_704_p1;
wire   [11:0] add_ln120_3_fu_708_p2;
wire  signed [14:0] sext_ln120_1_fu_714_p1;
wire   [14:0] zext_ln114_fu_579_p1;
wire   [14:0] add_ln120_1_fu_718_p2;
wire   [16:0] tmp_s_fu_724_p3;
wire  signed [63:0] sext_ln120_2_fu_732_p1;
wire   [63:0] add_ln120_fu_736_p2;
wire   [61:0] trunc_ln_fu_741_p4;
wire   [5:0] add_ln116_1_fu_767_p2;
wire   [2:0] grp_fu_807_p0;
wire   [9:0] grp_fu_807_p1;
wire   [2:0] grp_fu_817_p0;
wire   [9:0] grp_fu_817_p1;
wire   [13:0] grp_fu_817_p2;
reg    grp_fu_807_ce;
reg    grp_fu_817_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [12:0] grp_fu_807_p00;
wire   [12:0] grp_fu_817_p00;
wire   [13:0] mul_ln112_1_fu_395_p00;
wire   [13:0] mul_ln112_fu_379_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_attention_mul_3ns_13ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 14 ))
mul_3ns_13ns_14_1_1_U161(
    .din0(mul_ln112_fu_379_p0),
    .din1(mul_ln112_fu_379_p1),
    .dout(mul_ln112_fu_379_p2)
);

kernel_attention_mul_3ns_13ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 14 ))
mul_3ns_13ns_14_1_1_U162(
    .din0(mul_ln112_1_fu_395_p0),
    .din1(mul_ln112_1_fu_395_p1),
    .dout(mul_ln112_1_fu_395_p2)
);

kernel_attention_mac_muladd_3ns_10ns_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_3ns_10ns_14ns_14_4_1_U163(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_807_p0),
    .din1(grp_fu_807_p1),
    .din2(mul_ln112_fu_379_p2),
    .ce(grp_fu_807_ce),
    .dout(grp_fu_807_p3)
);

kernel_attention_mac_muladd_3ns_10ns_14ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mac_muladd_3ns_10ns_14ns_14_4_1_U164(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_817_p0),
    .din1(grp_fu_817_p1),
    .din2(grp_fu_817_p2),
    .ce(grp_fu_817_ce),
    .dout(grp_fu_817_p3)
);

kernel_attention_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter5_stage0)) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_fu_150 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln110_reg_905_pp0_iter2_reg == 1'd0))) begin
            i_fu_150 <= select_ln110_fu_408_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            indvar_flatten2812_fu_130 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln110_reg_905_pp0_iter3_reg == 1'd0))) begin
            indvar_flatten2812_fu_130 <= select_ln116_3_fu_773_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten2834_fu_138 <= 11'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln110_fu_250_p2 == 1'd0))) begin
            indvar_flatten2834_fu_138 <= select_ln114_4_fu_330_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten2873_fu_146 <= 13'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln110_fu_250_p2 == 1'd0))) begin
            indvar_flatten2873_fu_146 <= select_ln112_8_fu_344_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten2925_fu_154 <= 14'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln110_fu_250_p2 == 1'd0))) begin
            indvar_flatten2925_fu_154 <= add_ln110_fu_256_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_142 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln110_fu_250_p2 == 1'd0))) begin
            j_fu_142 <= select_ln112_7_fu_316_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            k_fu_134 <= 5'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln110_reg_905_pp0_iter3_reg == 1'd0))) begin
            k_fu_134 <= select_ln114_3_fu_603_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            l_fu_126 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln110_reg_905_pp0_iter3_reg == 1'd0))) begin
            l_fu_126 <= select_ln116_2_fu_666_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            m_fu_122 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln110_reg_905_pp0_iter3_reg == 1'd0))) begin
            m_fu_122 <= add_ln118_fu_761_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln110_fu_250_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln112_2_reg_930 <= and_ln112_2_fu_294_p2;
        icmp_ln112_reg_909 <= icmp_ln112_fu_268_p2;
        icmp_ln114_reg_925 <= icmp_ln114_fu_288_p2;
        or_ln112_reg_937 <= or_ln112_fu_306_p2;
        xor_ln112_reg_919 <= xor_ln112_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln112_2_reg_930_pp0_iter2_reg <= and_ln112_2_reg_930;
        and_ln112_2_reg_930_pp0_iter3_reg <= and_ln112_2_reg_930_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln110_reg_905_pp0_iter2_reg <= icmp_ln110_reg_905;
        icmp_ln110_reg_905_pp0_iter3_reg <= icmp_ln110_reg_905_pp0_iter2_reg;
        icmp_ln110_reg_905_pp0_iter4_reg <= icmp_ln110_reg_905_pp0_iter3_reg;
        icmp_ln112_reg_909_pp0_iter2_reg <= icmp_ln112_reg_909;
        icmp_ln112_reg_909_pp0_iter3_reg <= icmp_ln112_reg_909_pp0_iter2_reg;
        icmp_ln114_reg_925_pp0_iter2_reg <= icmp_ln114_reg_925;
        icmp_ln114_reg_925_pp0_iter3_reg <= icmp_ln114_reg_925_pp0_iter2_reg;
        or_ln112_reg_937_pp0_iter2_reg <= or_ln112_reg_937;
        or_ln112_reg_937_pp0_iter3_reg <= or_ln112_reg_937_pp0_iter2_reg;
        xor_ln112_reg_919_pp0_iter2_reg <= xor_ln112_reg_919;
        xor_ln112_reg_919_pp0_iter3_reg <= xor_ln112_reg_919_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln110_reg_905 <= icmp_ln110_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_reg_905_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_15_reg_964 <= sext_ln122_fu_751_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln110_reg_905_pp0_iter4_reg == 1'd0))) begin
        gmem_addr_read_reg_970 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_reg_905_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln112_1_reg_953 <= mul_ln112_1_fu_395_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln110_fu_250_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln110_reg_905_pp0_iter4_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln110_reg_905_pp0_iter4_reg == 1'd0))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln110_reg_905_pp0_iter4_reg == 1'd0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_807_ce = 1'b1;
    end else begin
        grp_fu_807_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_817_ce = 1'b1;
    end else begin
        grp_fu_817_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln110_reg_905_pp0_iter4_reg == 1'd0))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln110_reg_905_pp0_iter4_reg == 1'd0))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln110_1_fu_385_p2 = (i_fu_150 + 3'd1);

assign add_ln110_fu_256_p2 = (indvar_flatten2925_fu_154 + 14'd1);

assign add_ln112_1_fu_338_p2 = (indvar_flatten2873_fu_146 + 13'd1);

assign add_ln112_fu_300_p2 = (select_ln112_fu_274_p3 + 3'd1);

assign add_ln114_1_fu_324_p2 = (indvar_flatten2834_fu_138 + 11'd1);

assign add_ln114_fu_537_p2 = (select_ln112_4_fu_496_p3 + 5'd1);

assign add_ln116_1_fu_767_p2 = (indvar_flatten2812_fu_130 + 6'd1);

assign add_ln116_fu_611_p2 = (select_ln114_fu_553_p3 + 3'd1);

assign add_ln118_fu_761_p2 = (select_ln116_fu_628_p3 + 3'd1);

assign add_ln120_1_fu_718_p2 = ($signed(sext_ln120_1_fu_714_p1) + $signed(zext_ln114_fu_579_p1));

assign add_ln120_2_fu_430_p2 = (grp_fu_807_p3 + zext_ln116_fu_426_p1);

assign add_ln120_3_fu_708_p2 = ($signed(sext_ln121_fu_692_p1) + $signed(sext_ln120_fu_704_p1));

assign add_ln120_4_fu_565_p2 = (select_ln112_5_fu_503_p3 + zext_ln116_2_fu_561_p1);

assign add_ln120_fu_736_p2 = ($signed(sext_ln120_2_fu_732_p1) + $signed(afterRearrangeX2));

assign add_ln121_fu_678_p2 = (zext_ln121_fu_674_p1 + select_ln116_1_fu_658_p3);

assign and_ln112_1_fu_491_p2 = (xor_ln112_reg_919_pp0_iter3_reg & icmp_ln116_fu_485_p2);

assign and_ln112_2_fu_294_p2 = (xor_ln112_fu_282_p2 & icmp_ln114_fu_288_p2);

assign and_ln112_3_fu_525_p2 = (or_ln112_1_fu_520_p2 & and_ln112_fu_480_p2);

assign and_ln112_4_fu_531_p2 = (or_ln112_1_fu_520_p2 & and_ln112_1_fu_491_p2);

assign and_ln112_fu_480_p2 = (xor_ln112_reg_919_pp0_iter3_reg & icmp_ln118_fu_474_p2);

assign and_ln114_fu_597_p2 = (xor_ln114_fu_591_p2 & and_ln112_3_fu_525_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln110_reg_905_pp0_iter4_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((icmp_ln110_reg_905_pp0_iter4_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((icmp_ln110_reg_905_pp0_iter4_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0)))));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter11 = (m_axi_gmem_BVALID == 1'b0);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((m_axi_gmem_AWREADY == 1'b0) & (icmp_ln110_reg_905_pp0_iter4_reg == 1'd0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((icmp_ln110_reg_905_pp0_iter4_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign grp_fu_807_p0 = grp_fu_807_p00;

assign grp_fu_807_p00 = j_fu_142;

assign grp_fu_807_p1 = 13'd980;

assign grp_fu_817_p0 = grp_fu_817_p00;

assign grp_fu_817_p00 = add_ln112_fu_300_p2;

assign grp_fu_817_p1 = 13'd980;

assign grp_fu_817_p2 = ((icmp_ln112_reg_909_pp0_iter2_reg[0:0] == 1'b1) ? mul_ln112_1_fu_395_p2 : mul_ln112_fu_379_p2);

assign icmp_ln110_fu_250_p2 = ((indvar_flatten2925_fu_154 == 14'd15680) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_268_p2 = ((indvar_flatten2873_fu_146 == 13'd3920) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_288_p2 = ((indvar_flatten2834_fu_138 == 11'd980) ? 1'b1 : 1'b0);

assign icmp_ln116_fu_485_p2 = ((indvar_flatten2812_fu_130 == 6'd49) ? 1'b1 : 1'b0);

assign icmp_ln118_fu_474_p2 = ((m_fu_122 == 3'd7) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = gmem_addr_15_reg_964;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = gmem_addr_read_reg_970;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign mul_ln112_1_fu_395_p0 = mul_ln112_1_fu_395_p00;

assign mul_ln112_1_fu_395_p00 = add_ln110_1_fu_385_p2;

assign mul_ln112_1_fu_395_p1 = 14'd3920;

assign mul_ln112_fu_379_p0 = mul_ln112_fu_379_p00;

assign mul_ln112_fu_379_p00 = i_fu_150;

assign mul_ln112_fu_379_p1 = 14'd3920;

assign or_ln112_1_fu_520_p2 = (xor_ln112_1_fu_515_p2 | icmp_ln112_reg_909_pp0_iter3_reg);

assign or_ln112_fu_306_p2 = (icmp_ln112_fu_268_p2 | and_ln112_2_fu_294_p2);

assign or_ln114_1_fu_548_p2 = (or_ln114_fu_543_p2 | icmp_ln112_reg_909_pp0_iter3_reg);

assign or_ln114_fu_543_p2 = (and_ln112_4_fu_531_p2 | and_ln112_2_reg_930_pp0_iter3_reg);

assign or_ln116_1_fu_623_p2 = (or_ln116_fu_617_p2 | or_ln112_reg_937_pp0_iter3_reg);

assign or_ln116_fu_617_p2 = (and_ln114_fu_597_p2 | and_ln112_4_fu_531_p2);

assign p_shl5_cast_fu_447_p1 = p_shl5_fu_439_p3;

assign p_shl5_cast_mid1_fu_648_p1 = p_shl5_mid1_fu_640_p3;

assign p_shl5_fu_439_p3 = {{l_fu_126}, {3'd0}};

assign p_shl5_mid1_fu_640_p3 = {{add_ln116_fu_611_p2}, {3'd0}};

assign select_ln110_fu_408_p3 = ((icmp_ln112_reg_909_pp0_iter2_reg[0:0] == 1'b1) ? add_ln110_1_fu_385_p2 : i_fu_150);

assign select_ln112_2_fu_463_p3 = ((icmp_ln112_reg_909_pp0_iter3_reg[0:0] == 1'b1) ? mul_ln112_1_reg_953 : grp_fu_807_p3);

assign select_ln112_3_fu_468_p3 = ((icmp_ln112_reg_909_pp0_iter3_reg[0:0] == 1'b1) ? mul_ln112_1_reg_953 : add_ln120_2_fu_430_p2);

assign select_ln112_4_fu_496_p3 = ((or_ln112_reg_937_pp0_iter3_reg[0:0] == 1'b1) ? 5'd0 : k_fu_134);

assign select_ln112_5_fu_503_p3 = ((and_ln112_2_reg_930_pp0_iter3_reg[0:0] == 1'b1) ? grp_fu_817_p3 : select_ln112_2_fu_463_p3);

assign select_ln112_6_fu_509_p3 = ((and_ln112_2_reg_930_pp0_iter3_reg[0:0] == 1'b1) ? grp_fu_817_p3 : select_ln112_3_fu_468_p3);

assign select_ln112_7_fu_316_p3 = ((and_ln112_2_fu_294_p2[0:0] == 1'b1) ? add_ln112_fu_300_p2 : select_ln112_fu_274_p3);

assign select_ln112_8_fu_344_p3 = ((icmp_ln112_fu_268_p2[0:0] == 1'b1) ? 13'd1 : add_ln112_1_fu_338_p2);

assign select_ln112_fu_274_p3 = ((icmp_ln112_fu_268_p2[0:0] == 1'b1) ? 3'd0 : j_fu_142);

assign select_ln114_1_fu_571_p3 = ((and_ln112_4_fu_531_p2[0:0] == 1'b1) ? add_ln120_4_fu_565_p2 : select_ln112_6_fu_509_p3);

assign select_ln114_2_fu_583_p3 = ((or_ln114_1_fu_548_p2[0:0] == 1'b1) ? 7'd0 : sub_ln121_fu_451_p2);

assign select_ln114_3_fu_603_p3 = ((and_ln112_4_fu_531_p2[0:0] == 1'b1) ? add_ln114_fu_537_p2 : select_ln112_4_fu_496_p3);

assign select_ln114_4_fu_330_p3 = ((or_ln112_fu_306_p2[0:0] == 1'b1) ? 11'd1 : add_ln114_1_fu_324_p2);

assign select_ln114_fu_553_p3 = ((or_ln114_1_fu_548_p2[0:0] == 1'b1) ? 3'd0 : l_fu_126);

assign select_ln116_1_fu_658_p3 = ((and_ln114_fu_597_p2[0:0] == 1'b1) ? sub_ln121_1_fu_652_p2 : select_ln114_2_fu_583_p3);

assign select_ln116_2_fu_666_p3 = ((and_ln114_fu_597_p2[0:0] == 1'b1) ? add_ln116_fu_611_p2 : select_ln114_fu_553_p3);

assign select_ln116_3_fu_773_p3 = ((or_ln114_1_fu_548_p2[0:0] == 1'b1) ? 6'd1 : add_ln116_1_fu_767_p2);

assign select_ln116_fu_628_p3 = ((or_ln116_1_fu_623_p2[0:0] == 1'b1) ? 3'd0 : m_fu_122);

assign sext_ln120_1_fu_714_p1 = $signed(add_ln120_3_fu_708_p2);

assign sext_ln120_2_fu_732_p1 = $signed(tmp_s_fu_724_p3);

assign sext_ln120_fu_704_p1 = $signed(shl_ln121_1_fu_696_p3);

assign sext_ln121_fu_692_p1 = $signed(shl_ln_fu_684_p3);

assign sext_ln122_fu_751_p1 = $signed(trunc_ln_fu_741_p4);

assign shl_ln121_1_fu_696_p3 = {{add_ln121_fu_678_p2}, {4'd0}};

assign shl_ln_fu_684_p3 = {{add_ln121_fu_678_p2}, {2'd0}};

assign sub_ln121_1_fu_652_p2 = (p_shl5_cast_mid1_fu_648_p1 - zext_ln116_3_fu_636_p1);

assign sub_ln121_fu_451_p2 = (p_shl5_cast_fu_447_p1 - zext_ln116_1_fu_435_p1);

assign tmp_s_fu_724_p3 = {{add_ln120_1_fu_718_p2}, {2'd0}};

assign trunc_ln_fu_741_p4 = {{add_ln120_fu_736_p2[63:2]}};

assign xor_ln112_1_fu_515_p2 = (icmp_ln114_reg_925_pp0_iter3_reg ^ 1'd1);

assign xor_ln112_fu_282_p2 = (icmp_ln112_fu_268_p2 ^ 1'd1);

assign xor_ln114_fu_591_p2 = (1'd1 ^ and_ln112_4_fu_531_p2);

assign zext_ln114_fu_579_p1 = select_ln114_1_fu_571_p3;

assign zext_ln116_1_fu_435_p1 = l_fu_126;

assign zext_ln116_2_fu_561_p1 = add_ln114_fu_537_p2;

assign zext_ln116_3_fu_636_p1 = add_ln116_fu_611_p2;

assign zext_ln116_fu_426_p1 = k_fu_134;

assign zext_ln121_fu_674_p1 = select_ln116_fu_628_p3;

endmodule //kernel_attention_kernel_attention_Pipeline_VITIS_LOOP_110_1_VITIS_LOOP_114_3_VITIS_LOOP_116_4_VIT
