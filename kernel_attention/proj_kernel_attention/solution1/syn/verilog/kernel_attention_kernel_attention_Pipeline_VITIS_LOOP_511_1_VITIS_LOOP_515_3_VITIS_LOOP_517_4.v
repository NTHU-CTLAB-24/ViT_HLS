// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_attention_kernel_attention_Pipeline_VITIS_LOOP_511_1_VITIS_LOOP_515_3_VITIS_LOOP_517_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        sext_ln511,
        afterAct2
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [61:0] sext_ln511;
input  [63:0] afterAct2;

reg ap_idle;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg   [0:0] icmp_ln511_reg_759;
reg   [0:0] icmp_ln511_reg_759_pp0_iter3_reg;
reg    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
reg    ap_block_state12_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln511_fu_235_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_AW;
reg    gmem_blk_n_W;
reg    gmem_blk_n_B;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln511_reg_759_pp0_iter2_reg;
wire   [0:0] icmp_ln513_fu_253_p2;
reg   [0:0] icmp_ln513_reg_763;
reg   [0:0] icmp_ln513_reg_763_pp0_iter2_reg;
reg   [0:0] icmp_ln513_reg_763_pp0_iter3_reg;
wire   [0:0] xor_ln513_fu_267_p2;
reg   [0:0] xor_ln513_reg_772;
reg   [0:0] xor_ln513_reg_772_pp0_iter2_reg;
reg   [0:0] xor_ln513_reg_772_pp0_iter3_reg;
wire   [0:0] icmp_ln515_fu_273_p2;
reg   [0:0] icmp_ln515_reg_777;
reg   [0:0] icmp_ln515_reg_777_pp0_iter2_reg;
reg   [0:0] icmp_ln515_reg_777_pp0_iter3_reg;
wire   [0:0] and_ln513_1_fu_279_p2;
reg   [0:0] and_ln513_1_reg_782;
reg   [0:0] and_ln513_1_reg_782_pp0_iter2_reg;
reg   [0:0] and_ln513_1_reg_782_pp0_iter3_reg;
wire   [0:0] or_ln513_fu_291_p2;
reg   [0:0] or_ln513_reg_788;
reg   [0:0] or_ln513_reg_788_pp0_iter2_reg;
reg   [0:0] or_ln513_reg_788_pp0_iter3_reg;
wire   [15:0] mul_ln513_fu_364_p2;
wire   [15:0] mul_ln513_1_fu_380_p2;
reg   [15:0] mul_ln513_1_reg_804;
reg   [31:0] gmem_addr_read_reg_814;
reg   [7:0] tmp_5_reg_820;
wire   [22:0] trunc_ln519_fu_571_p1;
reg   [22:0] trunc_ln519_reg_825;
reg   [63:0] gmem_addr_16_reg_830;
wire   [31:0] select_ln519_fu_670_p3;
reg   [31:0] select_ln519_reg_836;
reg    ap_condition_exit_pp0_iter4_stage0;
wire  signed [63:0] sext_ln522_fu_618_p1;
reg    ap_block_pp0_stage0_01001;
reg   [2:0] w_fu_120;
wire   [2:0] add_ln517_fu_628_p2;
wire    ap_loop_init;
reg   [2:0] h_fu_124;
wire   [2:0] select_ln515_2_fu_549_p3;
reg   [5:0] indvar_flatten3054_fu_128;
wire   [5:0] select_ln515_3_fu_315_p3;
reg   [7:0] c_fu_132;
wire   [7:0] select_ln513_6_fu_301_p3;
reg   [13:0] indvar_flatten3082_fu_136;
wire   [13:0] select_ln513_7_fu_329_p3;
reg   [2:0] n_fu_140;
wire   [2:0] select_ln511_fu_393_p3;
reg   [15:0] indvar_flatten3122_fu_144;
wire   [15:0] add_ln511_fu_241_p2;
wire   [31:0] tmp_6_fu_181_p0;
wire   [7:0] select_ln513_fu_259_p3;
wire   [7:0] add_ln513_fu_285_p2;
wire   [5:0] add_ln515_1_fu_309_p2;
wire   [13:0] add_ln513_1_fu_323_p2;
wire   [2:0] mul_ln513_fu_364_p0;
wire   [14:0] mul_ln513_fu_364_p1;
wire   [2:0] add_ln511_1_fu_370_p2;
wire   [2:0] mul_ln513_1_fu_380_p0;
wire   [14:0] mul_ln513_1_fu_380_p1;
wire   [5:0] p_shl7_fu_418_p3;
wire   [6:0] p_shl15_cast_fu_426_p1;
wire   [6:0] zext_ln515_fu_414_p1;
wire   [15:0] grp_fu_677_p3;
wire   [0:0] icmp_ln517_fu_444_p2;
wire   [15:0] grp_fu_686_p3;
wire   [15:0] select_ln513_2_fu_439_p3;
wire   [15:0] select_ln513_4_fu_462_p3;
wire   [6:0] empty_96_fu_430_p2;
wire   [0:0] xor_ln513_1_fu_479_p2;
wire   [0:0] and_ln513_fu_450_p2;
wire   [0:0] or_ln513_1_fu_484_p2;
wire   [2:0] select_ln513_3_fu_455_p3;
wire   [0:0] and_ln513_2_fu_489_p2;
wire   [0:0] or_ln515_fu_501_p2;
wire   [0:0] or_ln515_1_fu_506_p2;
wire   [2:0] add_ln515_fu_495_p2;
wire   [5:0] p_shl15_mid1_fu_523_p3;
wire   [6:0] p_shl15_cast_mid1_fu_531_p1;
wire   [6:0] zext_ln515_1_fu_519_p1;
wire   [6:0] p_mid13052_fu_535_p2;
wire   [6:0] select_ln513_5_fu_472_p3;
wire   [2:0] select_ln515_fu_511_p3;
wire   [6:0] select_ln515_1_fu_541_p3;
wire   [6:0] zext_ln519_fu_557_p1;
wire   [6:0] add_ln520_2_fu_575_p2;
wire  signed [16:0] sext_ln520_fu_581_p1;
wire   [16:0] zext_ln513_4_fu_468_p1;
wire   [16:0] add_ln520_1_fu_585_p2;
wire   [18:0] tmp_s_fu_591_p3;
wire  signed [63:0] sext_ln520_1_fu_599_p1;
wire   [63:0] add_ln520_fu_603_p2;
wire   [61:0] trunc_ln_fu_608_p4;
wire   [0:0] icmp_ln519_1_fu_653_p2;
wire   [0:0] icmp_ln519_fu_648_p2;
wire   [0:0] or_ln519_fu_658_p2;
wire   [0:0] tmp_6_fu_181_p2;
wire   [0:0] and_ln519_fu_664_p2;
wire   [7:0] grp_fu_677_p0;
wire   [5:0] grp_fu_677_p1;
wire   [7:0] grp_fu_686_p0;
wire   [5:0] grp_fu_686_p1;
wire   [15:0] grp_fu_686_p2;
reg    ap_block_pp0_stage0_00001;
reg    grp_fu_677_ce;
reg    grp_fu_686_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [13:0] grp_fu_677_p00;
wire   [13:0] grp_fu_686_p00;
wire   [15:0] mul_ln513_1_fu_380_p00;
wire   [15:0] mul_ln513_fu_364_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_attention_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U175(
    .din0(tmp_6_fu_181_p0),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(tmp_6_fu_181_p2)
);

kernel_attention_mul_3ns_15ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 16 ))
mul_3ns_15ns_16_1_1_U176(
    .din0(mul_ln513_fu_364_p0),
    .din1(mul_ln513_fu_364_p1),
    .dout(mul_ln513_fu_364_p2)
);

kernel_attention_mul_3ns_15ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 16 ))
mul_3ns_15ns_16_1_1_U177(
    .din0(mul_ln513_1_fu_380_p0),
    .din1(mul_ln513_1_fu_380_p1),
    .dout(mul_ln513_1_fu_380_p2)
);

kernel_attention_mac_muladd_8ns_6ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_6ns_16ns_16_4_1_U178(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_677_p0),
    .din1(grp_fu_677_p1),
    .din2(mul_ln513_fu_364_p2),
    .ce(grp_fu_677_ce),
    .dout(grp_fu_677_p3)
);

kernel_attention_mac_muladd_8ns_6ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_6ns_16ns_16_4_1_U179(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_686_p0),
    .din1(grp_fu_686_p1),
    .din2(grp_fu_686_p2),
    .ce(grp_fu_686_ce),
    .dout(grp_fu_686_p3)
);

kernel_attention_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter4_stage0)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            c_fu_132 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln511_fu_235_p2 == 1'd0))) begin
            c_fu_132 <= select_ln513_6_fu_301_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            h_fu_124 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln511_reg_759_pp0_iter3_reg == 1'd0))) begin
            h_fu_124 <= select_ln515_2_fu_549_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten3054_fu_128 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln511_fu_235_p2 == 1'd0))) begin
            indvar_flatten3054_fu_128 <= select_ln515_3_fu_315_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten3082_fu_136 <= 14'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln511_fu_235_p2 == 1'd0))) begin
            indvar_flatten3082_fu_136 <= select_ln513_7_fu_329_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten3122_fu_144 <= 16'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln511_fu_235_p2 == 1'd0))) begin
            indvar_flatten3122_fu_144 <= add_ln511_fu_241_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            n_fu_140 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln511_reg_759_pp0_iter2_reg == 1'd0))) begin
            n_fu_140 <= select_ln511_fu_393_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            w_fu_120 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln511_reg_759_pp0_iter3_reg == 1'd0))) begin
            w_fu_120 <= add_ln517_fu_628_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln511_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln513_1_reg_782 <= and_ln513_1_fu_279_p2;
        icmp_ln513_reg_763 <= icmp_ln513_fu_253_p2;
        icmp_ln515_reg_777 <= icmp_ln515_fu_273_p2;
        or_ln513_reg_788 <= or_ln513_fu_291_p2;
        xor_ln513_reg_772 <= xor_ln513_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln513_1_reg_782_pp0_iter2_reg <= and_ln513_1_reg_782;
        and_ln513_1_reg_782_pp0_iter3_reg <= and_ln513_1_reg_782_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln511_reg_759_pp0_iter2_reg <= icmp_ln511_reg_759;
        icmp_ln511_reg_759_pp0_iter3_reg <= icmp_ln511_reg_759_pp0_iter2_reg;
        icmp_ln513_reg_763_pp0_iter2_reg <= icmp_ln513_reg_763;
        icmp_ln513_reg_763_pp0_iter3_reg <= icmp_ln513_reg_763_pp0_iter2_reg;
        icmp_ln515_reg_777_pp0_iter2_reg <= icmp_ln515_reg_777;
        icmp_ln515_reg_777_pp0_iter3_reg <= icmp_ln515_reg_777_pp0_iter2_reg;
        or_ln513_reg_788_pp0_iter2_reg <= or_ln513_reg_788;
        or_ln513_reg_788_pp0_iter3_reg <= or_ln513_reg_788_pp0_iter2_reg;
        select_ln519_reg_836 <= select_ln519_fu_670_p3;
        xor_ln513_reg_772_pp0_iter2_reg <= xor_ln513_reg_772;
        xor_ln513_reg_772_pp0_iter3_reg <= xor_ln513_reg_772_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln511_reg_759 <= icmp_ln511_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln511_reg_759_pp0_iter3_reg == 1'd0))) begin
        gmem_addr_16_reg_830 <= sext_ln522_fu_618_p1;
        gmem_addr_read_reg_814 <= m_axi_gmem_RDATA;
        tmp_5_reg_820 <= {{m_axi_gmem_RDATA[30:23]}};
        trunc_ln519_reg_825 <= trunc_ln519_fu_571_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln511_reg_759_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln513_1_reg_804 <= mul_ln513_1_fu_380_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln511_fu_235_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln511_reg_759_pp0_iter3_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln511_reg_759_pp0_iter3_reg == 1'd0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_677_ce = 1'b1;
    end else begin
        grp_fu_677_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_686_ce = 1'b1;
    end else begin
        grp_fu_686_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln511_reg_759_pp0_iter3_reg == 1'd0))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln511_1_fu_370_p2 = (n_fu_140 + 3'd1);

assign add_ln511_fu_241_p2 = (indvar_flatten3122_fu_144 + 16'd1);

assign add_ln513_1_fu_323_p2 = (indvar_flatten3082_fu_136 + 14'd1);

assign add_ln513_fu_285_p2 = (select_ln513_fu_259_p3 + 8'd1);

assign add_ln515_1_fu_309_p2 = (indvar_flatten3054_fu_128 + 6'd1);

assign add_ln515_fu_495_p2 = (select_ln513_3_fu_455_p3 + 3'd1);

assign add_ln517_fu_628_p2 = (select_ln515_fu_511_p3 + 3'd1);

assign add_ln520_1_fu_585_p2 = ($signed(sext_ln520_fu_581_p1) + $signed(zext_ln513_4_fu_468_p1));

assign add_ln520_2_fu_575_p2 = (select_ln515_1_fu_541_p3 + zext_ln519_fu_557_p1);

assign add_ln520_fu_603_p2 = ($signed(sext_ln520_1_fu_599_p1) + $signed(afterAct2));

assign and_ln513_1_fu_279_p2 = (xor_ln513_fu_267_p2 & icmp_ln515_fu_273_p2);

assign and_ln513_2_fu_489_p2 = (or_ln513_1_fu_484_p2 & and_ln513_fu_450_p2);

assign and_ln513_fu_450_p2 = (xor_ln513_reg_772_pp0_iter3_reg & icmp_ln517_fu_444_p2);

assign and_ln519_fu_664_p2 = (tmp_6_fu_181_p2 & or_ln519_fu_658_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln511_reg_759_pp0_iter3_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln511_reg_759_pp0_iter3_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((m_axi_gmem_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln511_reg_759_pp0_iter3_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((m_axi_gmem_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln511_reg_759_pp0_iter3_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter11 = (m_axi_gmem_BVALID == 1'b0);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((icmp_ln511_reg_759_pp0_iter3_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_96_fu_430_p2 = (p_shl15_cast_fu_426_p1 - zext_ln515_fu_414_p1);

assign grp_fu_677_p0 = grp_fu_677_p00;

assign grp_fu_677_p00 = c_fu_132;

assign grp_fu_677_p1 = 14'd49;

assign grp_fu_686_p0 = grp_fu_686_p00;

assign grp_fu_686_p00 = add_ln513_fu_285_p2;

assign grp_fu_686_p1 = 14'd49;

assign grp_fu_686_p2 = ((icmp_ln513_reg_763_pp0_iter2_reg[0:0] == 1'b1) ? mul_ln513_1_fu_380_p2 : mul_ln513_fu_364_p2);

assign icmp_ln511_fu_235_p2 = ((indvar_flatten3122_fu_144 == 16'd47040) ? 1'b1 : 1'b0);

assign icmp_ln513_fu_253_p2 = ((indvar_flatten3082_fu_136 == 14'd11760) ? 1'b1 : 1'b0);

assign icmp_ln515_fu_273_p2 = ((indvar_flatten3054_fu_128 == 6'd49) ? 1'b1 : 1'b0);

assign icmp_ln517_fu_444_p2 = ((w_fu_120 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln519_1_fu_653_p2 = ((trunc_ln519_reg_825 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln519_fu_648_p2 = ((tmp_5_reg_820 != 8'd255) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = gmem_addr_16_reg_830;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = select_ln519_reg_836;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign mul_ln513_1_fu_380_p0 = mul_ln513_1_fu_380_p00;

assign mul_ln513_1_fu_380_p00 = add_ln511_1_fu_370_p2;

assign mul_ln513_1_fu_380_p1 = 16'd11760;

assign mul_ln513_fu_364_p0 = mul_ln513_fu_364_p00;

assign mul_ln513_fu_364_p00 = n_fu_140;

assign mul_ln513_fu_364_p1 = 16'd11760;

assign or_ln513_1_fu_484_p2 = (xor_ln513_1_fu_479_p2 | icmp_ln513_reg_763_pp0_iter3_reg);

assign or_ln513_fu_291_p2 = (icmp_ln513_fu_253_p2 | and_ln513_1_fu_279_p2);

assign or_ln515_1_fu_506_p2 = (or_ln515_fu_501_p2 | icmp_ln513_reg_763_pp0_iter3_reg);

assign or_ln515_fu_501_p2 = (and_ln513_2_fu_489_p2 | and_ln513_1_reg_782_pp0_iter3_reg);

assign or_ln519_fu_658_p2 = (icmp_ln519_fu_648_p2 | icmp_ln519_1_fu_653_p2);

assign p_mid13052_fu_535_p2 = (p_shl15_cast_mid1_fu_531_p1 - zext_ln515_1_fu_519_p1);

assign p_shl15_cast_fu_426_p1 = p_shl7_fu_418_p3;

assign p_shl15_cast_mid1_fu_531_p1 = p_shl15_mid1_fu_523_p3;

assign p_shl15_mid1_fu_523_p3 = {{add_ln515_fu_495_p2}, {3'd0}};

assign p_shl7_fu_418_p3 = {{h_fu_124}, {3'd0}};

assign select_ln511_fu_393_p3 = ((icmp_ln513_reg_763_pp0_iter2_reg[0:0] == 1'b1) ? add_ln511_1_fu_370_p2 : n_fu_140);

assign select_ln513_2_fu_439_p3 = ((icmp_ln513_reg_763_pp0_iter3_reg[0:0] == 1'b1) ? mul_ln513_1_reg_804 : grp_fu_677_p3);

assign select_ln513_3_fu_455_p3 = ((or_ln513_reg_788_pp0_iter3_reg[0:0] == 1'b1) ? 3'd0 : h_fu_124);

assign select_ln513_4_fu_462_p3 = ((and_ln513_1_reg_782_pp0_iter3_reg[0:0] == 1'b1) ? grp_fu_686_p3 : select_ln513_2_fu_439_p3);

assign select_ln513_5_fu_472_p3 = ((or_ln513_reg_788_pp0_iter3_reg[0:0] == 1'b1) ? 7'd0 : empty_96_fu_430_p2);

assign select_ln513_6_fu_301_p3 = ((and_ln513_1_fu_279_p2[0:0] == 1'b1) ? add_ln513_fu_285_p2 : select_ln513_fu_259_p3);

assign select_ln513_7_fu_329_p3 = ((icmp_ln513_fu_253_p2[0:0] == 1'b1) ? 14'd1 : add_ln513_1_fu_323_p2);

assign select_ln513_fu_259_p3 = ((icmp_ln513_fu_253_p2[0:0] == 1'b1) ? 8'd0 : c_fu_132);

assign select_ln515_1_fu_541_p3 = ((and_ln513_2_fu_489_p2[0:0] == 1'b1) ? p_mid13052_fu_535_p2 : select_ln513_5_fu_472_p3);

assign select_ln515_2_fu_549_p3 = ((and_ln513_2_fu_489_p2[0:0] == 1'b1) ? add_ln515_fu_495_p2 : select_ln513_3_fu_455_p3);

assign select_ln515_3_fu_315_p3 = ((or_ln513_fu_291_p2[0:0] == 1'b1) ? 6'd1 : add_ln515_1_fu_309_p2);

assign select_ln515_fu_511_p3 = ((or_ln515_1_fu_506_p2[0:0] == 1'b1) ? 3'd0 : w_fu_120);

assign select_ln519_fu_670_p3 = ((and_ln519_fu_664_p2[0:0] == 1'b1) ? 32'd0 : gmem_addr_read_reg_814);

assign sext_ln520_1_fu_599_p1 = $signed(tmp_s_fu_591_p3);

assign sext_ln520_fu_581_p1 = $signed(add_ln520_2_fu_575_p2);

assign sext_ln522_fu_618_p1 = $signed(trunc_ln_fu_608_p4);

assign tmp_6_fu_181_p0 = gmem_addr_read_reg_814;

assign tmp_s_fu_591_p3 = {{add_ln520_1_fu_585_p2}, {2'd0}};

assign trunc_ln519_fu_571_p1 = m_axi_gmem_RDATA[22:0];

assign trunc_ln_fu_608_p4 = {{add_ln520_fu_603_p2[63:2]}};

assign xor_ln513_1_fu_479_p2 = (icmp_ln515_reg_777_pp0_iter3_reg ^ 1'd1);

assign xor_ln513_fu_267_p2 = (icmp_ln513_fu_253_p2 ^ 1'd1);

assign zext_ln513_4_fu_468_p1 = select_ln513_4_fu_462_p3;

assign zext_ln515_1_fu_519_p1 = add_ln515_fu_495_p2;

assign zext_ln515_fu_414_p1 = h_fu_124;

assign zext_ln519_fu_557_p1 = select_ln515_fu_511_p3;

endmodule //kernel_attention_kernel_attention_Pipeline_VITIS_LOOP_511_1_VITIS_LOOP_515_3_VITIS_LOOP_517_4
