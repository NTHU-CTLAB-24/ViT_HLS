-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_attention_kernel_attention_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_VITIS_LOOP_183_4_VIT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln177 : IN STD_LOGIC_VECTOR (61 downto 0);
    afterRearrangeQKX : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel_attention_kernel_attention_Pipeline_VITIS_LOOP_177_1_VITIS_LOOP_181_3_VITIS_LOOP_183_4_VIT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_3D40 : STD_LOGIC_VECTOR (13 downto 0) := "11110101000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv13_F50 : STD_LOGIC_VECTOR (12 downto 0) := "0111101010000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv8_8C : STD_LOGIC_VECTOR (7 downto 0) := "10001100";
    constant ap_const_lv11_3D4 : STD_LOGIC_VECTOR (10 downto 0) := "01111010100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv15_F50 : STD_LOGIC_VECTOR (14 downto 0) := "000111101010000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_31 : STD_LOGIC_VECTOR (11 downto 0) := "000000110001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal icmp_ln177_reg_911 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln177_reg_911_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln177_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln177_reg_911_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln177_reg_911_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_reg_915 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_reg_915_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_reg_915_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln177_2_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln177_2_reg_922 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln177_2_reg_922_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln177_2_reg_922_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln179_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln179_reg_927 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln179_reg_927_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln179_reg_927_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_1_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_1_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_1_reg_932_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_1_reg_932_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln181_1_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln181_1_reg_938 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln181_1_reg_938_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln181_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln181_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln181_reg_943_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_17_reg_953 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_read_reg_959 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter5_stage0 : STD_LOGIC;
    signal sext_ln185_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal x_fu_122 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln184_fu_504_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal w_fu_126 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln183_1_fu_598_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten2932_fu_130 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln183_2_fu_516_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_1_fu_134 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln181_2_fu_758_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten2949_fu_138 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln181_3_fu_530_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_1_fu_142 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln179_4_fu_442_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten2985_fu_146 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln179_5_fu_544_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal b_1_fu_150 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln177_5_fu_692_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten3044_fu_154 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln177_fu_272_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_106_fu_246_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl3_fu_250_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_fu_258_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln184_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln177_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln183_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln181_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln177_fu_296_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln179_fu_362_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_109_fu_374_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl10_mid1_fu_378_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln177_2_fu_304_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln179_1_fu_386_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl11_mid1_fu_398_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln177_3_fu_312_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln179_2_fu_406_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln179_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln177_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln179_1_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln177_1_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln181_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln179_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln181_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln183_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln183_1_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln179_fu_414_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln183_fu_486_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln185_1_fu_494_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln183_1_fu_510_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln181_1_fu_524_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln179_1_fu_538_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln181_fu_585_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln183_fu_592_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_624_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_624_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_fu_634_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl12_cast_fu_642_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln181_fu_630_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_107_fu_646_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln183_fu_652_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_fu_624_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln177_1_fu_662_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_mid13000_fu_672_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_mid13000_fu_672_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_mid13000_fu_672_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln185_2_fu_656_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln177_1_fu_678_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln177_4_fu_685_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln179_fu_699_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln181_fu_713_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl12_mid1_fu_723_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl12_cast_mid1_fu_731_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln181_1_fu_719_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid12943_fu_735_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln183_1_fu_741_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln185_6_fu_745_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln179_3_fu_706_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_827_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln185_2_fu_765_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln181_1_fu_751_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln185_5_fu_768_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_774_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln185_1_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln185_4_fu_786_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_791_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_827_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_827_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_827_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_827_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_827_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal empty_fu_624_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_827_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_827_p10 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_827_p30 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid13000_fu_672_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component kernel_attention_mul_3ns_13ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component kernel_attention_ama_addmuladd_5ns_6ns_6ns_3ns_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component kernel_attention_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_3ns_13ns_15_1_1_U168 : component kernel_attention_mul_3ns_13ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 13,
        dout_WIDTH => 15)
    port map (
        din0 => empty_fu_624_p0,
        din1 => empty_fu_624_p1,
        dout => empty_fu_624_p2);

    mul_3ns_13ns_15_1_1_U169 : component kernel_attention_mul_3ns_13ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 13,
        dout_WIDTH => 15)
    port map (
        din0 => p_mid13000_fu_672_p0,
        din1 => p_mid13000_fu_672_p1,
        dout => p_mid13000_fu_672_p2);

    ama_addmuladd_5ns_6ns_6ns_3ns_12_4_1_U170 : component kernel_attention_ama_addmuladd_5ns_6ns_6ns_3ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 3,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_827_p0,
        din1 => grp_fu_827_p1,
        din2 => grp_fu_827_p2,
        din3 => grp_fu_827_p3,
        ce => grp_fu_827_ce,
        dout => grp_fu_827_p4);

    flow_control_loop_pipe_sequential_init_U : component kernel_attention_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    b_1_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    b_1_fu_150 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln177_reg_911_pp0_iter3_reg = ap_const_lv1_0))) then 
                    b_1_fu_150 <= select_ln177_5_fu_692_p3;
                end if;
            end if; 
        end if;
    end process;

    c_1_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c_1_fu_142 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln177_fu_266_p2 = ap_const_lv1_0))) then 
                    c_1_fu_142 <= select_ln179_4_fu_442_p3;
                end if;
            end if; 
        end if;
    end process;

    h_1_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    h_1_fu_134 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln177_reg_911_pp0_iter3_reg = ap_const_lv1_0))) then 
                    h_1_fu_134 <= select_ln181_2_fu_758_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten2932_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten2932_fu_130 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln177_fu_266_p2 = ap_const_lv1_0))) then 
                    indvar_flatten2932_fu_130 <= select_ln183_2_fu_516_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten2949_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten2949_fu_138 <= ap_const_lv11_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln177_fu_266_p2 = ap_const_lv1_0))) then 
                    indvar_flatten2949_fu_138 <= select_ln181_3_fu_530_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten2985_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten2985_fu_146 <= ap_const_lv13_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln177_fu_266_p2 = ap_const_lv1_0))) then 
                    indvar_flatten2985_fu_146 <= select_ln179_5_fu_544_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten3044_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten3044_fu_154 <= ap_const_lv14_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln177_fu_266_p2 = ap_const_lv1_0))) then 
                    indvar_flatten3044_fu_154 <= add_ln177_fu_272_p2;
                end if;
            end if; 
        end if;
    end process;

    w_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    w_fu_126 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln177_reg_911_pp0_iter2_reg = ap_const_lv1_0))) then 
                    w_fu_126 <= select_ln183_1_fu_598_p3;
                end if;
            end if; 
        end if;
    end process;

    x_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_122 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln177_fu_266_p2 = ap_const_lv1_0))) then 
                    x_fu_122 <= add_ln184_fu_504_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln177_fu_266_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln177_2_reg_922 <= and_ln177_2_fu_356_p2;
                and_ln179_1_reg_932 <= and_ln179_1_fu_436_p2;
                and_ln181_reg_943 <= and_ln181_fu_468_p2;
                icmp_ln179_reg_915 <= icmp_ln179_fu_290_p2;
                or_ln179_reg_927 <= or_ln179_fu_368_p2;
                or_ln181_1_reg_938 <= or_ln181_1_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln177_2_reg_922_pp0_iter2_reg <= and_ln177_2_reg_922;
                and_ln177_2_reg_922_pp0_iter3_reg <= and_ln177_2_reg_922_pp0_iter2_reg;
                and_ln179_1_reg_932_pp0_iter2_reg <= and_ln179_1_reg_932;
                and_ln179_1_reg_932_pp0_iter3_reg <= and_ln179_1_reg_932_pp0_iter2_reg;
                and_ln181_reg_943_pp0_iter2_reg <= and_ln181_reg_943;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln177_reg_911_pp0_iter2_reg <= icmp_ln177_reg_911;
                icmp_ln177_reg_911_pp0_iter3_reg <= icmp_ln177_reg_911_pp0_iter2_reg;
                icmp_ln177_reg_911_pp0_iter4_reg <= icmp_ln177_reg_911_pp0_iter3_reg;
                icmp_ln179_reg_915_pp0_iter2_reg <= icmp_ln179_reg_915;
                icmp_ln179_reg_915_pp0_iter3_reg <= icmp_ln179_reg_915_pp0_iter2_reg;
                or_ln179_reg_927_pp0_iter2_reg <= or_ln179_reg_927;
                or_ln179_reg_927_pp0_iter3_reg <= or_ln179_reg_927_pp0_iter2_reg;
                or_ln181_1_reg_938_pp0_iter2_reg <= or_ln181_1_reg_938;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln177_reg_911 <= icmp_ln177_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln177_reg_911_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_17_reg_953 <= sext_ln185_fu_801_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln177_reg_911_pp0_iter4_reg = ap_const_lv1_0))) then
                gmem_addr_read_reg_959 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln177_1_fu_662_p2 <= std_logic_vector(unsigned(b_1_fu_150) + unsigned(ap_const_lv3_1));
    add_ln177_fu_272_p2 <= std_logic_vector(unsigned(indvar_flatten3044_fu_154) + unsigned(ap_const_lv14_1));
    add_ln179_1_fu_538_p2 <= std_logic_vector(unsigned(indvar_flatten2985_fu_146) + unsigned(ap_const_lv13_1));
    add_ln179_fu_362_p2 <= std_logic_vector(unsigned(select_ln177_fu_296_p3) + unsigned(ap_const_lv3_1));
    add_ln181_1_fu_524_p2 <= std_logic_vector(unsigned(indvar_flatten2949_fu_138) + unsigned(ap_const_lv11_1));
    add_ln181_fu_713_p2 <= std_logic_vector(unsigned(select_ln179_fu_699_p3) + unsigned(ap_const_lv3_1));
    add_ln183_1_fu_510_p2 <= std_logic_vector(unsigned(indvar_flatten2932_fu_130) + unsigned(ap_const_lv8_1));
    add_ln183_fu_592_p2 <= std_logic_vector(unsigned(select_ln181_fu_585_p3) + unsigned(ap_const_lv3_1));
    add_ln184_fu_504_p2 <= std_logic_vector(unsigned(select_ln183_fu_486_p3) + unsigned(ap_const_lv5_1));
    add_ln185_1_fu_494_p2 <= std_logic_vector(unsigned(zext_ln179_fu_414_p1) + unsigned(select_ln183_fu_486_p3));
    add_ln185_2_fu_656_p2 <= std_logic_vector(signed(sext_ln183_fu_652_p1) + signed(empty_fu_624_p2));
    add_ln185_4_fu_786_p2 <= std_logic_vector(signed(sext_ln185_1_fu_782_p1) + signed(afterRearrangeQKX));
    add_ln185_5_fu_768_p2 <= std_logic_vector(unsigned(zext_ln185_2_fu_765_p1) + unsigned(select_ln181_1_fu_751_p3));
    add_ln185_6_fu_745_p2 <= std_logic_vector(signed(sext_ln183_1_fu_741_p1) + signed(select_ln177_1_fu_678_p3));
    and_ln177_1_fu_344_p2 <= (xor_ln177_fu_320_p2 and icmp_ln183_fu_338_p2);
    and_ln177_2_fu_356_p2 <= (xor_ln177_fu_320_p2 and icmp_ln181_fu_350_p2);
    and_ln177_fu_332_p2 <= (xor_ln177_fu_320_p2 and icmp_ln184_fu_326_p2);
    and_ln179_1_fu_436_p2 <= (or_ln179_1_fu_424_p2 and and_ln177_1_fu_344_p2);
    and_ln179_fu_430_p2 <= (or_ln179_1_fu_424_p2 and and_ln177_fu_332_p2);
    and_ln181_fu_468_p2 <= (xor_ln181_fu_462_p2 and and_ln179_fu_430_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter11, m_axi_gmem_RVALID, m_axi_gmem_BVALID, icmp_ln177_reg_911_pp0_iter4_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln177_reg_911_pp0_iter4_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter11, m_axi_gmem_WREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, icmp_ln177_reg_911_pp0_iter4_reg, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state6_io) or ((icmp_ln177_reg_911_pp0_iter4_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter11, m_axi_gmem_WREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, icmp_ln177_reg_911_pp0_iter4_reg, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state6_io) or ((icmp_ln177_reg_911_pp0_iter4_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter11_assign_proc : process(m_axi_gmem_BVALID)
    begin
                ap_block_state12_pp0_stage0_iter11 <= (m_axi_gmem_BVALID = ap_const_logic_0);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(m_axi_gmem_AWREADY, icmp_ln177_reg_911_pp0_iter4_reg)
    begin
                ap_block_state6_io <= ((m_axi_gmem_AWREADY = ap_const_logic_0) and (icmp_ln177_reg_911_pp0_iter4_reg = ap_const_lv1_0));
    end process;


    ap_block_state6_pp0_stage0_iter5_assign_proc : process(m_axi_gmem_RVALID, icmp_ln177_reg_911_pp0_iter4_reg)
    begin
                ap_block_state6_pp0_stage0_iter5 <= ((icmp_ln177_reg_911_pp0_iter4_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln177_fu_266_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln177_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter5_stage0_assign_proc : process(ap_enable_reg_pp0_iter5, icmp_ln177_reg_911_pp0_iter4_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln177_reg_911_pp0_iter4_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_106_fu_246_p1 <= c_1_fu_142(2 - 1 downto 0);
    empty_107_fu_646_p2 <= std_logic_vector(unsigned(p_shl12_cast_fu_642_p1) - unsigned(zext_ln181_fu_630_p1));
    empty_109_fu_374_p1 <= add_ln179_fu_362_p2(2 - 1 downto 0);
    empty_fu_624_p0 <= empty_fu_624_p00(3 - 1 downto 0);
    empty_fu_624_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_1_fu_150),15));
    empty_fu_624_p1 <= ap_const_lv15_F50(13 - 1 downto 0);

    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter5, m_axi_gmem_AWREADY, icmp_ln177_reg_911_pp0_iter4_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln177_reg_911_pp0_iter4_reg = ap_const_lv1_0))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter11, m_axi_gmem_BVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter5, m_axi_gmem_RVALID, icmp_ln177_reg_911_pp0_iter4_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln177_reg_911_pp0_iter4_reg = ap_const_lv1_0))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter6, m_axi_gmem_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_827_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_827_ce <= ap_const_logic_1;
        else 
            grp_fu_827_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_827_p0 <= grp_fu_827_p00(5 - 1 downto 0);
    grp_fu_827_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln185_1_fu_494_p2),7));
    grp_fu_827_p1 <= grp_fu_827_p10(6 - 1 downto 0);
    grp_fu_827_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln179_1_fu_386_p3),7));
    grp_fu_827_p2 <= ap_const_lv12_31(6 - 1 downto 0);
    grp_fu_827_p3 <= grp_fu_827_p30(3 - 1 downto 0);
    grp_fu_827_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln183_1_fu_598_p3),12));
    icmp_ln177_fu_266_p2 <= "1" when (indvar_flatten3044_fu_154 = ap_const_lv14_3D40) else "0";
    icmp_ln179_fu_290_p2 <= "1" when (indvar_flatten2985_fu_146 = ap_const_lv13_F50) else "0";
    icmp_ln181_fu_350_p2 <= "1" when (indvar_flatten2949_fu_138 = ap_const_lv11_3D4) else "0";
    icmp_ln183_fu_338_p2 <= "1" when (indvar_flatten2932_fu_130 = ap_const_lv8_8C) else "0";
    icmp_ln184_fu_326_p2 <= "1" when (x_fu_122 = ap_const_lv5_14) else "0";
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= gmem_addr_17_reg_953;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_1;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter5, icmp_ln177_reg_911_pp0_iter4_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln177_reg_911_pp0_iter4_reg = ap_const_lv1_0))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter5, icmp_ln177_reg_911_pp0_iter4_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln177_reg_911_pp0_iter4_reg = ap_const_lv1_0))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= gmem_addr_read_reg_959;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln179_1_fu_424_p2 <= (xor_ln179_fu_418_p2 or icmp_ln179_fu_290_p2);
    or_ln179_fu_368_p2 <= (icmp_ln179_fu_290_p2 or and_ln177_2_fu_356_p2);
    or_ln181_1_fu_456_p2 <= (or_ln181_fu_450_p2 or icmp_ln179_fu_290_p2);
    or_ln181_fu_450_p2 <= (and_ln179_1_fu_436_p2 or and_ln177_2_fu_356_p2);
    or_ln183_1_fu_480_p2 <= (or_ln183_fu_474_p2 or or_ln179_fu_368_p2);
    or_ln183_fu_474_p2 <= (and_ln181_fu_468_p2 or and_ln179_1_fu_436_p2);
    p_mid12943_fu_735_p2 <= std_logic_vector(unsigned(p_shl12_cast_mid1_fu_731_p1) - unsigned(zext_ln181_1_fu_719_p1));
    p_mid13000_fu_672_p0 <= p_mid13000_fu_672_p00(3 - 1 downto 0);
    p_mid13000_fu_672_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln177_1_fu_662_p2),15));
    p_mid13000_fu_672_p1 <= ap_const_lv15_F50(13 - 1 downto 0);
    p_shl10_mid1_fu_378_p3 <= (empty_109_fu_374_p1 & ap_const_lv4_0);
    p_shl11_mid1_fu_398_p3 <= (empty_109_fu_374_p1 & ap_const_lv2_0);
    p_shl12_cast_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_fu_634_p3),7));
    p_shl12_cast_mid1_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl12_mid1_fu_723_p3),7));
    p_shl12_mid1_fu_723_p3 <= (add_ln181_fu_713_p2 & ap_const_lv3_0);
    p_shl3_fu_250_p3 <= (empty_106_fu_246_p1 & ap_const_lv4_0);
    p_shl4_fu_258_p3 <= (empty_106_fu_246_p1 & ap_const_lv2_0);
    p_shl6_fu_634_p3 <= (h_1_fu_134 & ap_const_lv3_0);
    select_ln177_1_fu_678_p3 <= 
        p_mid13000_fu_672_p2 when (icmp_ln179_reg_915_pp0_iter3_reg(0) = '1') else 
        empty_fu_624_p2;
    select_ln177_2_fu_304_p3 <= 
        ap_const_lv6_0 when (icmp_ln179_fu_290_p2(0) = '1') else 
        p_shl3_fu_250_p3;
    select_ln177_3_fu_312_p3 <= 
        ap_const_lv4_0 when (icmp_ln179_fu_290_p2(0) = '1') else 
        p_shl4_fu_258_p3;
    select_ln177_4_fu_685_p3 <= 
        p_mid13000_fu_672_p2 when (icmp_ln179_reg_915_pp0_iter3_reg(0) = '1') else 
        add_ln185_2_fu_656_p2;
    select_ln177_5_fu_692_p3 <= 
        add_ln177_1_fu_662_p2 when (icmp_ln179_reg_915_pp0_iter3_reg(0) = '1') else 
        b_1_fu_150;
    select_ln177_fu_296_p3 <= 
        ap_const_lv3_0 when (icmp_ln179_fu_290_p2(0) = '1') else 
        c_1_fu_142;
    select_ln179_1_fu_386_p3 <= 
        p_shl10_mid1_fu_378_p3 when (and_ln177_2_fu_356_p2(0) = '1') else 
        select_ln177_2_fu_304_p3;
    select_ln179_2_fu_406_p3 <= 
        p_shl11_mid1_fu_398_p3 when (and_ln177_2_fu_356_p2(0) = '1') else 
        select_ln177_3_fu_312_p3;
    select_ln179_3_fu_706_p3 <= 
        select_ln177_1_fu_678_p3 when (and_ln177_2_reg_922_pp0_iter3_reg(0) = '1') else 
        select_ln177_4_fu_685_p3;
    select_ln179_4_fu_442_p3 <= 
        add_ln179_fu_362_p2 when (and_ln177_2_fu_356_p2(0) = '1') else 
        select_ln177_fu_296_p3;
    select_ln179_5_fu_544_p3 <= 
        ap_const_lv13_1 when (icmp_ln179_fu_290_p2(0) = '1') else 
        add_ln179_1_fu_538_p2;
    select_ln179_fu_699_p3 <= 
        ap_const_lv3_0 when (or_ln179_reg_927_pp0_iter3_reg(0) = '1') else 
        h_1_fu_134;
    select_ln181_1_fu_751_p3 <= 
        add_ln185_6_fu_745_p2 when (and_ln179_1_reg_932_pp0_iter3_reg(0) = '1') else 
        select_ln179_3_fu_706_p3;
    select_ln181_2_fu_758_p3 <= 
        add_ln181_fu_713_p2 when (and_ln179_1_reg_932_pp0_iter3_reg(0) = '1') else 
        select_ln179_fu_699_p3;
    select_ln181_3_fu_530_p3 <= 
        ap_const_lv11_1 when (or_ln179_fu_368_p2(0) = '1') else 
        add_ln181_1_fu_524_p2;
    select_ln181_fu_585_p3 <= 
        ap_const_lv3_0 when (or_ln181_1_reg_938_pp0_iter2_reg(0) = '1') else 
        w_fu_126;
    select_ln183_1_fu_598_p3 <= 
        add_ln183_fu_592_p2 when (and_ln181_reg_943_pp0_iter2_reg(0) = '1') else 
        select_ln181_fu_585_p3;
    select_ln183_2_fu_516_p3 <= 
        ap_const_lv8_1 when (or_ln181_1_fu_456_p2(0) = '1') else 
        add_ln183_1_fu_510_p2;
    select_ln183_fu_486_p3 <= 
        ap_const_lv5_0 when (or_ln183_1_fu_480_p2(0) = '1') else 
        x_fu_122;
        sext_ln183_1_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_mid12943_fu_735_p2),15));

        sext_ln183_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_107_fu_646_p2),15));

        sext_ln185_1_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_774_p3),64));

        sext_ln185_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_791_p4),64));

    tmp_s_fu_774_p3 <= (add_ln185_5_fu_768_p2 & ap_const_lv2_0);
    trunc_ln_fu_791_p4 <= add_ln185_4_fu_786_p2(63 downto 2);
    xor_ln177_fu_320_p2 <= (icmp_ln179_fu_290_p2 xor ap_const_lv1_1);
    xor_ln179_fu_418_p2 <= (icmp_ln181_fu_350_p2 xor ap_const_lv1_1);
    xor_ln181_fu_462_p2 <= (ap_const_lv1_1 xor and_ln179_1_fu_436_p2);
    zext_ln179_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln179_2_fu_406_p3),5));
    zext_ln181_1_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln181_fu_713_p2),7));
    zext_ln181_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_1_fu_134),7));
    zext_ln185_2_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_827_p4),15));
end behav;
