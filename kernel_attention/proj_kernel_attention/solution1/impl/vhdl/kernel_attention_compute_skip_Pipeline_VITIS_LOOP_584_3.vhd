-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_attention_compute_skip_Pipeline_VITIS_LOOP_584_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    zext_ln580 : IN STD_LOGIC_VECTOR (7 downto 0);
    bound66 : IN STD_LOGIC_VECTOR (15 downto 0);
    bound21 : IN STD_LOGIC_VECTOR (13 downto 0);
    afterAct : IN STD_LOGIC_VECTOR (63 downto 0);
    buffer_result : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel_attention_compute_skip_Pipeline_VITIS_LOOP_584_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal icmp_ln584_1_reg_957 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state17_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln578_reg_925 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal or_ln582_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal first_iter_0_reg_208 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln580_cast_fu_221_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln580_cast_reg_907 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_2_reg_913 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal mul_ln580_fu_270_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln580_reg_919 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln578_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_reg_925_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln580_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln580_reg_929 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal sext_ln584_mid2_v_reg_947 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln584_1_mid2_v_reg_952 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln584_1_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_predicate_op154_readreq_state4 : BOOLEAN;
    signal ap_predicate_op156_writereq_state4 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal gmem_addr_79_read_reg_977 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_phi_mux_first_iter_0_phi_fu_213_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal sext_ln582_1_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln582_2_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_block_pp0_stage11_01001 : BOOLEAN;
    signal w_fu_118 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln584_fu_747_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_fu_122 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln582_1_fu_719_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_126 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln582_2_fu_770_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_fu_130 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln580_7_fu_621_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten61_fu_134 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln580_8_fu_303_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal n_fu_138 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln578_fu_507_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten128_fu_142 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln578_fu_280_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mul_ln580_fu_270_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln580_fu_270_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln580_1_fu_297_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln580_2_fu_327_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_fu_331_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_fu_340_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_cast_fu_348_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp2_cast1_fu_336_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal h_cast_fu_358_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_fu_352_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_fu_362_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_fu_372_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_cast2_fu_368_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln578_1_fu_404_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln580_1_fu_413_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln580_1_fu_413_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln580_1_fu_413_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_mid_fu_428_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_cast_mid184_fu_436_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp2_cast1_mid178_fu_424_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_mid186_fu_440_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_mid_fu_457_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_cast2_mid194_fu_453_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_mid198_fu_465_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_143_fu_380_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln584_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln580_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln580_fu_392_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln580_1_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln580_1_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln580_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln580_fu_513_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln580_4_fu_538_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln580_1_fu_418_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_mid1_fu_542_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_mid1_fu_552_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_cast_mid1_fu_560_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp2_cast1_mid1_fu_548_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_mid1_fu_564_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln580_2_fu_446_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_mid2_fu_582_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_cast2_mid131_fu_578_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_mid135_fu_590_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln580_3_fu_471_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal xor_ln580_1_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln580_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln580_3_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln580_4_fu_524_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln580_2_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln580_2_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln582_fu_629_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_cast_mid1_fu_641_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln580_5_fu_570_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_mid1_fu_645_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_mid1_fu_655_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_cast2_mid1_fu_651_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_mid111_fu_663_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln580_6_fu_596_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln582_fu_669_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_677_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln582_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln582_1_fu_689_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln582_2_fu_704_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln584_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln584_1_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln584_fu_730_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln582_3_fu_764_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln580_1_fu_413_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln580_fu_270_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component kernel_attention_mul_3ns_8ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component kernel_attention_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_3ns_8ns_10_1_1_U65 : component kernel_attention_mul_3ns_8ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln580_fu_270_p0,
        din1 => mul_ln580_fu_270_p1,
        dout => mul_ln580_fu_270_p2);

    mul_3ns_8ns_10_1_1_U66 : component kernel_attention_mul_3ns_8ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln580_1_fu_413_p0,
        din1 => mul_ln580_1_fu_413_p1,
        dout => mul_ln580_1_fu_413_p2);

    flow_control_loop_pipe_sequential_init_U : component kernel_attention_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    c_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c_fu_130 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln578_reg_925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                c_fu_130 <= select_ln580_7_fu_621_p3;
            end if; 
        end if;
    end process;

    first_iter_0_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln578_reg_925_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                first_iter_0_reg_208 <= ap_const_lv1_0;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                first_iter_0_reg_208 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    h_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                h_fu_122 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln578_reg_925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                h_fu_122 <= select_ln582_1_fu_719_p3;
            end if; 
        end if;
    end process;

    indvar_flatten128_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten128_fu_142 <= ap_const_lv16_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln578_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                indvar_flatten128_fu_142 <= add_ln578_fu_280_p2;
            end if; 
        end if;
    end process;

    indvar_flatten61_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten61_fu_134 <= ap_const_lv14_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln578_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                indvar_flatten61_fu_134 <= select_ln580_8_fu_303_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_fu_126 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln578_reg_925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                indvar_flatten_fu_126 <= select_ln582_2_fu_770_p3;
            end if; 
        end if;
    end process;

    n_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                n_fu_138 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln578_reg_925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                n_fu_138 <= select_ln578_fu_507_p3;
            end if; 
        end if;
    end process;

    w_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                w_fu_118 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln578_reg_925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                w_fu_118 <= select_ln584_fu_747_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (icmp_ln578_reg_925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001))) then
                gmem_addr_79_read_reg_977 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                icmp_ln578_reg_925 <= icmp_ln578_fu_275_p2;
                icmp_ln578_reg_925_pp0_iter1_reg <= icmp_ln578_reg_925;
                mul_ln580_reg_919 <= mul_ln580_fu_270_p2;
                n_2_reg_913 <= n_fu_138;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln578_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                icmp_ln580_reg_929 <= icmp_ln580_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln578_reg_925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                icmp_ln584_1_reg_957 <= icmp_ln584_1_fu_755_p2;
                or_ln582_reg_943 <= or_ln582_fu_635_p2;
                sext_ln584_1_mid2_v_reg_952 <= add_ln582_2_fu_704_p2(63 downto 2);
                sext_ln584_mid2_v_reg_947 <= add_ln582_1_fu_689_p2(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln580_cast_reg_907(7 downto 0) <= zext_ln580_cast_fu_221_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln580_cast_reg_907(9 downto 8) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_condition_exit_pp0_iter0_stage2, ap_block_pp0_stage13_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln578_1_fu_404_p2 <= std_logic_vector(unsigned(n_2_reg_913) + unsigned(ap_const_lv3_1));
    add_ln578_fu_280_p2 <= std_logic_vector(unsigned(indvar_flatten128_fu_142) + unsigned(ap_const_lv16_1));
    add_ln580_1_fu_297_p2 <= std_logic_vector(unsigned(indvar_flatten61_fu_134) + unsigned(ap_const_lv14_1));
    add_ln580_fu_513_p2 <= std_logic_vector(unsigned(select_ln580_fu_392_p3) + unsigned(ap_const_lv8_1));
    add_ln582_1_fu_689_p2 <= std_logic_vector(signed(sext_ln582_fu_685_p1) + signed(afterAct));
    add_ln582_2_fu_704_p2 <= std_logic_vector(signed(sext_ln582_fu_685_p1) + signed(buffer_result));
    add_ln582_3_fu_764_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_126) + unsigned(ap_const_lv6_1));
    add_ln582_fu_629_p2 <= std_logic_vector(unsigned(select_ln580_4_fu_524_p3) + unsigned(ap_const_lv3_1));
    add_ln584_fu_730_p2 <= std_logic_vector(unsigned(w_fu_118) + unsigned(ap_const_lv3_1));
    and_ln580_1_fu_501_p2 <= (xor_ln580_fu_478_p2 and icmp_ln582_fu_495_p2);
    and_ln580_2_fu_615_p2 <= (or_ln580_3_fu_610_p2 and and_ln580_fu_489_p2);
    and_ln580_fu_489_p2 <= (xor_ln580_fu_478_p2 and icmp_ln584_fu_483_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage10_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln578_reg_925)
    begin
                ap_block_pp0_stage10_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln578_reg_925 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage10_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln578_reg_925)
    begin
                ap_block_pp0_stage10_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln578_reg_925 = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage11_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state12_io)
    begin
                ap_block_pp0_stage11_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_io));
    end process;


    ap_block_pp0_stage11_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state12_io)
    begin
                ap_block_pp0_stage11_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_io));
    end process;

        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_BVALID, icmp_ln584_1_reg_957)
    begin
                ap_block_pp0_stage2_11001 <= ((m_axi_gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln584_1_reg_957 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_BVALID, icmp_ln584_1_reg_957)
    begin
                ap_block_pp0_stage2_subdone <= ((m_axi_gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln584_1_reg_957 = ap_const_lv1_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_io)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_io)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io));
    end process;

        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage10_iter0_assign_proc : process(m_axi_gmem_RVALID, icmp_ln578_reg_925)
    begin
                ap_block_state11_pp0_stage10_iter0 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln578_reg_925 = ap_const_lv1_0));
    end process;


    ap_block_state12_io_assign_proc : process(m_axi_gmem_WREADY, icmp_ln578_reg_925)
    begin
                ap_block_state12_io <= ((m_axi_gmem_WREADY = ap_const_logic_0) and (icmp_ln578_reg_925 = ap_const_lv1_0));
    end process;

        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage2_iter1_assign_proc : process(m_axi_gmem_BVALID, icmp_ln584_1_reg_957)
    begin
                ap_block_state17_pp0_stage2_iter1 <= ((m_axi_gmem_BVALID = ap_const_logic_0) and (icmp_ln584_1_reg_957 = ap_const_lv1_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_ARREADY, ap_predicate_op154_readreq_state4, ap_predicate_op156_writereq_state4)
    begin
                ap_block_state4_io <= (((m_axi_gmem_AWREADY = ap_const_logic_0) and (ap_predicate_op156_writereq_state4 = ap_const_boolean_1)) or ((m_axi_gmem_ARREADY = ap_const_logic_0) and (ap_predicate_op154_readreq_state4 = ap_const_boolean_1)));
    end process;

        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln578_reg_925)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln578_reg_925 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_phi_mux_first_iter_0_phi_fu_213_p4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, first_iter_0_reg_208, icmp_ln578_reg_925_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln578_reg_925_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            ap_phi_mux_first_iter_0_phi_fu_213_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_first_iter_0_phi_fu_213_p4 <= first_iter_0_reg_208;
        end if; 
    end process;


    ap_predicate_op154_readreq_state4_assign_proc : process(icmp_ln578_reg_925, or_ln582_reg_943)
    begin
                ap_predicate_op154_readreq_state4 <= ((or_ln582_reg_943 = ap_const_lv1_1) and (icmp_ln578_reg_925 = ap_const_lv1_0));
    end process;


    ap_predicate_op156_writereq_state4_assign_proc : process(icmp_ln578_reg_925, or_ln582_reg_943)
    begin
                ap_predicate_op156_writereq_state4 <= ((or_ln582_reg_943 = ap_const_lv1_1) and (icmp_ln578_reg_925 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_143_fu_380_p2 <= std_logic_vector(unsigned(p_shl1_fu_372_p3) - unsigned(p_cast2_fu_368_p1));
    empty_fu_362_p2 <= std_logic_vector(unsigned(h_cast_fu_358_p1) + unsigned(tmp3_fu_352_p2));

    gmem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_ARREADY, icmp_ln578_reg_925, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, or_ln582_reg_943)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (or_ln582_reg_943 = ap_const_lv1_1) and (icmp_ln578_reg_925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_AWREADY, icmp_ln578_reg_925, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, or_ln582_reg_943)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (or_ln582_reg_943 = ap_const_lv1_1) and (icmp_ln578_reg_925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, m_axi_gmem_BVALID, icmp_ln584_1_reg_957, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (icmp_ln584_1_reg_957 = ap_const_lv1_1))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_RVALID, icmp_ln578_reg_925, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (icmp_ln578_reg_925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmem_WREADY, icmp_ln578_reg_925, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (icmp_ln578_reg_925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    h_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_fu_122),14));
    h_cast_mid1_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln582_fu_629_p2),14));
    icmp_ln578_fu_275_p2 <= "1" when (indvar_flatten128_fu_142 = bound66) else "0";
    icmp_ln580_fu_289_p2 <= "1" when (indvar_flatten61_fu_134 = bound21) else "0";
    icmp_ln582_fu_495_p2 <= "1" when (indvar_flatten_fu_126 = ap_const_lv6_31) else "0";
    icmp_ln584_1_fu_755_p2 <= "1" when (select_ln584_fu_747_p3 = ap_const_lv3_7) else "0";
    icmp_ln584_fu_483_p2 <= "1" when (w_fu_118 = ap_const_lv3_7) else "0";
    m_axi_gmem_ARADDR <= sext_ln582_1_fu_803_p1;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_7;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_predicate_op154_readreq_state4, ap_block_pp0_stage3_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op154_readreq_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= sext_ln582_2_fu_806_p1;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_7;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_predicate_op156_writereq_state4, ap_block_pp0_stage3_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op156_writereq_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, icmp_ln584_1_reg_957, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln584_1_reg_957 = ap_const_lv1_1))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln578_reg_925, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (icmp_ln578_reg_925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= gmem_addr_79_read_reg_977;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln578_reg_925, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (icmp_ln578_reg_925 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln580_1_fu_413_p0 <= mul_ln580_1_fu_413_p00(3 - 1 downto 0);
    mul_ln580_1_fu_413_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln578_1_fu_404_p2),10));
    mul_ln580_1_fu_413_p1 <= zext_ln580_cast_reg_907(8 - 1 downto 0);
    mul_ln580_fu_270_p0 <= mul_ln580_fu_270_p00(3 - 1 downto 0);
    mul_ln580_fu_270_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_fu_138),10));
    mul_ln580_fu_270_p1 <= zext_ln580_cast_reg_907(8 - 1 downto 0);
    or_ln580_1_fu_519_p2 <= (icmp_ln580_reg_929 or and_ln580_1_fu_501_p2);
    or_ln580_2_fu_532_p2 <= (or_ln580_fu_399_p2 or and_ln580_1_fu_501_p2);
    or_ln580_3_fu_610_p2 <= (xor_ln580_1_fu_604_p2 or icmp_ln580_reg_929);
    or_ln580_fu_399_p2 <= (icmp_ln580_reg_929 or ap_phi_mux_first_iter_0_phi_fu_213_p4);
    or_ln582_fu_635_p2 <= (or_ln580_2_fu_532_p2 or and_ln580_2_fu_615_p2);
    or_ln584_1_fu_742_p2 <= (or_ln584_fu_736_p2 or icmp_ln580_reg_929);
    or_ln584_fu_736_p2 <= (and_ln580_2_fu_615_p2 or and_ln580_1_fu_501_p2);
        p_cast2_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_fu_362_p2),17));

        p_cast2_mid131_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_mid1_fu_564_p2),17));

        p_cast2_mid194_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_mid186_fu_440_p2),17));

        p_cast2_mid1_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_mid1_fu_645_p2),17));

    p_mid111_fu_663_p2 <= std_logic_vector(unsigned(p_shl1_mid1_fu_655_p3) - unsigned(p_cast2_mid1_fu_651_p1));
    p_mid135_fu_590_p2 <= std_logic_vector(unsigned(p_shl1_mid2_fu_582_p3) - unsigned(p_cast2_mid131_fu_578_p1));
    p_mid198_fu_465_p2 <= std_logic_vector(unsigned(p_shl1_mid_fu_457_p3) - unsigned(p_cast2_mid194_fu_453_p1));
    p_mid1_fu_645_p2 <= std_logic_vector(unsigned(h_cast_mid1_fu_641_p1) + unsigned(select_ln580_5_fu_570_p3));
    p_shl1_fu_372_p3 <= (empty_fu_362_p2 & ap_const_lv3_0);
    p_shl1_mid1_fu_655_p3 <= (p_mid1_fu_645_p2 & ap_const_lv3_0);
    p_shl1_mid2_fu_582_p3 <= (tmp3_mid1_fu_564_p2 & ap_const_lv3_0);
    p_shl1_mid_fu_457_p3 <= (tmp3_mid186_fu_440_p2 & ap_const_lv3_0);
    p_shl_cast_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_340_p3),14));
    p_shl_cast_mid184_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid_fu_428_p3),14));
    p_shl_cast_mid1_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_552_p3),14));
    p_shl_fu_340_p3 <= (tmp2_fu_331_p2 & ap_const_lv3_0);
    p_shl_mid1_fu_552_p3 <= (tmp2_mid1_fu_542_p2 & ap_const_lv3_0);
    p_shl_mid_fu_428_p3 <= (mul_ln580_1_fu_413_p2 & ap_const_lv3_0);
    select_ln578_fu_507_p3 <= 
        add_ln578_1_fu_404_p2 when (icmp_ln580_reg_929(0) = '1') else 
        n_2_reg_913;
    select_ln580_1_fu_418_p3 <= 
        mul_ln580_1_fu_413_p2 when (icmp_ln580_reg_929(0) = '1') else 
        mul_ln580_reg_919;
    select_ln580_2_fu_446_p3 <= 
        tmp3_mid186_fu_440_p2 when (icmp_ln580_reg_929(0) = '1') else 
        tmp3_fu_352_p2;
    select_ln580_3_fu_471_p3 <= 
        p_mid198_fu_465_p2 when (icmp_ln580_reg_929(0) = '1') else 
        empty_143_fu_380_p2;
    select_ln580_4_fu_524_p3 <= 
        ap_const_lv3_0 when (or_ln580_1_fu_519_p2(0) = '1') else 
        h_fu_122;
    select_ln580_5_fu_570_p3 <= 
        tmp3_mid1_fu_564_p2 when (and_ln580_1_fu_501_p2(0) = '1') else 
        select_ln580_2_fu_446_p3;
    select_ln580_6_fu_596_p3 <= 
        p_mid135_fu_590_p2 when (and_ln580_1_fu_501_p2(0) = '1') else 
        select_ln580_3_fu_471_p3;
    select_ln580_7_fu_621_p3 <= 
        add_ln580_fu_513_p2 when (and_ln580_1_fu_501_p2(0) = '1') else 
        select_ln580_fu_392_p3;
    select_ln580_8_fu_303_p3 <= 
        ap_const_lv14_1 when (icmp_ln580_fu_289_p2(0) = '1') else 
        add_ln580_1_fu_297_p2;
    select_ln580_fu_392_p3 <= 
        ap_const_lv8_0 when (icmp_ln580_reg_929(0) = '1') else 
        c_fu_130;
    select_ln582_1_fu_719_p3 <= 
        add_ln582_fu_629_p2 when (and_ln580_2_fu_615_p2(0) = '1') else 
        select_ln580_4_fu_524_p3;
    select_ln582_2_fu_770_p3 <= 
        ap_const_lv6_1 when (or_ln580_1_fu_519_p2(0) = '1') else 
        add_ln582_3_fu_764_p2;
    select_ln582_fu_669_p3 <= 
        p_mid111_fu_663_p2 when (and_ln580_2_fu_615_p2(0) = '1') else 
        select_ln580_6_fu_596_p3;
    select_ln584_fu_747_p3 <= 
        ap_const_lv3_1 when (or_ln584_1_fu_742_p2(0) = '1') else 
        add_ln584_fu_730_p2;
        sext_ln582_1_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln584_mid2_v_reg_947),64));

        sext_ln582_2_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln584_1_mid2_v_reg_952),64));

        sext_ln582_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_677_p3),64));

    tmp2_cast1_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_331_p2),14));
    tmp2_cast1_mid178_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln580_1_fu_413_p2),14));
    tmp2_cast1_mid1_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_mid1_fu_542_p2),14));
    tmp2_fu_331_p2 <= std_logic_vector(unsigned(zext_ln580_2_fu_327_p1) + unsigned(mul_ln580_reg_919));
    tmp2_mid1_fu_542_p2 <= std_logic_vector(unsigned(zext_ln580_4_fu_538_p1) + unsigned(select_ln580_1_fu_418_p3));
    tmp3_fu_352_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_348_p1) - unsigned(tmp2_cast1_fu_336_p1));
    tmp3_mid186_fu_440_p2 <= std_logic_vector(unsigned(p_shl_cast_mid184_fu_436_p1) - unsigned(tmp2_cast1_mid178_fu_424_p1));
    tmp3_mid1_fu_564_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_560_p1) - unsigned(tmp2_cast1_mid1_fu_548_p1));
    tmp_s_fu_677_p3 <= (select_ln582_fu_669_p3 & ap_const_lv2_0);
    xor_ln580_1_fu_604_p2 <= (icmp_ln582_fu_495_p2 xor ap_const_lv1_1);
    xor_ln580_fu_478_p2 <= (icmp_ln580_reg_929 xor ap_const_lv1_1);
    zext_ln580_2_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_fu_130),10));
    zext_ln580_4_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln580_fu_513_p2),10));
    zext_ln580_cast_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln580),10));
end behav;
