-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_attention_kernel_attention_Pipeline_VITIS_LOOP_511_1_VITIS_LOOP_515_3_VITIS_LOOP_517_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln511 : IN STD_LOGIC_VECTOR (61 downto 0);
    afterAct2 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel_attention_kernel_attention_Pipeline_VITIS_LOOP_511_1_VITIS_LOOP_515_3_VITIS_LOOP_517_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_B7C0 : STD_LOGIC_VECTOR (15 downto 0) := "1011011111000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv14_2DF0 : STD_LOGIC_VECTOR (13 downto 0) := "10110111110000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv16_2DF0 : STD_LOGIC_VECTOR (15 downto 0) := "0010110111110000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv14_31 : STD_LOGIC_VECTOR (13 downto 0) := "00000000110001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal icmp_ln511_reg_759 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln511_reg_759_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln511_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln511_reg_759_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln513_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln513_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln513_reg_763_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln513_reg_763_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln513_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln513_reg_772 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln513_reg_772_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln513_reg_772_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln515_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln515_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln515_reg_777_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln515_reg_777_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln513_1_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln513_1_reg_782 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln513_1_reg_782_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln513_1_reg_782_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln513_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln513_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln513_reg_788_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln513_reg_788_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln513_fu_364_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln513_1_fu_380_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln513_1_reg_804 : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_addr_read_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_820 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln519_fu_571_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln519_reg_825 : STD_LOGIC_VECTOR (22 downto 0);
    signal gmem_addr_16_reg_830 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln519_fu_670_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln519_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter4_stage0 : STD_LOGIC;
    signal sext_ln522_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal w_fu_120 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln517_fu_628_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal h_fu_124 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln515_2_fu_549_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten3054_fu_128 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln515_3_fu_315_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_fu_132 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln513_6_fu_301_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten3082_fu_136 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln513_7_fu_329_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal n_fu_140 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln511_fu_393_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten3122_fu_144 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln511_fu_241_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_181_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln513_fu_259_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln513_fu_285_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln515_1_fu_309_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln513_1_fu_323_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln513_fu_364_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln513_fu_364_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln511_1_fu_370_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln513_1_fu_380_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln513_1_fu_380_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl7_fu_418_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl15_cast_fu_426_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln515_fu_414_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_677_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln517_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_686_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln513_2_fu_439_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln513_4_fu_462_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_96_fu_430_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln513_1_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln513_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln513_1_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln513_3_fu_455_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln513_2_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln515_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln515_1_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln515_fu_495_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl15_mid1_fu_523_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl15_cast_mid1_fu_531_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln515_1_fu_519_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid13052_fu_535_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln513_5_fu_472_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln515_fu_511_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln515_1_fu_541_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln519_fu_557_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln520_2_fu_575_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln520_fu_581_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln513_4_fu_468_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln520_1_fu_585_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_591_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln520_1_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln520_fu_603_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_608_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln519_1_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln519_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln519_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln519_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_677_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_677_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_686_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_686_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_686_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_677_ce : STD_LOGIC;
    signal grp_fu_686_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_677_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_686_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln513_1_fu_380_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln513_fu_364_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component kernel_attention_fcmp_32ns_32ns_1_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kernel_attention_mul_3ns_15ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component kernel_attention_mac_muladd_8ns_6ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component kernel_attention_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fcmp_32ns_32ns_1_1_no_dsp_1_U175 : component kernel_attention_fcmp_32ns_32ns_1_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_6_fu_181_p0,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_6_fu_181_p2);

    mul_3ns_15ns_16_1_1_U176 : component kernel_attention_mul_3ns_15ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln513_fu_364_p0,
        din1 => mul_ln513_fu_364_p1,
        dout => mul_ln513_fu_364_p2);

    mul_3ns_15ns_16_1_1_U177 : component kernel_attention_mul_3ns_15ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln513_1_fu_380_p0,
        din1 => mul_ln513_1_fu_380_p1,
        dout => mul_ln513_1_fu_380_p2);

    mac_muladd_8ns_6ns_16ns_16_4_1_U178 : component kernel_attention_mac_muladd_8ns_6ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_677_p0,
        din1 => grp_fu_677_p1,
        din2 => mul_ln513_fu_364_p2,
        ce => grp_fu_677_ce,
        dout => grp_fu_677_p3);

    mac_muladd_8ns_6ns_16ns_16_4_1_U179 : component kernel_attention_mac_muladd_8ns_6ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_686_p0,
        din1 => grp_fu_686_p1,
        din2 => grp_fu_686_p2,
        ce => grp_fu_686_ce,
        dout => grp_fu_686_p3);

    flow_control_loop_pipe_sequential_init_U : component kernel_attention_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_132 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln511_fu_235_p2 = ap_const_lv1_0))) then 
                    c_fu_132 <= select_ln513_6_fu_301_p3;
                end if;
            end if; 
        end if;
    end process;

    h_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    h_fu_124 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln511_reg_759_pp0_iter3_reg = ap_const_lv1_0))) then 
                    h_fu_124 <= select_ln515_2_fu_549_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten3054_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten3054_fu_128 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln511_fu_235_p2 = ap_const_lv1_0))) then 
                    indvar_flatten3054_fu_128 <= select_ln515_3_fu_315_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten3082_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten3082_fu_136 <= ap_const_lv14_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln511_fu_235_p2 = ap_const_lv1_0))) then 
                    indvar_flatten3082_fu_136 <= select_ln513_7_fu_329_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten3122_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten3122_fu_144 <= ap_const_lv16_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln511_fu_235_p2 = ap_const_lv1_0))) then 
                    indvar_flatten3122_fu_144 <= add_ln511_fu_241_p2;
                end if;
            end if; 
        end if;
    end process;

    n_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    n_fu_140 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln511_reg_759_pp0_iter2_reg = ap_const_lv1_0))) then 
                    n_fu_140 <= select_ln511_fu_393_p3;
                end if;
            end if; 
        end if;
    end process;

    w_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    w_fu_120 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln511_reg_759_pp0_iter3_reg = ap_const_lv1_0))) then 
                    w_fu_120 <= add_ln517_fu_628_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln511_fu_235_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln513_1_reg_782 <= and_ln513_1_fu_279_p2;
                icmp_ln513_reg_763 <= icmp_ln513_fu_253_p2;
                icmp_ln515_reg_777 <= icmp_ln515_fu_273_p2;
                or_ln513_reg_788 <= or_ln513_fu_291_p2;
                xor_ln513_reg_772 <= xor_ln513_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln513_1_reg_782_pp0_iter2_reg <= and_ln513_1_reg_782;
                and_ln513_1_reg_782_pp0_iter3_reg <= and_ln513_1_reg_782_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln511_reg_759_pp0_iter2_reg <= icmp_ln511_reg_759;
                icmp_ln511_reg_759_pp0_iter3_reg <= icmp_ln511_reg_759_pp0_iter2_reg;
                icmp_ln513_reg_763_pp0_iter2_reg <= icmp_ln513_reg_763;
                icmp_ln513_reg_763_pp0_iter3_reg <= icmp_ln513_reg_763_pp0_iter2_reg;
                icmp_ln515_reg_777_pp0_iter2_reg <= icmp_ln515_reg_777;
                icmp_ln515_reg_777_pp0_iter3_reg <= icmp_ln515_reg_777_pp0_iter2_reg;
                or_ln513_reg_788_pp0_iter2_reg <= or_ln513_reg_788;
                or_ln513_reg_788_pp0_iter3_reg <= or_ln513_reg_788_pp0_iter2_reg;
                select_ln519_reg_836 <= select_ln519_fu_670_p3;
                xor_ln513_reg_772_pp0_iter2_reg <= xor_ln513_reg_772;
                xor_ln513_reg_772_pp0_iter3_reg <= xor_ln513_reg_772_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln511_reg_759 <= icmp_ln511_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln511_reg_759_pp0_iter3_reg = ap_const_lv1_0))) then
                gmem_addr_16_reg_830 <= sext_ln522_fu_618_p1;
                gmem_addr_read_reg_814 <= m_axi_gmem_RDATA;
                tmp_5_reg_820 <= m_axi_gmem_RDATA(30 downto 23);
                trunc_ln519_reg_825 <= trunc_ln519_fu_571_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln511_reg_759_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln513_1_reg_804 <= mul_ln513_1_fu_380_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln511_1_fu_370_p2 <= std_logic_vector(unsigned(n_fu_140) + unsigned(ap_const_lv3_1));
    add_ln511_fu_241_p2 <= std_logic_vector(unsigned(indvar_flatten3122_fu_144) + unsigned(ap_const_lv16_1));
    add_ln513_1_fu_323_p2 <= std_logic_vector(unsigned(indvar_flatten3082_fu_136) + unsigned(ap_const_lv14_1));
    add_ln513_fu_285_p2 <= std_logic_vector(unsigned(select_ln513_fu_259_p3) + unsigned(ap_const_lv8_1));
    add_ln515_1_fu_309_p2 <= std_logic_vector(unsigned(indvar_flatten3054_fu_128) + unsigned(ap_const_lv6_1));
    add_ln515_fu_495_p2 <= std_logic_vector(unsigned(select_ln513_3_fu_455_p3) + unsigned(ap_const_lv3_1));
    add_ln517_fu_628_p2 <= std_logic_vector(unsigned(select_ln515_fu_511_p3) + unsigned(ap_const_lv3_1));
    add_ln520_1_fu_585_p2 <= std_logic_vector(signed(sext_ln520_fu_581_p1) + signed(zext_ln513_4_fu_468_p1));
    add_ln520_2_fu_575_p2 <= std_logic_vector(unsigned(select_ln515_1_fu_541_p3) + unsigned(zext_ln519_fu_557_p1));
    add_ln520_fu_603_p2 <= std_logic_vector(signed(sext_ln520_1_fu_599_p1) + signed(afterAct2));
    and_ln513_1_fu_279_p2 <= (xor_ln513_fu_267_p2 and icmp_ln515_fu_273_p2);
    and_ln513_2_fu_489_p2 <= (or_ln513_1_fu_484_p2 and and_ln513_fu_450_p2);
    and_ln513_fu_450_p2 <= (xor_ln513_reg_772_pp0_iter3_reg and icmp_ln517_fu_444_p2);
    and_ln519_fu_664_p2 <= (tmp_6_fu_181_p2 and or_ln519_fu_658_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, m_axi_gmem_RVALID, m_axi_gmem_BVALID, icmp_ln511_reg_759_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_00001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln511_reg_759_pp0_iter3_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, m_axi_gmem_RVALID, m_axi_gmem_BVALID, icmp_ln511_reg_759_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln511_reg_759_pp0_iter3_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter11, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, icmp_ln511_reg_759_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((m_axi_gmem_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln511_reg_759_pp0_iter3_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter11, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, icmp_ln511_reg_759_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((m_axi_gmem_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln511_reg_759_pp0_iter3_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter11_assign_proc : process(m_axi_gmem_BVALID)
    begin
                ap_block_state12_pp0_stage0_iter11 <= (m_axi_gmem_BVALID = ap_const_logic_0);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter4_assign_proc : process(m_axi_gmem_RVALID, icmp_ln511_reg_759_pp0_iter3_reg)
    begin
                ap_block_state5_pp0_stage0_iter4 <= ((icmp_ln511_reg_759_pp0_iter3_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln511_fu_235_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln511_fu_235_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter4_stage0_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln511_reg_759_pp0_iter3_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln511_reg_759_pp0_iter3_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_96_fu_430_p2 <= std_logic_vector(unsigned(p_shl15_cast_fu_426_p1) - unsigned(zext_ln515_fu_414_p1));

    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter5, m_axi_gmem_AWREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter11, m_axi_gmem_BVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_gmem_RVALID, icmp_ln511_reg_759_pp0_iter3_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln511_reg_759_pp0_iter3_reg = ap_const_lv1_0))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter6, m_axi_gmem_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_677_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_677_ce <= ap_const_logic_1;
        else 
            grp_fu_677_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_677_p0 <= grp_fu_677_p00(8 - 1 downto 0);
    grp_fu_677_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_fu_132),14));
    grp_fu_677_p1 <= ap_const_lv14_31(6 - 1 downto 0);

    grp_fu_686_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_686_ce <= ap_const_logic_1;
        else 
            grp_fu_686_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_686_p0 <= grp_fu_686_p00(8 - 1 downto 0);
    grp_fu_686_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln513_fu_285_p2),14));
    grp_fu_686_p1 <= ap_const_lv14_31(6 - 1 downto 0);
    grp_fu_686_p2 <= 
        mul_ln513_1_fu_380_p2 when (icmp_ln513_reg_763_pp0_iter2_reg(0) = '1') else 
        mul_ln513_fu_364_p2;
    icmp_ln511_fu_235_p2 <= "1" when (indvar_flatten3122_fu_144 = ap_const_lv16_B7C0) else "0";
    icmp_ln513_fu_253_p2 <= "1" when (indvar_flatten3082_fu_136 = ap_const_lv14_2DF0) else "0";
    icmp_ln515_fu_273_p2 <= "1" when (indvar_flatten3054_fu_128 = ap_const_lv6_31) else "0";
    icmp_ln517_fu_444_p2 <= "1" when (w_fu_120 = ap_const_lv3_7) else "0";
    icmp_ln519_1_fu_653_p2 <= "1" when (trunc_ln519_reg_825 = ap_const_lv23_0) else "0";
    icmp_ln519_fu_648_p2 <= "0" when (tmp_5_reg_820 = ap_const_lv8_FF) else "1";
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= gmem_addr_16_reg_830;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_1;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln511_reg_759_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln511_reg_759_pp0_iter3_reg = ap_const_lv1_0))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= select_ln519_reg_836;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln513_1_fu_380_p0 <= mul_ln513_1_fu_380_p00(3 - 1 downto 0);
    mul_ln513_1_fu_380_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln511_1_fu_370_p2),16));
    mul_ln513_1_fu_380_p1 <= ap_const_lv16_2DF0(15 - 1 downto 0);
    mul_ln513_fu_364_p0 <= mul_ln513_fu_364_p00(3 - 1 downto 0);
    mul_ln513_fu_364_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_fu_140),16));
    mul_ln513_fu_364_p1 <= ap_const_lv16_2DF0(15 - 1 downto 0);
    or_ln513_1_fu_484_p2 <= (xor_ln513_1_fu_479_p2 or icmp_ln513_reg_763_pp0_iter3_reg);
    or_ln513_fu_291_p2 <= (icmp_ln513_fu_253_p2 or and_ln513_1_fu_279_p2);
    or_ln515_1_fu_506_p2 <= (or_ln515_fu_501_p2 or icmp_ln513_reg_763_pp0_iter3_reg);
    or_ln515_fu_501_p2 <= (and_ln513_2_fu_489_p2 or and_ln513_1_reg_782_pp0_iter3_reg);
    or_ln519_fu_658_p2 <= (icmp_ln519_fu_648_p2 or icmp_ln519_1_fu_653_p2);
    p_mid13052_fu_535_p2 <= std_logic_vector(unsigned(p_shl15_cast_mid1_fu_531_p1) - unsigned(zext_ln515_1_fu_519_p1));
    p_shl15_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_418_p3),7));
    p_shl15_cast_mid1_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl15_mid1_fu_523_p3),7));
    p_shl15_mid1_fu_523_p3 <= (add_ln515_fu_495_p2 & ap_const_lv3_0);
    p_shl7_fu_418_p3 <= (h_fu_124 & ap_const_lv3_0);
    select_ln511_fu_393_p3 <= 
        add_ln511_1_fu_370_p2 when (icmp_ln513_reg_763_pp0_iter2_reg(0) = '1') else 
        n_fu_140;
    select_ln513_2_fu_439_p3 <= 
        mul_ln513_1_reg_804 when (icmp_ln513_reg_763_pp0_iter3_reg(0) = '1') else 
        grp_fu_677_p3;
    select_ln513_3_fu_455_p3 <= 
        ap_const_lv3_0 when (or_ln513_reg_788_pp0_iter3_reg(0) = '1') else 
        h_fu_124;
    select_ln513_4_fu_462_p3 <= 
        grp_fu_686_p3 when (and_ln513_1_reg_782_pp0_iter3_reg(0) = '1') else 
        select_ln513_2_fu_439_p3;
    select_ln513_5_fu_472_p3 <= 
        ap_const_lv7_0 when (or_ln513_reg_788_pp0_iter3_reg(0) = '1') else 
        empty_96_fu_430_p2;
    select_ln513_6_fu_301_p3 <= 
        add_ln513_fu_285_p2 when (and_ln513_1_fu_279_p2(0) = '1') else 
        select_ln513_fu_259_p3;
    select_ln513_7_fu_329_p3 <= 
        ap_const_lv14_1 when (icmp_ln513_fu_253_p2(0) = '1') else 
        add_ln513_1_fu_323_p2;
    select_ln513_fu_259_p3 <= 
        ap_const_lv8_0 when (icmp_ln513_fu_253_p2(0) = '1') else 
        c_fu_132;
    select_ln515_1_fu_541_p3 <= 
        p_mid13052_fu_535_p2 when (and_ln513_2_fu_489_p2(0) = '1') else 
        select_ln513_5_fu_472_p3;
    select_ln515_2_fu_549_p3 <= 
        add_ln515_fu_495_p2 when (and_ln513_2_fu_489_p2(0) = '1') else 
        select_ln513_3_fu_455_p3;
    select_ln515_3_fu_315_p3 <= 
        ap_const_lv6_1 when (or_ln513_fu_291_p2(0) = '1') else 
        add_ln515_1_fu_309_p2;
    select_ln515_fu_511_p3 <= 
        ap_const_lv3_0 when (or_ln515_1_fu_506_p2(0) = '1') else 
        w_fu_120;
    select_ln519_fu_670_p3 <= 
        ap_const_lv32_0 when (and_ln519_fu_664_p2(0) = '1') else 
        gmem_addr_read_reg_814;
        sext_ln520_1_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_591_p3),64));

        sext_ln520_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln520_2_fu_575_p2),17));

        sext_ln522_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_608_p4),64));

    tmp_6_fu_181_p0 <= gmem_addr_read_reg_814;
    tmp_s_fu_591_p3 <= (add_ln520_1_fu_585_p2 & ap_const_lv2_0);
    trunc_ln519_fu_571_p1 <= m_axi_gmem_RDATA(23 - 1 downto 0);
    trunc_ln_fu_608_p4 <= add_ln520_fu_603_p2(63 downto 2);
    xor_ln513_1_fu_479_p2 <= (icmp_ln515_reg_777_pp0_iter3_reg xor ap_const_lv1_1);
    xor_ln513_fu_267_p2 <= (icmp_ln513_fu_253_p2 xor ap_const_lv1_1);
    zext_ln513_4_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln513_4_fu_462_p3),17));
    zext_ln515_1_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln515_fu_495_p2),7));
    zext_ln515_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_fu_124),7));
    zext_ln519_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln515_fu_511_p3),7));
end behav;
