-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_attention_kernel_attention_Pipeline_VITIS_LOOP_110_1_VITIS_LOOP_114_3_VITIS_LOOP_116_4_VIT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln110 : IN STD_LOGIC_VECTOR (61 downto 0);
    afterRearrangeX2 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel_attention_kernel_attention_Pipeline_VITIS_LOOP_110_1_VITIS_LOOP_114_3_VITIS_LOOP_116_4_VIT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_3D40 : STD_LOGIC_VECTOR (13 downto 0) := "11110101000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv13_F50 : STD_LOGIC_VECTOR (12 downto 0) := "0111101010000";
    constant ap_const_lv11_3D4 : STD_LOGIC_VECTOR (10 downto 0) := "01111010100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv14_F50 : STD_LOGIC_VECTOR (13 downto 0) := "00111101010000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv13_3D4 : STD_LOGIC_VECTOR (12 downto 0) := "0001111010100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal icmp_ln110_reg_905 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln110_reg_905_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln110_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln110_reg_905_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln110_reg_905_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_909_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_909_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln112_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln112_reg_919 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln112_reg_919_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln112_reg_919_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_reg_925 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_reg_925_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_reg_925_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln112_2_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln112_2_reg_930 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln112_2_reg_930_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln112_2_reg_930_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln112_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln112_reg_937 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln112_reg_937_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln112_reg_937_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln112_fu_379_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln112_1_fu_395_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln112_1_reg_953 : STD_LOGIC_VECTOR (13 downto 0);
    signal gmem_addr_15_reg_964 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_read_reg_970 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter5_stage0 : STD_LOGIC;
    signal sext_ln122_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal m_fu_122 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln118_fu_761_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal l_fu_126 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln116_2_fu_666_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten2812_fu_130 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln116_3_fu_773_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_fu_134 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln114_3_fu_603_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten2834_fu_138 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln114_4_fu_330_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_fu_142 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln112_7_fu_316_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten2873_fu_146 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln112_8_fu_344_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_fu_150 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln110_fu_408_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten2925_fu_154 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln110_fu_256_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln112_fu_274_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln112_fu_300_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln114_1_fu_324_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln112_1_fu_338_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln112_fu_379_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln112_fu_379_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln110_1_fu_385_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln112_1_fu_395_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln112_1_fu_395_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_807_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln116_fu_426_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl5_fu_439_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl5_cast_fu_447_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln116_1_fu_435_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln120_2_fu_430_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln120_2_fu_430_p2 : signal is "no";
    signal icmp_ln118_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_817_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln112_2_fu_463_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln112_3_fu_468_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal xor_ln112_1_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln112_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln112_1_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln112_1_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln112_4_fu_496_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln112_4_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln114_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln114_1_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln114_fu_537_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln112_5_fu_503_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln116_2_fu_561_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln120_4_fu_565_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln112_6_fu_509_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln114_1_fu_571_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln121_fu_451_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln112_3_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln114_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln114_fu_553_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln114_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln116_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln116_1_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln116_fu_611_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl5_mid1_fu_640_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl5_cast_mid1_fu_648_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln116_3_fu_636_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln121_1_fu_652_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln114_2_fu_583_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln116_fu_628_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln121_fu_674_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln116_1_fu_658_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln121_fu_678_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_684_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln121_1_fu_696_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln121_fu_692_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln120_fu_704_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln120_3_fu_708_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln120_1_fu_714_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln114_fu_579_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln120_1_fu_718_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_724_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln120_2_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln120_fu_736_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_741_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln116_1_fu_767_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_807_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_807_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_817_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_817_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_817_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_807_ce : STD_LOGIC;
    signal grp_fu_817_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_807_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_817_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln112_1_fu_395_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln112_fu_379_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component kernel_attention_mul_3ns_13ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component kernel_attention_mac_muladd_3ns_10ns_14ns_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component kernel_attention_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_3ns_13ns_14_1_1_U161 : component kernel_attention_mul_3ns_13ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 13,
        dout_WIDTH => 14)
    port map (
        din0 => mul_ln112_fu_379_p0,
        din1 => mul_ln112_fu_379_p1,
        dout => mul_ln112_fu_379_p2);

    mul_3ns_13ns_14_1_1_U162 : component kernel_attention_mul_3ns_13ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 13,
        dout_WIDTH => 14)
    port map (
        din0 => mul_ln112_1_fu_395_p0,
        din1 => mul_ln112_1_fu_395_p1,
        dout => mul_ln112_1_fu_395_p2);

    mac_muladd_3ns_10ns_14ns_14_4_1_U163 : component kernel_attention_mac_muladd_3ns_10ns_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 10,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_807_p0,
        din1 => grp_fu_807_p1,
        din2 => mul_ln112_fu_379_p2,
        ce => grp_fu_807_ce,
        dout => grp_fu_807_p3);

    mac_muladd_3ns_10ns_14ns_14_4_1_U164 : component kernel_attention_mac_muladd_3ns_10ns_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 10,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_817_p0,
        din1 => grp_fu_817_p1,
        din2 => grp_fu_817_p2,
        ce => grp_fu_817_ce,
        dout => grp_fu_817_p3);

    flow_control_loop_pipe_sequential_init_U : component kernel_attention_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i_fu_150 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln110_reg_905_pp0_iter2_reg = ap_const_lv1_0))) then 
                    i_fu_150 <= select_ln110_fu_408_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten2812_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    indvar_flatten2812_fu_130 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln110_reg_905_pp0_iter3_reg = ap_const_lv1_0))) then 
                    indvar_flatten2812_fu_130 <= select_ln116_3_fu_773_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten2834_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten2834_fu_138 <= ap_const_lv11_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln110_fu_250_p2 = ap_const_lv1_0))) then 
                    indvar_flatten2834_fu_138 <= select_ln114_4_fu_330_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten2873_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten2873_fu_146 <= ap_const_lv13_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln110_fu_250_p2 = ap_const_lv1_0))) then 
                    indvar_flatten2873_fu_146 <= select_ln112_8_fu_344_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten2925_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten2925_fu_154 <= ap_const_lv14_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln110_fu_250_p2 = ap_const_lv1_0))) then 
                    indvar_flatten2925_fu_154 <= add_ln110_fu_256_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_142 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln110_fu_250_p2 = ap_const_lv1_0))) then 
                    j_fu_142 <= select_ln112_7_fu_316_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    k_fu_134 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln110_reg_905_pp0_iter3_reg = ap_const_lv1_0))) then 
                    k_fu_134 <= select_ln114_3_fu_603_p3;
                end if;
            end if; 
        end if;
    end process;

    l_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    l_fu_126 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln110_reg_905_pp0_iter3_reg = ap_const_lv1_0))) then 
                    l_fu_126 <= select_ln116_2_fu_666_p3;
                end if;
            end if; 
        end if;
    end process;

    m_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    m_fu_122 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln110_reg_905_pp0_iter3_reg = ap_const_lv1_0))) then 
                    m_fu_122 <= add_ln118_fu_761_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln110_fu_250_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln112_2_reg_930 <= and_ln112_2_fu_294_p2;
                icmp_ln112_reg_909 <= icmp_ln112_fu_268_p2;
                icmp_ln114_reg_925 <= icmp_ln114_fu_288_p2;
                or_ln112_reg_937 <= or_ln112_fu_306_p2;
                xor_ln112_reg_919 <= xor_ln112_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln112_2_reg_930_pp0_iter2_reg <= and_ln112_2_reg_930;
                and_ln112_2_reg_930_pp0_iter3_reg <= and_ln112_2_reg_930_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln110_reg_905_pp0_iter2_reg <= icmp_ln110_reg_905;
                icmp_ln110_reg_905_pp0_iter3_reg <= icmp_ln110_reg_905_pp0_iter2_reg;
                icmp_ln110_reg_905_pp0_iter4_reg <= icmp_ln110_reg_905_pp0_iter3_reg;
                icmp_ln112_reg_909_pp0_iter2_reg <= icmp_ln112_reg_909;
                icmp_ln112_reg_909_pp0_iter3_reg <= icmp_ln112_reg_909_pp0_iter2_reg;
                icmp_ln114_reg_925_pp0_iter2_reg <= icmp_ln114_reg_925;
                icmp_ln114_reg_925_pp0_iter3_reg <= icmp_ln114_reg_925_pp0_iter2_reg;
                or_ln112_reg_937_pp0_iter2_reg <= or_ln112_reg_937;
                or_ln112_reg_937_pp0_iter3_reg <= or_ln112_reg_937_pp0_iter2_reg;
                xor_ln112_reg_919_pp0_iter2_reg <= xor_ln112_reg_919;
                xor_ln112_reg_919_pp0_iter3_reg <= xor_ln112_reg_919_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln110_reg_905 <= icmp_ln110_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln110_reg_905_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_15_reg_964 <= sext_ln122_fu_751_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln110_reg_905_pp0_iter4_reg = ap_const_lv1_0))) then
                gmem_addr_read_reg_970 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln110_reg_905_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln112_1_reg_953 <= mul_ln112_1_fu_395_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln110_1_fu_385_p2 <= std_logic_vector(unsigned(i_fu_150) + unsigned(ap_const_lv3_1));
    add_ln110_fu_256_p2 <= std_logic_vector(unsigned(indvar_flatten2925_fu_154) + unsigned(ap_const_lv14_1));
    add_ln112_1_fu_338_p2 <= std_logic_vector(unsigned(indvar_flatten2873_fu_146) + unsigned(ap_const_lv13_1));
    add_ln112_fu_300_p2 <= std_logic_vector(unsigned(select_ln112_fu_274_p3) + unsigned(ap_const_lv3_1));
    add_ln114_1_fu_324_p2 <= std_logic_vector(unsigned(indvar_flatten2834_fu_138) + unsigned(ap_const_lv11_1));
    add_ln114_fu_537_p2 <= std_logic_vector(unsigned(select_ln112_4_fu_496_p3) + unsigned(ap_const_lv5_1));
    add_ln116_1_fu_767_p2 <= std_logic_vector(unsigned(indvar_flatten2812_fu_130) + unsigned(ap_const_lv6_1));
    add_ln116_fu_611_p2 <= std_logic_vector(unsigned(select_ln114_fu_553_p3) + unsigned(ap_const_lv3_1));
    add_ln118_fu_761_p2 <= std_logic_vector(unsigned(select_ln116_fu_628_p3) + unsigned(ap_const_lv3_1));
    add_ln120_1_fu_718_p2 <= std_logic_vector(signed(sext_ln120_1_fu_714_p1) + signed(zext_ln114_fu_579_p1));
    add_ln120_2_fu_430_p2 <= std_logic_vector(unsigned(grp_fu_807_p3) + unsigned(zext_ln116_fu_426_p1));
    add_ln120_3_fu_708_p2 <= std_logic_vector(signed(sext_ln121_fu_692_p1) + signed(sext_ln120_fu_704_p1));
    add_ln120_4_fu_565_p2 <= std_logic_vector(unsigned(select_ln112_5_fu_503_p3) + unsigned(zext_ln116_2_fu_561_p1));
    add_ln120_fu_736_p2 <= std_logic_vector(signed(sext_ln120_2_fu_732_p1) + signed(afterRearrangeX2));
    add_ln121_fu_678_p2 <= std_logic_vector(unsigned(zext_ln121_fu_674_p1) + unsigned(select_ln116_1_fu_658_p3));
    and_ln112_1_fu_491_p2 <= (xor_ln112_reg_919_pp0_iter3_reg and icmp_ln116_fu_485_p2);
    and_ln112_2_fu_294_p2 <= (xor_ln112_fu_282_p2 and icmp_ln114_fu_288_p2);
    and_ln112_3_fu_525_p2 <= (or_ln112_1_fu_520_p2 and and_ln112_fu_480_p2);
    and_ln112_4_fu_531_p2 <= (or_ln112_1_fu_520_p2 and and_ln112_1_fu_491_p2);
    and_ln112_fu_480_p2 <= (xor_ln112_reg_919_pp0_iter3_reg and icmp_ln118_fu_474_p2);
    and_ln114_fu_597_p2 <= (xor_ln114_fu_591_p2 and and_ln112_3_fu_525_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter11, m_axi_gmem_RVALID, m_axi_gmem_BVALID, icmp_ln110_reg_905_pp0_iter4_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln110_reg_905_pp0_iter4_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter11, m_axi_gmem_WREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, icmp_ln110_reg_905_pp0_iter4_reg, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state6_io) or ((icmp_ln110_reg_905_pp0_iter4_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter11, m_axi_gmem_WREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, icmp_ln110_reg_905_pp0_iter4_reg, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state6_io) or ((icmp_ln110_reg_905_pp0_iter4_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter11_assign_proc : process(m_axi_gmem_BVALID)
    begin
                ap_block_state12_pp0_stage0_iter11 <= (m_axi_gmem_BVALID = ap_const_logic_0);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(m_axi_gmem_AWREADY, icmp_ln110_reg_905_pp0_iter4_reg)
    begin
                ap_block_state6_io <= ((m_axi_gmem_AWREADY = ap_const_logic_0) and (icmp_ln110_reg_905_pp0_iter4_reg = ap_const_lv1_0));
    end process;


    ap_block_state6_pp0_stage0_iter5_assign_proc : process(m_axi_gmem_RVALID, icmp_ln110_reg_905_pp0_iter4_reg)
    begin
                ap_block_state6_pp0_stage0_iter5 <= ((icmp_ln110_reg_905_pp0_iter4_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln110_fu_250_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln110_fu_250_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter5_stage0_assign_proc : process(ap_enable_reg_pp0_iter5, icmp_ln110_reg_905_pp0_iter4_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln110_reg_905_pp0_iter4_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter5, m_axi_gmem_AWREADY, icmp_ln110_reg_905_pp0_iter4_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln110_reg_905_pp0_iter4_reg = ap_const_lv1_0))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter11, m_axi_gmem_BVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter5, m_axi_gmem_RVALID, icmp_ln110_reg_905_pp0_iter4_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln110_reg_905_pp0_iter4_reg = ap_const_lv1_0))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter6, m_axi_gmem_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_807_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_807_ce <= ap_const_logic_1;
        else 
            grp_fu_807_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_807_p0 <= grp_fu_807_p00(3 - 1 downto 0);
    grp_fu_807_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_142),13));
    grp_fu_807_p1 <= ap_const_lv13_3D4(10 - 1 downto 0);

    grp_fu_817_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_817_ce <= ap_const_logic_1;
        else 
            grp_fu_817_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_817_p0 <= grp_fu_817_p00(3 - 1 downto 0);
    grp_fu_817_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln112_fu_300_p2),13));
    grp_fu_817_p1 <= ap_const_lv13_3D4(10 - 1 downto 0);
    grp_fu_817_p2 <= 
        mul_ln112_1_fu_395_p2 when (icmp_ln112_reg_909_pp0_iter2_reg(0) = '1') else 
        mul_ln112_fu_379_p2;
    icmp_ln110_fu_250_p2 <= "1" when (indvar_flatten2925_fu_154 = ap_const_lv14_3D40) else "0";
    icmp_ln112_fu_268_p2 <= "1" when (indvar_flatten2873_fu_146 = ap_const_lv13_F50) else "0";
    icmp_ln114_fu_288_p2 <= "1" when (indvar_flatten2834_fu_138 = ap_const_lv11_3D4) else "0";
    icmp_ln116_fu_485_p2 <= "1" when (indvar_flatten2812_fu_130 = ap_const_lv6_31) else "0";
    icmp_ln118_fu_474_p2 <= "1" when (m_fu_122 = ap_const_lv3_7) else "0";
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= gmem_addr_15_reg_964;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_1;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter5, icmp_ln110_reg_905_pp0_iter4_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln110_reg_905_pp0_iter4_reg = ap_const_lv1_0))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter5, icmp_ln110_reg_905_pp0_iter4_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln110_reg_905_pp0_iter4_reg = ap_const_lv1_0))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= gmem_addr_read_reg_970;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln112_1_fu_395_p0 <= mul_ln112_1_fu_395_p00(3 - 1 downto 0);
    mul_ln112_1_fu_395_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln110_1_fu_385_p2),14));
    mul_ln112_1_fu_395_p1 <= ap_const_lv14_F50(13 - 1 downto 0);
    mul_ln112_fu_379_p0 <= mul_ln112_fu_379_p00(3 - 1 downto 0);
    mul_ln112_fu_379_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_150),14));
    mul_ln112_fu_379_p1 <= ap_const_lv14_F50(13 - 1 downto 0);
    or_ln112_1_fu_520_p2 <= (xor_ln112_1_fu_515_p2 or icmp_ln112_reg_909_pp0_iter3_reg);
    or_ln112_fu_306_p2 <= (icmp_ln112_fu_268_p2 or and_ln112_2_fu_294_p2);
    or_ln114_1_fu_548_p2 <= (or_ln114_fu_543_p2 or icmp_ln112_reg_909_pp0_iter3_reg);
    or_ln114_fu_543_p2 <= (and_ln112_4_fu_531_p2 or and_ln112_2_reg_930_pp0_iter3_reg);
    or_ln116_1_fu_623_p2 <= (or_ln116_fu_617_p2 or or_ln112_reg_937_pp0_iter3_reg);
    or_ln116_fu_617_p2 <= (and_ln114_fu_597_p2 or and_ln112_4_fu_531_p2);
    p_shl5_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_439_p3),7));
    p_shl5_cast_mid1_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_mid1_fu_640_p3),7));
    p_shl5_fu_439_p3 <= (l_fu_126 & ap_const_lv3_0);
    p_shl5_mid1_fu_640_p3 <= (add_ln116_fu_611_p2 & ap_const_lv3_0);
    select_ln110_fu_408_p3 <= 
        add_ln110_1_fu_385_p2 when (icmp_ln112_reg_909_pp0_iter2_reg(0) = '1') else 
        i_fu_150;
    select_ln112_2_fu_463_p3 <= 
        mul_ln112_1_reg_953 when (icmp_ln112_reg_909_pp0_iter3_reg(0) = '1') else 
        grp_fu_807_p3;
    select_ln112_3_fu_468_p3 <= 
        mul_ln112_1_reg_953 when (icmp_ln112_reg_909_pp0_iter3_reg(0) = '1') else 
        add_ln120_2_fu_430_p2;
    select_ln112_4_fu_496_p3 <= 
        ap_const_lv5_0 when (or_ln112_reg_937_pp0_iter3_reg(0) = '1') else 
        k_fu_134;
    select_ln112_5_fu_503_p3 <= 
        grp_fu_817_p3 when (and_ln112_2_reg_930_pp0_iter3_reg(0) = '1') else 
        select_ln112_2_fu_463_p3;
    select_ln112_6_fu_509_p3 <= 
        grp_fu_817_p3 when (and_ln112_2_reg_930_pp0_iter3_reg(0) = '1') else 
        select_ln112_3_fu_468_p3;
    select_ln112_7_fu_316_p3 <= 
        add_ln112_fu_300_p2 when (and_ln112_2_fu_294_p2(0) = '1') else 
        select_ln112_fu_274_p3;
    select_ln112_8_fu_344_p3 <= 
        ap_const_lv13_1 when (icmp_ln112_fu_268_p2(0) = '1') else 
        add_ln112_1_fu_338_p2;
    select_ln112_fu_274_p3 <= 
        ap_const_lv3_0 when (icmp_ln112_fu_268_p2(0) = '1') else 
        j_fu_142;
    select_ln114_1_fu_571_p3 <= 
        add_ln120_4_fu_565_p2 when (and_ln112_4_fu_531_p2(0) = '1') else 
        select_ln112_6_fu_509_p3;
    select_ln114_2_fu_583_p3 <= 
        ap_const_lv7_0 when (or_ln114_1_fu_548_p2(0) = '1') else 
        sub_ln121_fu_451_p2;
    select_ln114_3_fu_603_p3 <= 
        add_ln114_fu_537_p2 when (and_ln112_4_fu_531_p2(0) = '1') else 
        select_ln112_4_fu_496_p3;
    select_ln114_4_fu_330_p3 <= 
        ap_const_lv11_1 when (or_ln112_fu_306_p2(0) = '1') else 
        add_ln114_1_fu_324_p2;
    select_ln114_fu_553_p3 <= 
        ap_const_lv3_0 when (or_ln114_1_fu_548_p2(0) = '1') else 
        l_fu_126;
    select_ln116_1_fu_658_p3 <= 
        sub_ln121_1_fu_652_p2 when (and_ln114_fu_597_p2(0) = '1') else 
        select_ln114_2_fu_583_p3;
    select_ln116_2_fu_666_p3 <= 
        add_ln116_fu_611_p2 when (and_ln114_fu_597_p2(0) = '1') else 
        select_ln114_fu_553_p3;
    select_ln116_3_fu_773_p3 <= 
        ap_const_lv6_1 when (or_ln114_1_fu_548_p2(0) = '1') else 
        add_ln116_1_fu_767_p2;
    select_ln116_fu_628_p3 <= 
        ap_const_lv3_0 when (or_ln116_1_fu_623_p2(0) = '1') else 
        m_fu_122;
        sext_ln120_1_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln120_3_fu_708_p2),15));

        sext_ln120_2_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_724_p3),64));

        sext_ln120_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln121_1_fu_696_p3),12));

        sext_ln121_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_684_p3),12));

        sext_ln122_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_741_p4),64));

    shl_ln121_1_fu_696_p3 <= (add_ln121_fu_678_p2 & ap_const_lv4_0);
    shl_ln_fu_684_p3 <= (add_ln121_fu_678_p2 & ap_const_lv2_0);
    sub_ln121_1_fu_652_p2 <= std_logic_vector(unsigned(p_shl5_cast_mid1_fu_648_p1) - unsigned(zext_ln116_3_fu_636_p1));
    sub_ln121_fu_451_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_447_p1) - unsigned(zext_ln116_1_fu_435_p1));
    tmp_s_fu_724_p3 <= (add_ln120_1_fu_718_p2 & ap_const_lv2_0);
    trunc_ln_fu_741_p4 <= add_ln120_fu_736_p2(63 downto 2);
    xor_ln112_1_fu_515_p2 <= (icmp_ln114_reg_925_pp0_iter3_reg xor ap_const_lv1_1);
    xor_ln112_fu_282_p2 <= (icmp_ln112_fu_268_p2 xor ap_const_lv1_1);
    xor_ln114_fu_591_p2 <= (ap_const_lv1_1 xor and_ln112_4_fu_531_p2);
    zext_ln114_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln114_1_fu_571_p3),15));
    zext_ln116_1_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_fu_126),7));
    zext_ln116_2_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_fu_537_p2),14));
    zext_ln116_3_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln116_fu_611_p2),7));
    zext_ln116_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_134),14));
    zext_ln121_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln116_fu_628_p3),7));
end behav;
