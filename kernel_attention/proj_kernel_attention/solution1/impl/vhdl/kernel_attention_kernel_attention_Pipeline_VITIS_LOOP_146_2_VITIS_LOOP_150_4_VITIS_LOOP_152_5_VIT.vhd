-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_attention_kernel_attention_Pipeline_VITIS_LOOP_146_2_VITIS_LOOP_150_4_VITIS_LOOP_152_5_VIT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln146 : IN STD_LOGIC_VECTOR (61 downto 0);
    buffer_out : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel_attention_kernel_attention_Pipeline_VITIS_LOOP_146_2_VITIS_LOOP_150_4_VITIS_LOOP_152_5_VIT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_C4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_B7C0 : STD_LOGIC_VECTOR (15 downto 0) := "1011011111000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_5BE0 : STD_LOGIC_VECTOR (15 downto 0) := "0101101111100000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv14_2DF0 : STD_LOGIC_VECTOR (13 downto 0) := "10110111110000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln146_reg_1018 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln146_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal gmem_addr_18_reg_1022 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_read_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal sext_ln157_fu_836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal n_1_fu_130 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln154_fu_846_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal m_fu_134 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln152_2_fu_773_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten3135_fu_138 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln152_3_fu_858_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal l_fu_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln150_3_fu_687_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten3170_fu_146 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln150_4_fu_872_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_fu_150 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln148_3_fu_593_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten3220_fu_154 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln148_4_fu_886_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_fu_158 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln146_1_fu_375_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten3278_fu_162 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln146_fu_334_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_268_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_268_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_268_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_284_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln146_fu_260_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_110_fu_292_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl8_fu_298_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl9_fu_310_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl18_cast_fu_306_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl19_cast_fu_318_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln148_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln146_1_fu_369_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_274_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln157_s_fu_387_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_403_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_415_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_26_cast_fu_411_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln157_1_fu_423_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln157_1_fu_427_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln146_1_fu_433_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln157_fu_322_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln154_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln146_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln152_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln146_fu_361_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln146_2_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln148_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln148_fu_487_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln157_2_mid_fu_507_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln148_1_fu_515_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln146_2_fu_395_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl18_mid_fu_527_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl19_mid_fu_539_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl18_mid_cast_fu_535_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln157_2_fu_547_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln157_2_fu_551_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln148_fu_557_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln146_3_fu_437_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln148_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln146_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln148_1_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln146_1_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln148_fu_499_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln148_1_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln150_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln150_1_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln150_fu_601_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid13146_fu_631_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid13146_fu_631_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid13146_fu_631_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_mid1_fu_637_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln157_2_mid1_fu_647_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln148_1_fu_519_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln150_1_fu_655_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln148_2_fu_561_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln148_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln150_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln150_fu_619_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln150_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln152_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln152_1_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln152_fu_695_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_mid2_fu_721_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln148_fu_383_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid13133_fu_729_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl18_mid1_fu_735_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl19_mid1_fu_747_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl18_cast_mid1_fu_743_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl19_cast_mid1_fu_755_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln157_3_fu_759_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln150_2_fu_667_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln152_fu_713_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln1_fu_781_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln152_1_fu_765_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln157_fu_789_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln157_fu_793_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln157_1_fu_799_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln150_2_fu_663_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln157_1_fu_803_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_809_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln157_2_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln157_2_fu_821_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_826_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln152_1_fu_852_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln150_1_fu_866_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln148_1_fu_880_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal empty_fu_268_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_mid13146_fu_631_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component kernel_attention_mul_8ns_9ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component kernel_attention_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8ns_9ns_16_1_1_U186 : component kernel_attention_mul_8ns_9ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        din0 => empty_fu_268_p0,
        din1 => empty_fu_268_p1,
        dout => empty_fu_268_p2);

    mul_8ns_9ns_16_1_1_U187 : component kernel_attention_mul_8ns_9ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        din0 => p_mid13146_fu_631_p0,
        din1 => p_mid13146_fu_631_p1,
        dout => p_mid13146_fu_631_p2);

    flow_control_loop_pipe_sequential_init_U : component kernel_attention_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten3135_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten3135_fu_138 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln146_fu_328_p2 = ap_const_lv1_0))) then 
                    indvar_flatten3135_fu_138 <= select_ln152_3_fu_858_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten3170_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten3170_fu_146 <= ap_const_lv14_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln146_fu_328_p2 = ap_const_lv1_0))) then 
                    indvar_flatten3170_fu_146 <= select_ln150_4_fu_872_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten3220_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten3220_fu_154 <= ap_const_lv16_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln146_fu_328_p2 = ap_const_lv1_0))) then 
                    indvar_flatten3220_fu_154 <= select_ln148_4_fu_886_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten3278_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten3278_fu_162 <= ap_const_lv16_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln146_fu_328_p2 = ap_const_lv1_0))) then 
                    indvar_flatten3278_fu_162 <= add_ln146_fu_334_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_158 <= ap_const_lv2_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln146_fu_328_p2 = ap_const_lv1_0))) then 
                    j_fu_158 <= select_ln146_1_fu_375_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_150 <= ap_const_lv2_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln146_fu_328_p2 = ap_const_lv1_0))) then 
                    k_fu_150 <= select_ln148_3_fu_593_p3;
                end if;
            end if; 
        end if;
    end process;

    l_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    l_fu_142 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln146_fu_328_p2 = ap_const_lv1_0))) then 
                    l_fu_142 <= select_ln150_3_fu_687_p3;
                end if;
            end if; 
        end if;
    end process;

    m_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    m_fu_134 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln146_fu_328_p2 = ap_const_lv1_0))) then 
                    m_fu_134 <= select_ln152_2_fu_773_p3;
                end if;
            end if; 
        end if;
    end process;

    n_1_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    n_1_fu_130 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln146_fu_328_p2 = ap_const_lv1_0))) then 
                    n_1_fu_130 <= add_ln154_fu_846_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln146_reg_1018 <= icmp_ln146_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln146_fu_328_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_18_reg_1022 <= sext_ln157_fu_836_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln146_reg_1018 = ap_const_lv1_0))) then
                gmem_addr_read_reg_1028 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln146_1_fu_369_p2 <= std_logic_vector(unsigned(j_fu_158) + unsigned(ap_const_lv2_1));
    add_ln146_fu_334_p2 <= std_logic_vector(unsigned(indvar_flatten3278_fu_162) + unsigned(ap_const_lv16_1));
    add_ln148_1_fu_880_p2 <= std_logic_vector(unsigned(indvar_flatten3220_fu_154) + unsigned(ap_const_lv16_1));
    add_ln148_fu_487_p2 <= std_logic_vector(unsigned(select_ln146_fu_361_p3) + unsigned(ap_const_lv2_1));
    add_ln150_1_fu_866_p2 <= std_logic_vector(unsigned(indvar_flatten3170_fu_146) + unsigned(ap_const_lv14_1));
    add_ln150_fu_601_p2 <= std_logic_vector(unsigned(select_ln148_fu_499_p3) + unsigned(ap_const_lv8_1));
    add_ln152_1_fu_852_p2 <= std_logic_vector(unsigned(indvar_flatten3135_fu_138) + unsigned(ap_const_lv6_1));
    add_ln152_fu_695_p2 <= std_logic_vector(unsigned(select_ln150_fu_619_p3) + unsigned(ap_const_lv3_1));
    add_ln154_fu_846_p2 <= std_logic_vector(unsigned(select_ln152_fu_713_p3) + unsigned(ap_const_lv3_1));
    add_ln157_1_fu_803_p2 <= std_logic_vector(signed(sext_ln157_1_fu_799_p1) + signed(zext_ln150_2_fu_663_p1));
    add_ln157_2_fu_821_p2 <= std_logic_vector(signed(sext_ln157_2_fu_817_p1) + signed(buffer_out));
    add_ln157_fu_793_p2 <= std_logic_vector(unsigned(select_ln152_1_fu_765_p3) + unsigned(zext_ln157_fu_789_p1));
    and_ln146_1_fu_469_p2 <= (xor_ln146_fu_445_p2 and icmp_ln152_fu_463_p2);
    and_ln146_2_fu_481_p2 <= (xor_ln146_fu_445_p2 and icmp_ln150_fu_475_p2);
    and_ln146_fu_457_p2 <= (xor_ln146_fu_445_p2 and icmp_ln154_fu_451_p2);
    and_ln148_1_fu_587_p2 <= (or_ln148_1_fu_575_p2 and and_ln146_1_fu_469_p2);
    and_ln148_fu_581_p2 <= (or_ln148_1_fu_575_p2 and and_ln146_fu_457_p2);
    and_ln150_fu_681_p2 <= (xor_ln150_fu_675_p2 and and_ln148_fu_581_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter8, m_axi_gmem_RVALID, m_axi_gmem_BVALID, icmp_ln146_reg_1018)
    begin
                ap_block_pp0_stage0_01001 <= (((m_axi_gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln146_reg_1018 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, m_axi_gmem_WREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, icmp_ln146_reg_1018, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln146_reg_1018 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, m_axi_gmem_WREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, icmp_ln146_reg_1018, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_gmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln146_reg_1018 = ap_const_lv1_0)))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_gmem_AWREADY, icmp_ln146_reg_1018)
    begin
                ap_block_state3_io <= ((m_axi_gmem_AWREADY = ap_const_logic_0) and (icmp_ln146_reg_1018 = ap_const_lv1_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(m_axi_gmem_RVALID, icmp_ln146_reg_1018)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln146_reg_1018 = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter8_assign_proc : process(m_axi_gmem_BVALID)
    begin
                ap_block_state9_pp0_stage0_iter8 <= (m_axi_gmem_BVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln146_fu_328_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln146_fu_328_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln146_reg_1018, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln146_reg_1018 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_110_fu_292_p2 <= std_logic_vector(unsigned(tmp_s_fu_284_p3) + unsigned(zext_ln146_fu_260_p1));
    empty_fu_268_p0 <= empty_fu_268_p00(8 - 1 downto 0);
    empty_fu_268_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_fu_142),16));
    empty_fu_268_p1 <= ap_const_lv16_C4(9 - 1 downto 0);

    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_AWREADY, icmp_ln146_reg_1018, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln146_reg_1018 = ap_const_lv1_0))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter8, m_axi_gmem_BVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_RVALID, icmp_ln146_reg_1018, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln146_reg_1018 = ap_const_lv1_0))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_gmem_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln146_fu_328_p2 <= "1" when (indvar_flatten3278_fu_162 = ap_const_lv16_B7C0) else "0";
    icmp_ln148_fu_355_p2 <= "1" when (indvar_flatten3220_fu_154 = ap_const_lv16_5BE0) else "0";
    icmp_ln150_fu_475_p2 <= "1" when (indvar_flatten3170_fu_146 = ap_const_lv14_2DF0) else "0";
    icmp_ln152_fu_463_p2 <= "1" when (indvar_flatten3135_fu_138 = ap_const_lv6_31) else "0";
    icmp_ln154_fu_451_p2 <= "1" when (n_1_fu_130 = ap_const_lv3_7) else "0";
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= gmem_addr_18_reg_1022;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_1;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln146_reg_1018, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln146_reg_1018 = ap_const_lv1_0))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln146_reg_1018, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln146_reg_1018 = ap_const_lv1_0))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= gmem_addr_read_reg_1028;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln148_1_fu_575_p2 <= (xor_ln148_fu_569_p2 or icmp_ln148_fu_355_p2);
    or_ln148_fu_493_p2 <= (icmp_ln148_fu_355_p2 or and_ln146_2_fu_481_p2);
    or_ln150_1_fu_613_p2 <= (or_ln150_fu_607_p2 or icmp_ln148_fu_355_p2);
    or_ln150_fu_607_p2 <= (and_ln148_1_fu_587_p2 or and_ln146_2_fu_481_p2);
    or_ln152_1_fu_707_p2 <= (or_ln152_fu_701_p2 or or_ln148_fu_493_p2);
    or_ln152_fu_701_p2 <= (and_ln150_fu_681_p2 or and_ln148_1_fu_587_p2);
    p_mid13133_fu_729_p2 <= std_logic_vector(unsigned(p_mid2_fu_721_p3) + unsigned(zext_ln148_fu_383_p1));
    p_mid13146_fu_631_p0 <= p_mid13146_fu_631_p00(8 - 1 downto 0);
    p_mid13146_fu_631_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln150_fu_601_p2),16));
    p_mid13146_fu_631_p1 <= ap_const_lv16_C4(9 - 1 downto 0);
    p_mid2_fu_721_p3 <= (add_ln152_fu_695_p2 & ap_const_lv1_0);
    p_shl18_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_298_p3),9));
    p_shl18_cast_mid1_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl18_mid1_fu_735_p3),9));
    p_shl18_mid1_fu_735_p3 <= (p_mid13133_fu_729_p2 & ap_const_lv4_0);
    p_shl18_mid_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl18_mid_fu_527_p3),7));
    p_shl18_mid_fu_527_p3 <= (select_ln146_1_fu_375_p3 & ap_const_lv4_0);
    p_shl19_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_310_p3),9));
    p_shl19_cast_mid1_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl19_mid1_fu_747_p3),9));
    p_shl19_mid1_fu_747_p3 <= (p_mid13133_fu_729_p2 & ap_const_lv1_0);
    p_shl19_mid_fu_539_p3 <= (select_ln146_1_fu_375_p3 & ap_const_lv1_0);
    p_shl8_fu_298_p3 <= (empty_110_fu_292_p2 & ap_const_lv4_0);
    p_shl9_fu_310_p3 <= (empty_110_fu_292_p2 & ap_const_lv1_0);
    select_ln146_1_fu_375_p3 <= 
        add_ln146_1_fu_369_p2 when (icmp_ln148_fu_355_p2(0) = '1') else 
        j_fu_158;
    select_ln146_2_fu_395_p3 <= 
        ap_const_lv16_0 when (icmp_ln148_fu_355_p2(0) = '1') else 
        trunc_ln157_s_fu_387_p3;
    select_ln146_3_fu_437_p3 <= 
        sext_ln146_1_fu_433_p1 when (icmp_ln148_fu_355_p2(0) = '1') else 
        sub_ln157_fu_322_p2;
    select_ln146_fu_361_p3 <= 
        ap_const_lv2_0 when (icmp_ln148_fu_355_p2(0) = '1') else 
        k_fu_150;
    select_ln148_1_fu_519_p3 <= 
        zext_ln148_1_fu_515_p1 when (and_ln146_2_fu_481_p2(0) = '1') else 
        select_ln146_2_fu_395_p3;
    select_ln148_2_fu_561_p3 <= 
        sext_ln148_fu_557_p1 when (and_ln146_2_fu_481_p2(0) = '1') else 
        select_ln146_3_fu_437_p3;
    select_ln148_3_fu_593_p3 <= 
        add_ln148_fu_487_p2 when (and_ln146_2_fu_481_p2(0) = '1') else 
        select_ln146_fu_361_p3;
    select_ln148_4_fu_886_p3 <= 
        ap_const_lv16_1 when (icmp_ln148_fu_355_p2(0) = '1') else 
        add_ln148_1_fu_880_p2;
    select_ln148_fu_499_p3 <= 
        ap_const_lv8_0 when (or_ln148_fu_493_p2(0) = '1') else 
        l_fu_142;
    select_ln150_1_fu_655_p3 <= 
        trunc_ln157_2_mid1_fu_647_p3 when (and_ln148_1_fu_587_p2(0) = '1') else 
        select_ln148_1_fu_519_p3;
    select_ln150_2_fu_667_p3 <= 
        sext_ln148_fu_557_p1 when (and_ln148_1_fu_587_p2(0) = '1') else 
        select_ln148_2_fu_561_p3;
    select_ln150_3_fu_687_p3 <= 
        add_ln150_fu_601_p2 when (and_ln148_1_fu_587_p2(0) = '1') else 
        select_ln148_fu_499_p3;
    select_ln150_4_fu_872_p3 <= 
        ap_const_lv14_1 when (or_ln148_fu_493_p2(0) = '1') else 
        add_ln150_1_fu_866_p2;
    select_ln150_fu_619_p3 <= 
        ap_const_lv3_0 when (or_ln150_1_fu_613_p2(0) = '1') else 
        m_fu_134;
    select_ln152_1_fu_765_p3 <= 
        sub_ln157_3_fu_759_p2 when (and_ln150_fu_681_p2(0) = '1') else 
        select_ln150_2_fu_667_p3;
    select_ln152_2_fu_773_p3 <= 
        add_ln152_fu_695_p2 when (and_ln150_fu_681_p2(0) = '1') else 
        select_ln150_fu_619_p3;
    select_ln152_3_fu_858_p3 <= 
        ap_const_lv6_1 when (or_ln150_1_fu_613_p2(0) = '1') else 
        add_ln152_1_fu_852_p2;
    select_ln152_fu_713_p3 <= 
        ap_const_lv3_0 when (or_ln152_1_fu_707_p2(0) = '1') else 
        n_1_fu_130;
        sext_ln146_1_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln157_1_fu_427_p2),9));

        sext_ln148_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln157_2_fu_551_p2),9));

        sext_ln157_1_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln157_fu_793_p2),17));

        sext_ln157_2_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_809_p3),64));

        sext_ln157_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_826_p4),64));

    shl_ln1_fu_781_p3 <= (select_ln152_fu_713_p3 & ap_const_lv1_0);
    sub_ln157_1_fu_427_p2 <= std_logic_vector(unsigned(tmp_26_cast_fu_411_p1) - unsigned(zext_ln157_1_fu_423_p1));
    sub_ln157_2_fu_551_p2 <= std_logic_vector(unsigned(p_shl18_mid_cast_fu_535_p1) - unsigned(zext_ln157_2_fu_547_p1));
    sub_ln157_3_fu_759_p2 <= std_logic_vector(unsigned(p_shl18_cast_mid1_fu_743_p1) - unsigned(p_shl19_cast_mid1_fu_755_p1));
    sub_ln157_fu_322_p2 <= std_logic_vector(unsigned(p_shl18_cast_fu_306_p1) - unsigned(p_shl19_cast_fu_318_p1));
    tmp_10_fu_809_p3 <= (add_ln157_1_fu_803_p2 & ap_const_lv2_0);
    tmp_26_cast_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_403_p3),7));
    tmp_4_fu_274_p4 <= empty_fu_268_p2(15 downto 2);
    tmp_4_mid1_fu_637_p4 <= p_mid13146_fu_631_p2(15 downto 2);
    tmp_8_fu_403_p3 <= (add_ln146_1_fu_369_p2 & ap_const_lv4_0);
    tmp_9_fu_415_p3 <= (add_ln146_1_fu_369_p2 & ap_const_lv1_0);
    tmp_s_fu_284_p3 <= (m_fu_134 & ap_const_lv1_0);
    trunc_ln157_2_mid1_fu_647_p3 <= (tmp_4_mid1_fu_637_p4 & select_ln148_3_fu_593_p3);
    trunc_ln157_2_mid_fu_507_p3 <= (ap_const_lv1_0 & add_ln148_fu_487_p2);
    trunc_ln157_s_fu_387_p3 <= (tmp_4_fu_274_p4 & k_fu_150);
    trunc_ln_fu_826_p4 <= add_ln157_2_fu_821_p2(63 downto 2);
    xor_ln146_fu_445_p2 <= (icmp_ln148_fu_355_p2 xor ap_const_lv1_1);
    xor_ln148_fu_569_p2 <= (icmp_ln150_fu_475_p2 xor ap_const_lv1_1);
    xor_ln150_fu_675_p2 <= (ap_const_lv1_1 xor and_ln148_1_fu_587_p2);
    zext_ln146_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_158),4));
    zext_ln148_1_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln157_2_mid_fu_507_p3),16));
    zext_ln148_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln146_1_fu_375_p3),4));
    zext_ln150_2_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln150_1_fu_655_p3),17));
    zext_ln157_1_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_415_p3),7));
    zext_ln157_2_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl19_mid_fu_539_p3),7));
    zext_ln157_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_781_p3),9));
end behav;
