// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_attention_kernel_attention_Pipeline_VITIS_LOOP_146_2_VITIS_LOOP_150_4_VITIS_LOOP_152_5_VIT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        sext_ln146,
        buffer_out
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [61:0] sext_ln146;
input  [63:0] buffer_out;

reg ap_idle;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln146_reg_1018;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln146_fu_328_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_AW;
reg    gmem_blk_n_W;
reg    gmem_blk_n_B;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] gmem_addr_18_reg_1022;
reg   [31:0] gmem_addr_read_reg_1028;
reg    ap_condition_exit_pp0_iter2_stage0;
wire  signed [63:0] sext_ln157_fu_836_p1;
reg    ap_block_pp0_stage0_01001;
reg   [2:0] n_1_fu_130;
wire   [2:0] add_ln154_fu_846_p2;
wire    ap_loop_init;
reg   [2:0] m_fu_134;
wire   [2:0] select_ln152_2_fu_773_p3;
reg   [5:0] indvar_flatten3135_fu_138;
wire   [5:0] select_ln152_3_fu_858_p3;
reg   [7:0] l_fu_142;
wire   [7:0] select_ln150_3_fu_687_p3;
reg   [13:0] indvar_flatten3170_fu_146;
wire   [13:0] select_ln150_4_fu_872_p3;
reg   [1:0] k_fu_150;
wire   [1:0] select_ln148_3_fu_593_p3;
reg   [15:0] indvar_flatten3220_fu_154;
wire   [15:0] select_ln148_4_fu_886_p3;
reg   [1:0] j_fu_158;
wire   [1:0] select_ln146_1_fu_375_p3;
reg   [15:0] indvar_flatten3278_fu_162;
wire   [15:0] add_ln146_fu_334_p2;
wire   [7:0] empty_fu_268_p0;
wire   [8:0] empty_fu_268_p1;
wire   [15:0] empty_fu_268_p2;
wire   [3:0] tmp_s_fu_284_p3;
wire   [3:0] zext_ln146_fu_260_p1;
wire   [3:0] empty_110_fu_292_p2;
wire   [7:0] p_shl8_fu_298_p3;
wire   [4:0] p_shl9_fu_310_p3;
wire   [8:0] p_shl18_cast_fu_306_p1;
wire   [8:0] p_shl19_cast_fu_318_p1;
wire   [0:0] icmp_ln148_fu_355_p2;
wire   [1:0] add_ln146_1_fu_369_p2;
wire   [13:0] tmp_4_fu_274_p4;
wire   [15:0] trunc_ln157_s_fu_387_p3;
wire   [5:0] tmp_8_fu_403_p3;
wire   [2:0] tmp_9_fu_415_p3;
wire   [6:0] tmp_26_cast_fu_411_p1;
wire   [6:0] zext_ln157_1_fu_423_p1;
wire   [6:0] sub_ln157_1_fu_427_p2;
wire  signed [8:0] sext_ln146_1_fu_433_p1;
wire   [8:0] sub_ln157_fu_322_p2;
wire   [0:0] icmp_ln154_fu_451_p2;
wire   [0:0] xor_ln146_fu_445_p2;
wire   [0:0] icmp_ln152_fu_463_p2;
wire   [0:0] icmp_ln150_fu_475_p2;
wire   [1:0] select_ln146_fu_361_p3;
wire   [0:0] and_ln146_2_fu_481_p2;
wire   [0:0] or_ln148_fu_493_p2;
wire   [1:0] add_ln148_fu_487_p2;
wire   [2:0] trunc_ln157_2_mid_fu_507_p3;
wire   [15:0] zext_ln148_1_fu_515_p1;
wire   [15:0] select_ln146_2_fu_395_p3;
wire   [5:0] p_shl18_mid_fu_527_p3;
wire   [2:0] p_shl19_mid_fu_539_p3;
wire   [6:0] p_shl18_mid_cast_fu_535_p1;
wire   [6:0] zext_ln157_2_fu_547_p1;
wire   [6:0] sub_ln157_2_fu_551_p2;
wire  signed [8:0] sext_ln148_fu_557_p1;
wire   [8:0] select_ln146_3_fu_437_p3;
wire   [0:0] xor_ln148_fu_569_p2;
wire   [0:0] and_ln146_fu_457_p2;
wire   [0:0] or_ln148_1_fu_575_p2;
wire   [0:0] and_ln146_1_fu_469_p2;
wire   [7:0] select_ln148_fu_499_p3;
wire   [0:0] and_ln148_1_fu_587_p2;
wire   [0:0] or_ln150_fu_607_p2;
wire   [0:0] or_ln150_1_fu_613_p2;
wire   [7:0] add_ln150_fu_601_p2;
wire   [7:0] p_mid13146_fu_631_p0;
wire   [8:0] p_mid13146_fu_631_p1;
wire   [15:0] p_mid13146_fu_631_p2;
wire   [13:0] tmp_4_mid1_fu_637_p4;
wire   [15:0] trunc_ln157_2_mid1_fu_647_p3;
wire   [15:0] select_ln148_1_fu_519_p3;
wire   [15:0] select_ln150_1_fu_655_p3;
wire   [8:0] select_ln148_2_fu_561_p3;
wire   [0:0] and_ln148_fu_581_p2;
wire   [0:0] xor_ln150_fu_675_p2;
wire   [2:0] select_ln150_fu_619_p3;
wire   [0:0] and_ln150_fu_681_p2;
wire   [0:0] or_ln152_fu_701_p2;
wire   [0:0] or_ln152_1_fu_707_p2;
wire   [2:0] add_ln152_fu_695_p2;
wire   [3:0] p_mid2_fu_721_p3;
wire   [3:0] zext_ln148_fu_383_p1;
wire   [3:0] p_mid13133_fu_729_p2;
wire   [7:0] p_shl18_mid1_fu_735_p3;
wire   [4:0] p_shl19_mid1_fu_747_p3;
wire   [8:0] p_shl18_cast_mid1_fu_743_p1;
wire   [8:0] p_shl19_cast_mid1_fu_755_p1;
wire   [8:0] sub_ln157_3_fu_759_p2;
wire   [8:0] select_ln150_2_fu_667_p3;
wire   [2:0] select_ln152_fu_713_p3;
wire   [3:0] shl_ln1_fu_781_p3;
wire   [8:0] select_ln152_1_fu_765_p3;
wire   [8:0] zext_ln157_fu_789_p1;
wire   [8:0] add_ln157_fu_793_p2;
wire  signed [16:0] sext_ln157_1_fu_799_p1;
wire   [16:0] zext_ln150_2_fu_663_p1;
wire   [16:0] add_ln157_1_fu_803_p2;
wire   [18:0] tmp_10_fu_809_p3;
wire  signed [63:0] sext_ln157_2_fu_817_p1;
wire   [63:0] add_ln157_2_fu_821_p2;
wire   [61:0] trunc_ln_fu_826_p4;
wire   [5:0] add_ln152_1_fu_852_p2;
wire   [13:0] add_ln150_1_fu_866_p2;
wire   [15:0] add_ln148_1_fu_880_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [15:0] empty_fu_268_p00;
wire   [15:0] p_mid13146_fu_631_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_attention_mul_8ns_9ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
mul_8ns_9ns_16_1_1_U186(
    .din0(empty_fu_268_p0),
    .din1(empty_fu_268_p1),
    .dout(empty_fu_268_p2)
);

kernel_attention_mul_8ns_9ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
mul_8ns_9ns_16_1_1_U187(
    .din0(p_mid13146_fu_631_p0),
    .din1(p_mid13146_fu_631_p1),
    .dout(p_mid13146_fu_631_p2)
);

kernel_attention_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten3135_fu_138 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln146_fu_328_p2 == 1'd0))) begin
            indvar_flatten3135_fu_138 <= select_ln152_3_fu_858_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten3170_fu_146 <= 14'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln146_fu_328_p2 == 1'd0))) begin
            indvar_flatten3170_fu_146 <= select_ln150_4_fu_872_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten3220_fu_154 <= 16'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln146_fu_328_p2 == 1'd0))) begin
            indvar_flatten3220_fu_154 <= select_ln148_4_fu_886_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten3278_fu_162 <= 16'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln146_fu_328_p2 == 1'd0))) begin
            indvar_flatten3278_fu_162 <= add_ln146_fu_334_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_158 <= 2'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln146_fu_328_p2 == 1'd0))) begin
            j_fu_158 <= select_ln146_1_fu_375_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_150 <= 2'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln146_fu_328_p2 == 1'd0))) begin
            k_fu_150 <= select_ln148_3_fu_593_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            l_fu_142 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln146_fu_328_p2 == 1'd0))) begin
            l_fu_142 <= select_ln150_3_fu_687_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_fu_134 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln146_fu_328_p2 == 1'd0))) begin
            m_fu_134 <= select_ln152_2_fu_773_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            n_1_fu_130 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln146_fu_328_p2 == 1'd0))) begin
            n_1_fu_130 <= add_ln154_fu_846_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln146_reg_1018 <= icmp_ln146_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln146_fu_328_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_18_reg_1022 <= sext_ln157_fu_836_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1018 == 1'd0))) begin
        gmem_addr_read_reg_1028 <= m_axi_gmem_RDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln146_fu_328_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln146_reg_1018 == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln146_reg_1018 == 1'd0))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln146_reg_1018 == 1'd0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1018 == 1'd0))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1018 == 1'd0))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln146_1_fu_369_p2 = (j_fu_158 + 2'd1);

assign add_ln146_fu_334_p2 = (indvar_flatten3278_fu_162 + 16'd1);

assign add_ln148_1_fu_880_p2 = (indvar_flatten3220_fu_154 + 16'd1);

assign add_ln148_fu_487_p2 = (select_ln146_fu_361_p3 + 2'd1);

assign add_ln150_1_fu_866_p2 = (indvar_flatten3170_fu_146 + 14'd1);

assign add_ln150_fu_601_p2 = (select_ln148_fu_499_p3 + 8'd1);

assign add_ln152_1_fu_852_p2 = (indvar_flatten3135_fu_138 + 6'd1);

assign add_ln152_fu_695_p2 = (select_ln150_fu_619_p3 + 3'd1);

assign add_ln154_fu_846_p2 = (select_ln152_fu_713_p3 + 3'd1);

assign add_ln157_1_fu_803_p2 = ($signed(sext_ln157_1_fu_799_p1) + $signed(zext_ln150_2_fu_663_p1));

assign add_ln157_2_fu_821_p2 = ($signed(sext_ln157_2_fu_817_p1) + $signed(buffer_out));

assign add_ln157_fu_793_p2 = (select_ln152_1_fu_765_p3 + zext_ln157_fu_789_p1);

assign and_ln146_1_fu_469_p2 = (xor_ln146_fu_445_p2 & icmp_ln152_fu_463_p2);

assign and_ln146_2_fu_481_p2 = (xor_ln146_fu_445_p2 & icmp_ln150_fu_475_p2);

assign and_ln146_fu_457_p2 = (xor_ln146_fu_445_p2 & icmp_ln154_fu_451_p2);

assign and_ln148_1_fu_587_p2 = (or_ln148_1_fu_575_p2 & and_ln146_1_fu_469_p2);

assign and_ln148_fu_581_p2 = (or_ln148_1_fu_575_p2 & and_ln146_fu_457_p2);

assign and_ln150_fu_681_p2 = (xor_ln150_fu_675_p2 & and_ln148_fu_581_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((m_axi_gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln146_reg_1018 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln146_reg_1018 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln146_reg_1018 == 1'd0)))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmem_AWREADY == 1'b0) & (icmp_ln146_reg_1018 == 1'd0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln146_reg_1018 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter8 = (m_axi_gmem_BVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_110_fu_292_p2 = (tmp_s_fu_284_p3 + zext_ln146_fu_260_p1);

assign empty_fu_268_p0 = empty_fu_268_p00;

assign empty_fu_268_p00 = l_fu_142;

assign empty_fu_268_p1 = 16'd196;

assign icmp_ln146_fu_328_p2 = ((indvar_flatten3278_fu_162 == 16'd47040) ? 1'b1 : 1'b0);

assign icmp_ln148_fu_355_p2 = ((indvar_flatten3220_fu_154 == 16'd23520) ? 1'b1 : 1'b0);

assign icmp_ln150_fu_475_p2 = ((indvar_flatten3170_fu_146 == 14'd11760) ? 1'b1 : 1'b0);

assign icmp_ln152_fu_463_p2 = ((indvar_flatten3135_fu_138 == 6'd49) ? 1'b1 : 1'b0);

assign icmp_ln154_fu_451_p2 = ((n_1_fu_130 == 3'd7) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = gmem_addr_18_reg_1022;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = gmem_addr_read_reg_1028;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign or_ln148_1_fu_575_p2 = (xor_ln148_fu_569_p2 | icmp_ln148_fu_355_p2);

assign or_ln148_fu_493_p2 = (icmp_ln148_fu_355_p2 | and_ln146_2_fu_481_p2);

assign or_ln150_1_fu_613_p2 = (or_ln150_fu_607_p2 | icmp_ln148_fu_355_p2);

assign or_ln150_fu_607_p2 = (and_ln148_1_fu_587_p2 | and_ln146_2_fu_481_p2);

assign or_ln152_1_fu_707_p2 = (or_ln152_fu_701_p2 | or_ln148_fu_493_p2);

assign or_ln152_fu_701_p2 = (and_ln150_fu_681_p2 | and_ln148_1_fu_587_p2);

assign p_mid13133_fu_729_p2 = (p_mid2_fu_721_p3 + zext_ln148_fu_383_p1);

assign p_mid13146_fu_631_p0 = p_mid13146_fu_631_p00;

assign p_mid13146_fu_631_p00 = add_ln150_fu_601_p2;

assign p_mid13146_fu_631_p1 = 16'd196;

assign p_mid2_fu_721_p3 = {{add_ln152_fu_695_p2}, {1'd0}};

assign p_shl18_cast_fu_306_p1 = p_shl8_fu_298_p3;

assign p_shl18_cast_mid1_fu_743_p1 = p_shl18_mid1_fu_735_p3;

assign p_shl18_mid1_fu_735_p3 = {{p_mid13133_fu_729_p2}, {4'd0}};

assign p_shl18_mid_cast_fu_535_p1 = p_shl18_mid_fu_527_p3;

assign p_shl18_mid_fu_527_p3 = {{select_ln146_1_fu_375_p3}, {4'd0}};

assign p_shl19_cast_fu_318_p1 = p_shl9_fu_310_p3;

assign p_shl19_cast_mid1_fu_755_p1 = p_shl19_mid1_fu_747_p3;

assign p_shl19_mid1_fu_747_p3 = {{p_mid13133_fu_729_p2}, {1'd0}};

assign p_shl19_mid_fu_539_p3 = {{select_ln146_1_fu_375_p3}, {1'd0}};

assign p_shl8_fu_298_p3 = {{empty_110_fu_292_p2}, {4'd0}};

assign p_shl9_fu_310_p3 = {{empty_110_fu_292_p2}, {1'd0}};

assign select_ln146_1_fu_375_p3 = ((icmp_ln148_fu_355_p2[0:0] == 1'b1) ? add_ln146_1_fu_369_p2 : j_fu_158);

assign select_ln146_2_fu_395_p3 = ((icmp_ln148_fu_355_p2[0:0] == 1'b1) ? 16'd0 : trunc_ln157_s_fu_387_p3);

assign select_ln146_3_fu_437_p3 = ((icmp_ln148_fu_355_p2[0:0] == 1'b1) ? sext_ln146_1_fu_433_p1 : sub_ln157_fu_322_p2);

assign select_ln146_fu_361_p3 = ((icmp_ln148_fu_355_p2[0:0] == 1'b1) ? 2'd0 : k_fu_150);

assign select_ln148_1_fu_519_p3 = ((and_ln146_2_fu_481_p2[0:0] == 1'b1) ? zext_ln148_1_fu_515_p1 : select_ln146_2_fu_395_p3);

assign select_ln148_2_fu_561_p3 = ((and_ln146_2_fu_481_p2[0:0] == 1'b1) ? sext_ln148_fu_557_p1 : select_ln146_3_fu_437_p3);

assign select_ln148_3_fu_593_p3 = ((and_ln146_2_fu_481_p2[0:0] == 1'b1) ? add_ln148_fu_487_p2 : select_ln146_fu_361_p3);

assign select_ln148_4_fu_886_p3 = ((icmp_ln148_fu_355_p2[0:0] == 1'b1) ? 16'd1 : add_ln148_1_fu_880_p2);

assign select_ln148_fu_499_p3 = ((or_ln148_fu_493_p2[0:0] == 1'b1) ? 8'd0 : l_fu_142);

assign select_ln150_1_fu_655_p3 = ((and_ln148_1_fu_587_p2[0:0] == 1'b1) ? trunc_ln157_2_mid1_fu_647_p3 : select_ln148_1_fu_519_p3);

assign select_ln150_2_fu_667_p3 = ((and_ln148_1_fu_587_p2[0:0] == 1'b1) ? sext_ln148_fu_557_p1 : select_ln148_2_fu_561_p3);

assign select_ln150_3_fu_687_p3 = ((and_ln148_1_fu_587_p2[0:0] == 1'b1) ? add_ln150_fu_601_p2 : select_ln148_fu_499_p3);

assign select_ln150_4_fu_872_p3 = ((or_ln148_fu_493_p2[0:0] == 1'b1) ? 14'd1 : add_ln150_1_fu_866_p2);

assign select_ln150_fu_619_p3 = ((or_ln150_1_fu_613_p2[0:0] == 1'b1) ? 3'd0 : m_fu_134);

assign select_ln152_1_fu_765_p3 = ((and_ln150_fu_681_p2[0:0] == 1'b1) ? sub_ln157_3_fu_759_p2 : select_ln150_2_fu_667_p3);

assign select_ln152_2_fu_773_p3 = ((and_ln150_fu_681_p2[0:0] == 1'b1) ? add_ln152_fu_695_p2 : select_ln150_fu_619_p3);

assign select_ln152_3_fu_858_p3 = ((or_ln150_1_fu_613_p2[0:0] == 1'b1) ? 6'd1 : add_ln152_1_fu_852_p2);

assign select_ln152_fu_713_p3 = ((or_ln152_1_fu_707_p2[0:0] == 1'b1) ? 3'd0 : n_1_fu_130);

assign sext_ln146_1_fu_433_p1 = $signed(sub_ln157_1_fu_427_p2);

assign sext_ln148_fu_557_p1 = $signed(sub_ln157_2_fu_551_p2);

assign sext_ln157_1_fu_799_p1 = $signed(add_ln157_fu_793_p2);

assign sext_ln157_2_fu_817_p1 = $signed(tmp_10_fu_809_p3);

assign sext_ln157_fu_836_p1 = $signed(trunc_ln_fu_826_p4);

assign shl_ln1_fu_781_p3 = {{select_ln152_fu_713_p3}, {1'd0}};

assign sub_ln157_1_fu_427_p2 = (tmp_26_cast_fu_411_p1 - zext_ln157_1_fu_423_p1);

assign sub_ln157_2_fu_551_p2 = (p_shl18_mid_cast_fu_535_p1 - zext_ln157_2_fu_547_p1);

assign sub_ln157_3_fu_759_p2 = (p_shl18_cast_mid1_fu_743_p1 - p_shl19_cast_mid1_fu_755_p1);

assign sub_ln157_fu_322_p2 = (p_shl18_cast_fu_306_p1 - p_shl19_cast_fu_318_p1);

assign tmp_10_fu_809_p3 = {{add_ln157_1_fu_803_p2}, {2'd0}};

assign tmp_26_cast_fu_411_p1 = tmp_8_fu_403_p3;

assign tmp_4_fu_274_p4 = {{empty_fu_268_p2[15:2]}};

assign tmp_4_mid1_fu_637_p4 = {{p_mid13146_fu_631_p2[15:2]}};

assign tmp_8_fu_403_p3 = {{add_ln146_1_fu_369_p2}, {4'd0}};

assign tmp_9_fu_415_p3 = {{add_ln146_1_fu_369_p2}, {1'd0}};

assign tmp_s_fu_284_p3 = {{m_fu_134}, {1'd0}};

assign trunc_ln157_2_mid1_fu_647_p3 = {{tmp_4_mid1_fu_637_p4}, {select_ln148_3_fu_593_p3}};

assign trunc_ln157_2_mid_fu_507_p3 = {{1'd0}, {add_ln148_fu_487_p2}};

assign trunc_ln157_s_fu_387_p3 = {{tmp_4_fu_274_p4}, {k_fu_150}};

assign trunc_ln_fu_826_p4 = {{add_ln157_2_fu_821_p2[63:2]}};

assign xor_ln146_fu_445_p2 = (icmp_ln148_fu_355_p2 ^ 1'd1);

assign xor_ln148_fu_569_p2 = (icmp_ln150_fu_475_p2 ^ 1'd1);

assign xor_ln150_fu_675_p2 = (1'd1 ^ and_ln148_1_fu_587_p2);

assign zext_ln146_fu_260_p1 = j_fu_158;

assign zext_ln148_1_fu_515_p1 = trunc_ln157_2_mid_fu_507_p3;

assign zext_ln148_fu_383_p1 = select_ln146_1_fu_375_p3;

assign zext_ln150_2_fu_663_p1 = select_ln150_1_fu_655_p3;

assign zext_ln157_1_fu_423_p1 = tmp_9_fu_415_p3;

assign zext_ln157_2_fu_547_p1 = p_shl19_mid_fu_539_p3;

assign zext_ln157_fu_789_p1 = shl_ln1_fu_781_p3;

endmodule //kernel_attention_kernel_attention_Pipeline_VITIS_LOOP_146_2_VITIS_LOOP_150_4_VITIS_LOOP_152_5_VIT
