// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_stage0_BatchNorm_4_5_6_7_11_13_1_Pipeline_VITIS_LOOP_16_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RFIFONUM,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        sext_ln16,
        sext_ln16_1,
        bitcast_ln14,
        tmp,
        conv2_mid2,
        conv3_mid2,
        grp_fu_232_p_din0,
        grp_fu_232_p_din1,
        grp_fu_232_p_opcode,
        grp_fu_232_p_dout0,
        grp_fu_232_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [63:0] m_axi_gmem1_AWADDR;
output  [0:0] m_axi_gmem1_AWID;
output  [31:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [0:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [31:0] m_axi_gmem1_WDATA;
output  [3:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [0:0] m_axi_gmem1_WID;
output  [0:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [63:0] m_axi_gmem1_ARADDR;
output  [0:0] m_axi_gmem1_ARID;
output  [31:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [0:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [31:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [0:0] m_axi_gmem1_RID;
input  [8:0] m_axi_gmem1_RFIFONUM;
input  [0:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [0:0] m_axi_gmem1_BID;
input  [0:0] m_axi_gmem1_BUSER;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [63:0] m_axi_gmem2_AWADDR;
output  [0:0] m_axi_gmem2_AWID;
output  [31:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [0:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [31:0] m_axi_gmem2_WDATA;
output  [3:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [0:0] m_axi_gmem2_WID;
output  [0:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [63:0] m_axi_gmem2_ARADDR;
output  [0:0] m_axi_gmem2_ARID;
output  [31:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [0:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [31:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [0:0] m_axi_gmem2_RID;
input  [8:0] m_axi_gmem2_RFIFONUM;
input  [0:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [0:0] m_axi_gmem2_BID;
input  [0:0] m_axi_gmem2_BUSER;
input  [61:0] sext_ln16;
input  [61:0] sext_ln16_1;
input  [31:0] bitcast_ln14;
input  [63:0] tmp;
input  [63:0] conv2_mid2;
input  [63:0] conv3_mid2;
output  [63:0] grp_fu_232_p_din0;
output  [63:0] grp_fu_232_p_din1;
output  [1:0] grp_fu_232_p_opcode;
input  [63:0] grp_fu_232_p_dout0;
output   grp_fu_232_p_ce;

reg ap_idle;
reg m_axi_gmem1_ARVALID;
reg m_axi_gmem1_RREADY;
reg m_axi_gmem2_AWVALID;
reg m_axi_gmem2_WVALID;
reg m_axi_gmem2_BREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln16_reg_280;
reg   [0:0] first_iter_0_reg_150;
reg    ap_predicate_op59_readreq_state2;
reg    ap_block_state2_io;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
reg   [0:0] icmp_ln16_reg_280_pp0_iter7_reg;
reg    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_state26_pp0_stage0_iter25;
reg   [0:0] icmp_ln16_reg_280_pp0_iter24_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter24_reg;
reg    ap_predicate_op87_writereq_state26;
reg    ap_block_state26_io;
wire    ap_block_state27_pp0_stage0_iter26;
wire    ap_block_state28_pp0_stage0_iter27;
wire    ap_block_state29_pp0_stage0_iter28;
wire    ap_block_state30_pp0_stage0_iter29;
wire    ap_block_state31_pp0_stage0_iter30;
reg   [0:0] icmp_ln16_1_reg_284;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter30_reg;
reg    ap_block_state32_pp0_stage0_iter31;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln16_fu_200_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem1_blk_n_R;
wire    ap_block_pp0_stage0;
reg    gmem1_blk_n_AR;
reg    gmem2_blk_n_B;
reg    gmem2_blk_n_W;
reg    gmem2_blk_n_AW;
reg   [0:0] first_iter_0_reg_150_pp0_iter1_reg;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] first_iter_0_reg_150_pp0_iter2_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter3_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter4_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter5_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter6_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter7_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter8_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter9_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter10_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter11_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter12_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter13_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter14_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter15_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter16_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter17_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter18_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter19_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter20_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter21_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter22_reg;
reg   [0:0] first_iter_0_reg_150_pp0_iter23_reg;
wire  signed [63:0] sext_ln16_1_cast_fu_184_p1;
reg  signed [63:0] sext_ln16_1_cast_reg_270;
wire  signed [63:0] sext_ln16_cast_fu_188_p1;
reg  signed [63:0] sext_ln16_cast_reg_275;
reg   [0:0] icmp_ln16_reg_280_pp0_iter1_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter2_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter3_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter4_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter5_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter6_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter8_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter9_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter10_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter11_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter12_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter13_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter14_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter15_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter16_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter17_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter18_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter19_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter20_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter21_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter22_reg;
reg   [0:0] icmp_ln16_reg_280_pp0_iter23_reg;
wire   [0:0] icmp_ln16_1_fu_212_p2;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter1_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter2_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter3_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter4_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter5_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter6_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter7_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter8_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter9_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter10_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter11_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter12_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter13_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter14_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter15_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter16_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter17_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter18_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter19_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter20_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter21_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter22_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter23_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter24_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter25_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter26_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter27_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter28_reg;
reg   [0:0] icmp_ln16_1_reg_284_pp0_iter29_reg;
reg   [31:0] gmem1_addr_read_reg_294;
wire   [31:0] grp_fu_162_p2;
reg   [31:0] sub_reg_304;
wire   [63:0] conv_fu_169_p1;
reg   [63:0] conv_reg_309;
wire   [63:0] grp_fu_180_p2;
reg   [63:0] div_reg_314;
wire   [63:0] grp_fu_176_p2;
reg   [63:0] mul_reg_319;
reg   [63:0] add3_reg_324;
wire   [31:0] conv4_fu_166_p1;
reg   [31:0] conv4_reg_335;
reg    ap_condition_exit_pp0_iter25_stage0;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_01001;
reg   [6:0] w_fu_82;
wire   [6:0] add_ln16_fu_206_p2;
reg   [6:0] ap_sig_allocacmp_w_1;
wire   [31:0] grp_fu_162_p0;
reg    grp_fu_162_ce;
reg    grp_fu_172_ce;
reg    grp_fu_176_ce;
reg    grp_fu_180_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg    ap_loop_exit_ready_pp0_iter28_reg;
reg    ap_loop_exit_ready_pp0_iter29_reg;
reg    ap_loop_exit_ready_pp0_iter30_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_block_pp0_stage0_00001;
reg    ap_condition_827;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_stage0_fsub_32ns_32ns_32_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_2_full_dsp_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_162_p0),
    .din1(bitcast_ln14),
    .ce(grp_fu_162_ce),
    .dout(grp_fu_162_p2)
);

kernel_stage0_fptrunc_64ns_32_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
fptrunc_64ns_32_1_no_dsp_1_U27(
    .din0(add3_reg_324),
    .dout(conv4_fu_166_p1)
);

kernel_stage0_fpext_32ns_64_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_1_no_dsp_1_U28(
    .din0(sub_reg_304),
    .dout(conv_fu_169_p1)
);

kernel_stage0_dmul_64ns_64ns_64_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_2_max_dsp_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(div_reg_314),
    .din1(conv2_mid2),
    .ce(grp_fu_176_ce),
    .dout(grp_fu_176_p2)
);

kernel_stage0_ddiv_64ns_64ns_64_9_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_9_no_dsp_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_reg_309),
    .din1(tmp),
    .ce(grp_fu_180_ce),
    .dout(grp_fu_180_p2)
);

kernel_stage0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter30_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter25_stage0)) begin
            ap_enable_reg_pp0_iter26 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            first_iter_0_reg_150 <= 1'd1;
        end else if ((1'b1 == ap_condition_827)) begin
            first_iter_0_reg_150 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln16_fu_200_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            w_fu_82 <= add_ln16_fu_206_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            w_fu_82 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_280_pp0_iter23_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add3_reg_324 <= grp_fu_232_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
        ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
        ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        first_iter_0_reg_150_pp0_iter10_reg <= first_iter_0_reg_150_pp0_iter9_reg;
        first_iter_0_reg_150_pp0_iter11_reg <= first_iter_0_reg_150_pp0_iter10_reg;
        first_iter_0_reg_150_pp0_iter12_reg <= first_iter_0_reg_150_pp0_iter11_reg;
        first_iter_0_reg_150_pp0_iter13_reg <= first_iter_0_reg_150_pp0_iter12_reg;
        first_iter_0_reg_150_pp0_iter14_reg <= first_iter_0_reg_150_pp0_iter13_reg;
        first_iter_0_reg_150_pp0_iter15_reg <= first_iter_0_reg_150_pp0_iter14_reg;
        first_iter_0_reg_150_pp0_iter16_reg <= first_iter_0_reg_150_pp0_iter15_reg;
        first_iter_0_reg_150_pp0_iter17_reg <= first_iter_0_reg_150_pp0_iter16_reg;
        first_iter_0_reg_150_pp0_iter18_reg <= first_iter_0_reg_150_pp0_iter17_reg;
        first_iter_0_reg_150_pp0_iter19_reg <= first_iter_0_reg_150_pp0_iter18_reg;
        first_iter_0_reg_150_pp0_iter20_reg <= first_iter_0_reg_150_pp0_iter19_reg;
        first_iter_0_reg_150_pp0_iter21_reg <= first_iter_0_reg_150_pp0_iter20_reg;
        first_iter_0_reg_150_pp0_iter22_reg <= first_iter_0_reg_150_pp0_iter21_reg;
        first_iter_0_reg_150_pp0_iter23_reg <= first_iter_0_reg_150_pp0_iter22_reg;
        first_iter_0_reg_150_pp0_iter24_reg <= first_iter_0_reg_150_pp0_iter23_reg;
        first_iter_0_reg_150_pp0_iter2_reg <= first_iter_0_reg_150_pp0_iter1_reg;
        first_iter_0_reg_150_pp0_iter3_reg <= first_iter_0_reg_150_pp0_iter2_reg;
        first_iter_0_reg_150_pp0_iter4_reg <= first_iter_0_reg_150_pp0_iter3_reg;
        first_iter_0_reg_150_pp0_iter5_reg <= first_iter_0_reg_150_pp0_iter4_reg;
        first_iter_0_reg_150_pp0_iter6_reg <= first_iter_0_reg_150_pp0_iter5_reg;
        first_iter_0_reg_150_pp0_iter7_reg <= first_iter_0_reg_150_pp0_iter6_reg;
        first_iter_0_reg_150_pp0_iter8_reg <= first_iter_0_reg_150_pp0_iter7_reg;
        first_iter_0_reg_150_pp0_iter9_reg <= first_iter_0_reg_150_pp0_iter8_reg;
        icmp_ln16_1_reg_284_pp0_iter10_reg <= icmp_ln16_1_reg_284_pp0_iter9_reg;
        icmp_ln16_1_reg_284_pp0_iter11_reg <= icmp_ln16_1_reg_284_pp0_iter10_reg;
        icmp_ln16_1_reg_284_pp0_iter12_reg <= icmp_ln16_1_reg_284_pp0_iter11_reg;
        icmp_ln16_1_reg_284_pp0_iter13_reg <= icmp_ln16_1_reg_284_pp0_iter12_reg;
        icmp_ln16_1_reg_284_pp0_iter14_reg <= icmp_ln16_1_reg_284_pp0_iter13_reg;
        icmp_ln16_1_reg_284_pp0_iter15_reg <= icmp_ln16_1_reg_284_pp0_iter14_reg;
        icmp_ln16_1_reg_284_pp0_iter16_reg <= icmp_ln16_1_reg_284_pp0_iter15_reg;
        icmp_ln16_1_reg_284_pp0_iter17_reg <= icmp_ln16_1_reg_284_pp0_iter16_reg;
        icmp_ln16_1_reg_284_pp0_iter18_reg <= icmp_ln16_1_reg_284_pp0_iter17_reg;
        icmp_ln16_1_reg_284_pp0_iter19_reg <= icmp_ln16_1_reg_284_pp0_iter18_reg;
        icmp_ln16_1_reg_284_pp0_iter20_reg <= icmp_ln16_1_reg_284_pp0_iter19_reg;
        icmp_ln16_1_reg_284_pp0_iter21_reg <= icmp_ln16_1_reg_284_pp0_iter20_reg;
        icmp_ln16_1_reg_284_pp0_iter22_reg <= icmp_ln16_1_reg_284_pp0_iter21_reg;
        icmp_ln16_1_reg_284_pp0_iter23_reg <= icmp_ln16_1_reg_284_pp0_iter22_reg;
        icmp_ln16_1_reg_284_pp0_iter24_reg <= icmp_ln16_1_reg_284_pp0_iter23_reg;
        icmp_ln16_1_reg_284_pp0_iter25_reg <= icmp_ln16_1_reg_284_pp0_iter24_reg;
        icmp_ln16_1_reg_284_pp0_iter26_reg <= icmp_ln16_1_reg_284_pp0_iter25_reg;
        icmp_ln16_1_reg_284_pp0_iter27_reg <= icmp_ln16_1_reg_284_pp0_iter26_reg;
        icmp_ln16_1_reg_284_pp0_iter28_reg <= icmp_ln16_1_reg_284_pp0_iter27_reg;
        icmp_ln16_1_reg_284_pp0_iter29_reg <= icmp_ln16_1_reg_284_pp0_iter28_reg;
        icmp_ln16_1_reg_284_pp0_iter2_reg <= icmp_ln16_1_reg_284_pp0_iter1_reg;
        icmp_ln16_1_reg_284_pp0_iter30_reg <= icmp_ln16_1_reg_284_pp0_iter29_reg;
        icmp_ln16_1_reg_284_pp0_iter3_reg <= icmp_ln16_1_reg_284_pp0_iter2_reg;
        icmp_ln16_1_reg_284_pp0_iter4_reg <= icmp_ln16_1_reg_284_pp0_iter3_reg;
        icmp_ln16_1_reg_284_pp0_iter5_reg <= icmp_ln16_1_reg_284_pp0_iter4_reg;
        icmp_ln16_1_reg_284_pp0_iter6_reg <= icmp_ln16_1_reg_284_pp0_iter5_reg;
        icmp_ln16_1_reg_284_pp0_iter7_reg <= icmp_ln16_1_reg_284_pp0_iter6_reg;
        icmp_ln16_1_reg_284_pp0_iter8_reg <= icmp_ln16_1_reg_284_pp0_iter7_reg;
        icmp_ln16_1_reg_284_pp0_iter9_reg <= icmp_ln16_1_reg_284_pp0_iter8_reg;
        icmp_ln16_reg_280_pp0_iter10_reg <= icmp_ln16_reg_280_pp0_iter9_reg;
        icmp_ln16_reg_280_pp0_iter11_reg <= icmp_ln16_reg_280_pp0_iter10_reg;
        icmp_ln16_reg_280_pp0_iter12_reg <= icmp_ln16_reg_280_pp0_iter11_reg;
        icmp_ln16_reg_280_pp0_iter13_reg <= icmp_ln16_reg_280_pp0_iter12_reg;
        icmp_ln16_reg_280_pp0_iter14_reg <= icmp_ln16_reg_280_pp0_iter13_reg;
        icmp_ln16_reg_280_pp0_iter15_reg <= icmp_ln16_reg_280_pp0_iter14_reg;
        icmp_ln16_reg_280_pp0_iter16_reg <= icmp_ln16_reg_280_pp0_iter15_reg;
        icmp_ln16_reg_280_pp0_iter17_reg <= icmp_ln16_reg_280_pp0_iter16_reg;
        icmp_ln16_reg_280_pp0_iter18_reg <= icmp_ln16_reg_280_pp0_iter17_reg;
        icmp_ln16_reg_280_pp0_iter19_reg <= icmp_ln16_reg_280_pp0_iter18_reg;
        icmp_ln16_reg_280_pp0_iter20_reg <= icmp_ln16_reg_280_pp0_iter19_reg;
        icmp_ln16_reg_280_pp0_iter21_reg <= icmp_ln16_reg_280_pp0_iter20_reg;
        icmp_ln16_reg_280_pp0_iter22_reg <= icmp_ln16_reg_280_pp0_iter21_reg;
        icmp_ln16_reg_280_pp0_iter23_reg <= icmp_ln16_reg_280_pp0_iter22_reg;
        icmp_ln16_reg_280_pp0_iter24_reg <= icmp_ln16_reg_280_pp0_iter23_reg;
        icmp_ln16_reg_280_pp0_iter2_reg <= icmp_ln16_reg_280_pp0_iter1_reg;
        icmp_ln16_reg_280_pp0_iter3_reg <= icmp_ln16_reg_280_pp0_iter2_reg;
        icmp_ln16_reg_280_pp0_iter4_reg <= icmp_ln16_reg_280_pp0_iter3_reg;
        icmp_ln16_reg_280_pp0_iter5_reg <= icmp_ln16_reg_280_pp0_iter4_reg;
        icmp_ln16_reg_280_pp0_iter6_reg <= icmp_ln16_reg_280_pp0_iter5_reg;
        icmp_ln16_reg_280_pp0_iter7_reg <= icmp_ln16_reg_280_pp0_iter6_reg;
        icmp_ln16_reg_280_pp0_iter8_reg <= icmp_ln16_reg_280_pp0_iter7_reg;
        icmp_ln16_reg_280_pp0_iter9_reg <= icmp_ln16_reg_280_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        first_iter_0_reg_150_pp0_iter1_reg <= first_iter_0_reg_150;
        icmp_ln16_1_reg_284_pp0_iter1_reg <= icmp_ln16_1_reg_284;
        icmp_ln16_reg_280 <= icmp_ln16_fu_200_p2;
        icmp_ln16_reg_280_pp0_iter1_reg <= icmp_ln16_reg_280;
        sext_ln16_1_cast_reg_270 <= sext_ln16_1_cast_fu_184_p1;
        sext_ln16_cast_reg_275 <= sext_ln16_cast_fu_188_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_reg_280_pp0_iter24_reg == 1'd0))) begin
        conv4_reg_335 <= conv4_fu_166_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_280_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_reg_309 <= conv_fu_169_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_280_pp0_iter19_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        div_reg_314 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_reg_280_pp0_iter7_reg == 1'd0))) begin
        gmem1_addr_read_reg_294 <= m_axi_gmem1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln16_1_reg_284 <= icmp_ln16_1_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_280_pp0_iter21_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_reg_319 <= grp_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_280_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_reg_304 <= grp_fu_162_p2;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_200_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter25 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln16_reg_280_pp0_iter24_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter25_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter25_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter30_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_w_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_w_1 = w_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op59_readreq_state2 == 1'b1))) begin
        gmem1_blk_n_AR = m_axi_gmem1_ARREADY;
    end else begin
        gmem1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln16_reg_280_pp0_iter7_reg == 1'd0))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter25 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op87_writereq_state26 == 1'b1))) begin
        gmem2_blk_n_AW = m_axi_gmem2_AWREADY;
    end else begin
        gmem2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln16_1_reg_284_pp0_iter30_reg == 1'd1) & (ap_enable_reg_pp0_iter31 == 1'b1))) begin
        gmem2_blk_n_B = m_axi_gmem2_BVALID;
    end else begin
        gmem2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem2_blk_n_W = m_axi_gmem2_WREADY;
    end else begin
        gmem2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_162_ce = 1'b1;
    end else begin
        grp_fu_162_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_172_ce = 1'b1;
    end else begin
        grp_fu_172_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_176_ce = 1'b1;
    end else begin
        grp_fu_176_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_180_ce = 1'b1;
    end else begin
        grp_fu_180_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op59_readreq_state2 == 1'b1))) begin
        m_axi_gmem1_ARVALID = 1'b1;
    end else begin
        m_axi_gmem1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_reg_280_pp0_iter7_reg == 1'd0))) begin
        m_axi_gmem1_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter25 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op87_writereq_state26 == 1'b1))) begin
        m_axi_gmem2_AWVALID = 1'b1;
    end else begin
        m_axi_gmem2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_1_reg_284_pp0_iter30_reg == 1'd1) & (ap_enable_reg_pp0_iter31 == 1'b1))) begin
        m_axi_gmem2_BREADY = 1'b1;
    end else begin
        m_axi_gmem2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem2_WVALID = 1'b1;
    end else begin
        m_axi_gmem2_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_fu_206_p2 = (ap_sig_allocacmp_w_1 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = (((icmp_ln16_1_reg_284_pp0_iter30_reg == 1'd1) & (m_axi_gmem2_BVALID == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b1)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln16_reg_280_pp0_iter7_reg == 1'd0) & (m_axi_gmem1_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln16_1_reg_284_pp0_iter30_reg == 1'd1) & (m_axi_gmem2_BVALID == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b1)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln16_reg_280_pp0_iter7_reg == 1'd0) & (m_axi_gmem1_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln16_1_reg_284_pp0_iter30_reg == 1'd1) & (m_axi_gmem2_BVALID == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b1)) | ((ap_enable_reg_pp0_iter26 == 1'b1) & (m_axi_gmem2_WREADY == 1'b0)) | ((ap_enable_reg_pp0_iter25 == 1'b1) & (1'b1 == ap_block_state26_io)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln16_reg_280_pp0_iter7_reg == 1'd0) & (m_axi_gmem1_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln16_1_reg_284_pp0_iter30_reg == 1'd1) & (m_axi_gmem2_BVALID == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b1)) | ((ap_enable_reg_pp0_iter26 == 1'b1) & (m_axi_gmem2_WREADY == 1'b0)) | ((ap_enable_reg_pp0_iter25 == 1'b1) & (1'b1 == ap_block_state26_io)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln16_reg_280_pp0_iter7_reg == 1'd0) & (m_axi_gmem1_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_io = ((ap_predicate_op87_writereq_state26 == 1'b1) & (m_axi_gmem2_AWREADY == 1'b0));
end

assign ap_block_state26_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((ap_predicate_op59_readreq_state2 == 1'b1) & (m_axi_gmem1_ARREADY == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_pp0_stage0_iter31 = ((icmp_ln16_1_reg_284_pp0_iter30_reg == 1'd1) & (m_axi_gmem2_BVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter8 = ((icmp_ln16_reg_280_pp0_iter7_reg == 1'd0) & (m_axi_gmem1_RVALID == 1'b0));
end

always @ (*) begin
    ap_condition_827 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln16_reg_280 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op59_readreq_state2 = ((first_iter_0_reg_150 == 1'd1) & (icmp_ln16_reg_280 == 1'd0));
end

always @ (*) begin
    ap_predicate_op87_writereq_state26 = ((first_iter_0_reg_150_pp0_iter24_reg == 1'd1) & (icmp_ln16_reg_280_pp0_iter24_reg == 1'd0));
end

assign grp_fu_162_p0 = gmem1_addr_read_reg_294;

assign grp_fu_232_p_ce = grp_fu_172_ce;

assign grp_fu_232_p_din0 = mul_reg_319;

assign grp_fu_232_p_din1 = conv3_mid2;

assign grp_fu_232_p_opcode = 2'd0;

assign icmp_ln16_1_fu_212_p2 = ((add_ln16_fu_206_p2 == 7'd112) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_200_p2 = ((ap_sig_allocacmp_w_1 == 7'd112) ? 1'b1 : 1'b0);

assign m_axi_gmem1_ARADDR = sext_ln16_cast_reg_275;

assign m_axi_gmem1_ARBURST = 2'd0;

assign m_axi_gmem1_ARCACHE = 4'd0;

assign m_axi_gmem1_ARID = 1'd0;

assign m_axi_gmem1_ARLEN = 32'd112;

assign m_axi_gmem1_ARLOCK = 2'd0;

assign m_axi_gmem1_ARPROT = 3'd0;

assign m_axi_gmem1_ARQOS = 4'd0;

assign m_axi_gmem1_ARREGION = 4'd0;

assign m_axi_gmem1_ARSIZE = 3'd0;

assign m_axi_gmem1_ARUSER = 1'd0;

assign m_axi_gmem1_AWADDR = 64'd0;

assign m_axi_gmem1_AWBURST = 2'd0;

assign m_axi_gmem1_AWCACHE = 4'd0;

assign m_axi_gmem1_AWID = 1'd0;

assign m_axi_gmem1_AWLEN = 32'd0;

assign m_axi_gmem1_AWLOCK = 2'd0;

assign m_axi_gmem1_AWPROT = 3'd0;

assign m_axi_gmem1_AWQOS = 4'd0;

assign m_axi_gmem1_AWREGION = 4'd0;

assign m_axi_gmem1_AWSIZE = 3'd0;

assign m_axi_gmem1_AWUSER = 1'd0;

assign m_axi_gmem1_AWVALID = 1'b0;

assign m_axi_gmem1_BREADY = 1'b0;

assign m_axi_gmem1_WDATA = 32'd0;

assign m_axi_gmem1_WID = 1'd0;

assign m_axi_gmem1_WLAST = 1'b0;

assign m_axi_gmem1_WSTRB = 4'd0;

assign m_axi_gmem1_WUSER = 1'd0;

assign m_axi_gmem1_WVALID = 1'b0;

assign m_axi_gmem2_ARADDR = 64'd0;

assign m_axi_gmem2_ARBURST = 2'd0;

assign m_axi_gmem2_ARCACHE = 4'd0;

assign m_axi_gmem2_ARID = 1'd0;

assign m_axi_gmem2_ARLEN = 32'd0;

assign m_axi_gmem2_ARLOCK = 2'd0;

assign m_axi_gmem2_ARPROT = 3'd0;

assign m_axi_gmem2_ARQOS = 4'd0;

assign m_axi_gmem2_ARREGION = 4'd0;

assign m_axi_gmem2_ARSIZE = 3'd0;

assign m_axi_gmem2_ARUSER = 1'd0;

assign m_axi_gmem2_ARVALID = 1'b0;

assign m_axi_gmem2_AWADDR = sext_ln16_1_cast_reg_270;

assign m_axi_gmem2_AWBURST = 2'd0;

assign m_axi_gmem2_AWCACHE = 4'd0;

assign m_axi_gmem2_AWID = 1'd0;

assign m_axi_gmem2_AWLEN = 32'd112;

assign m_axi_gmem2_AWLOCK = 2'd0;

assign m_axi_gmem2_AWPROT = 3'd0;

assign m_axi_gmem2_AWQOS = 4'd0;

assign m_axi_gmem2_AWREGION = 4'd0;

assign m_axi_gmem2_AWSIZE = 3'd0;

assign m_axi_gmem2_AWUSER = 1'd0;

assign m_axi_gmem2_RREADY = 1'b0;

assign m_axi_gmem2_WDATA = conv4_reg_335;

assign m_axi_gmem2_WID = 1'd0;

assign m_axi_gmem2_WLAST = 1'b0;

assign m_axi_gmem2_WSTRB = 4'd15;

assign m_axi_gmem2_WUSER = 1'd0;

assign sext_ln16_1_cast_fu_184_p1 = $signed(sext_ln16_1);

assign sext_ln16_cast_fu_188_p1 = $signed(sext_ln16);

endmodule //kernel_stage0_BatchNorm_4_5_6_7_11_13_1_Pipeline_VITIS_LOOP_16_4
