// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_stage0_DW_conv_1_2_3_12_1_Pipeline_In_Channel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln60,
        bitcast_ln64,
        sext_ln62,
        in_r,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        sext_ln63,
        kernel,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        add8122_out,
        add8122_out_ap_vld,
        add_out,
        add_out_ap_vld,
        ap_return,
        grp_fu_348_p_din0,
        grp_fu_348_p_din1,
        grp_fu_348_p_opcode,
        grp_fu_348_p_dout0,
        grp_fu_348_p_ce,
        grp_fu_1590_p_din0,
        grp_fu_1590_p_din1,
        grp_fu_1590_p_dout0,
        grp_fu_1590_p_ce
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_state2 = 39'd2;
parameter    ap_ST_fsm_state3 = 39'd4;
parameter    ap_ST_fsm_state4 = 39'd8;
parameter    ap_ST_fsm_state5 = 39'd16;
parameter    ap_ST_fsm_state6 = 39'd32;
parameter    ap_ST_fsm_state7 = 39'd64;
parameter    ap_ST_fsm_state8 = 39'd128;
parameter    ap_ST_fsm_state9 = 39'd256;
parameter    ap_ST_fsm_state10 = 39'd512;
parameter    ap_ST_fsm_state11 = 39'd1024;
parameter    ap_ST_fsm_state12 = 39'd2048;
parameter    ap_ST_fsm_state13 = 39'd4096;
parameter    ap_ST_fsm_state14 = 39'd8192;
parameter    ap_ST_fsm_state15 = 39'd16384;
parameter    ap_ST_fsm_state16 = 39'd32768;
parameter    ap_ST_fsm_state17 = 39'd65536;
parameter    ap_ST_fsm_state18 = 39'd131072;
parameter    ap_ST_fsm_state19 = 39'd262144;
parameter    ap_ST_fsm_state20 = 39'd524288;
parameter    ap_ST_fsm_state21 = 39'd1048576;
parameter    ap_ST_fsm_state22 = 39'd2097152;
parameter    ap_ST_fsm_state23 = 39'd4194304;
parameter    ap_ST_fsm_state24 = 39'd8388608;
parameter    ap_ST_fsm_state25 = 39'd16777216;
parameter    ap_ST_fsm_state26 = 39'd33554432;
parameter    ap_ST_fsm_state27 = 39'd67108864;
parameter    ap_ST_fsm_state28 = 39'd134217728;
parameter    ap_ST_fsm_state29 = 39'd268435456;
parameter    ap_ST_fsm_state30 = 39'd536870912;
parameter    ap_ST_fsm_state31 = 39'd1073741824;
parameter    ap_ST_fsm_state32 = 39'd2147483648;
parameter    ap_ST_fsm_state33 = 39'd4294967296;
parameter    ap_ST_fsm_state34 = 39'd8589934592;
parameter    ap_ST_fsm_state35 = 39'd17179869184;
parameter    ap_ST_fsm_state36 = 39'd34359738368;
parameter    ap_ST_fsm_state37 = 39'd68719476736;
parameter    ap_ST_fsm_state38 = 39'd137438953472;
parameter    ap_ST_fsm_state39 = 39'd274877906944;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] sext_ln60;
input  [31:0] bitcast_ln64;
input  [16:0] sext_ln62;
input  [63:0] in_r;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [63:0] m_axi_gmem0_AWADDR;
output  [0:0] m_axi_gmem0_AWID;
output  [31:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [0:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [31:0] m_axi_gmem0_WDATA;
output  [3:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [0:0] m_axi_gmem0_WID;
output  [0:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [63:0] m_axi_gmem0_ARADDR;
output  [0:0] m_axi_gmem0_ARID;
output  [31:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [0:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [31:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [0:0] m_axi_gmem0_RID;
input  [8:0] m_axi_gmem0_RFIFONUM;
input  [0:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [0:0] m_axi_gmem0_BID;
input  [0:0] m_axi_gmem0_BUSER;
input  [10:0] sext_ln63;
input  [63:0] kernel;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
output  [31:0] add8122_out;
output   add8122_out_ap_vld;
output  [31:0] add_out;
output   add_out_ap_vld;
output  [0:0] ap_return;
output  [31:0] grp_fu_348_p_din0;
output  [31:0] grp_fu_348_p_din1;
output  [1:0] grp_fu_348_p_opcode;
input  [31:0] grp_fu_348_p_dout0;
output   grp_fu_348_p_ce;
output  [31:0] grp_fu_1590_p_din0;
output  [31:0] grp_fu_1590_p_din1;
input  [31:0] grp_fu_1590_p_dout0;
output   grp_fu_1590_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem0_ARVALID;
reg m_axi_gmem0_RREADY;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg[31:0] add8122_out;
reg add8122_out_ap_vld;
reg add_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem0_blk_n_AR;
wire    ap_CS_fsm_state3;
reg   [0:0] icmp_ln60_reg_459;
reg    gmem0_blk_n_R;
wire    ap_CS_fsm_state10;
reg    gmem_blk_n_AR;
reg    gmem_blk_n_R;
wire  signed [61:0] sext_ln63_cast_fu_207_p1;
reg  signed [61:0] sext_ln63_cast_reg_444;
wire  signed [61:0] sext_ln62_cast_fu_211_p1;
reg  signed [61:0] sext_ln62_cast_reg_449;
reg   [63:0] in_ch_1_reg_454;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln60_fu_240_p2;
wire   [63:0] add_ln65_fu_246_p2;
reg   [63:0] add_ln65_reg_463;
reg   [63:0] gmem0_addr_reg_468;
reg   [63:0] gmem_addr_reg_474;
reg   [31:0] gmem0_addr_read_reg_485;
reg   [31:0] gmem_addr_read_reg_490;
wire   [31:0] bitcast_ln64_1_fu_376_p1;
wire    ap_CS_fsm_state11;
wire   [31:0] bitcast_ln64_2_fu_380_p1;
reg   [31:0] mul_reg_505;
wire    ap_CS_fsm_state12;
reg   [31:0] add8122_load_reg_510;
wire    ap_CS_fsm_state36;
reg   [31:0] add_reg_516;
wire    ap_CS_fsm_state37;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_186_p4;
reg   [0:0] UnifiedRetVal_reg_182;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state38;
wire  signed [63:0] sext_ln64_fu_306_p1;
wire  signed [63:0] sext_ln64_1_fu_350_p1;
reg    ap_block_state3_io;
reg    ap_block_state10;
reg   [31:0] add8122_fu_96;
wire   [0:0] icmp_ln66_fu_393_p2;
reg   [63:0] in_ch_fu_100;
wire   [63:0] add_ln66_fu_384_p2;
wire  signed [63:0] sext_ln60_cast_fu_215_p1;
reg   [63:0] kernelChannelIdx_fu_104;
wire  signed [61:0] mul_ln62_fu_256_p0;
wire   [16:0] mul_ln62_fu_256_p1;
wire   [61:0] mul_ln62_fu_256_p2;
wire   [58:0] trunc_ln63_1_fu_271_p1;
wire   [61:0] add_ln64_3_fu_262_p2;
wire   [63:0] shl_ln3_fu_283_p3;
wire   [63:0] add_ln64_fu_291_p2;
wire   [61:0] trunc_ln64_1_fu_296_p4;
wire   [61:0] trunc_ln63_fu_267_p1;
wire   [61:0] add_ln64_4_fu_316_p2;
wire   [61:0] shl_ln2_fu_275_p3;
wire   [61:0] add_ln64_2_fu_321_p2;
wire   [63:0] shl_ln64_1_fu_327_p3;
wire   [63:0] add_ln64_1_fu_335_p2;
wire   [61:0] trunc_ln64_2_fu_340_p4;
wire   [31:0] trunc_ln66_fu_360_p1;
wire   [31:0] grp_fu_370_p0;
wire   [2:0] grp_fu_370_p1;
wire   [2:0] grp_fu_370_p2;
wire   [2:0] trunc_ln66_1_fu_389_p1;
reg    grp_fu_370_ce;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
reg   [0:0] ap_return_preg;
reg   [38:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 39'd1;
#0 ap_return_preg = 1'd0;
end

kernel_stage0_mul_62s_17ns_62_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 62 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 62 ))
mul_62s_17ns_62_1_1_U3(
    .din0(mul_ln62_fu_256_p0),
    .din1(mul_ln62_fu_256_p1),
    .dout(mul_ln62_fu_256_p2)
);

kernel_stage0_srem_32ns_3ns_3_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 3 ))
srem_32ns_3ns_3_36_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_370_p0),
    .din1(grp_fu_370_p1),
    .ce(grp_fu_370_ce),
    .dout(grp_fu_370_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state38)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_186_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) & (icmp_ln60_reg_459 == 1'd1))) begin
        UnifiedRetVal_reg_182 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        UnifiedRetVal_reg_182 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add8122_fu_96 <= bitcast_ln64;
    end else if (((icmp_ln66_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37) & (icmp_ln60_reg_459 == 1'd1))) begin
        add8122_fu_96 <= grp_fu_348_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_ch_fu_100 <= sext_ln60_cast_fu_215_p1;
    end else if (((icmp_ln66_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37) & (icmp_ln60_reg_459 == 1'd1))) begin
        in_ch_fu_100 <= add_ln66_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        kernelChannelIdx_fu_104 <= 64'd0;
    end else if (((icmp_ln66_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37) & (icmp_ln60_reg_459 == 1'd1))) begin
        kernelChannelIdx_fu_104 <= add_ln65_reg_463;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (icmp_ln60_reg_459 == 1'd1))) begin
        add8122_load_reg_510 <= add8122_fu_96;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln65_reg_463 <= add_ln65_fu_246_p2;
        icmp_ln60_reg_459 <= icmp_ln60_fu_240_p2;
        in_ch_1_reg_454 <= in_ch_fu_100;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (icmp_ln60_reg_459 == 1'd1))) begin
        add_reg_516 <= grp_fu_348_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln60_reg_459 == 1'd1))) begin
        gmem0_addr_read_reg_485 <= m_axi_gmem0_RDATA;
        gmem_addr_read_reg_490 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_240_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem0_addr_reg_468 <= sext_ln64_fu_306_p1;
        gmem_addr_reg_474 <= sext_ln64_1_fu_350_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln60_reg_459 == 1'd1))) begin
        mul_reg_505 <= grp_fu_1590_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sext_ln62_cast_reg_449 <= sext_ln62_cast_fu_211_p1;
        sext_ln63_cast_reg_444 <= sext_ln63_cast_fu_207_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        add8122_out = add8122_fu_96;
    end else if (((1'b1 == ap_CS_fsm_state38) & (icmp_ln60_reg_459 == 1'd1))) begin
        add8122_out = add8122_load_reg_510;
    end else begin
        add8122_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | ((1'b1 == ap_CS_fsm_state38) & (icmp_ln60_reg_459 == 1'd1)))) begin
        add8122_out_ap_vld = 1'b1;
    end else begin
        add8122_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) & (icmp_ln60_reg_459 == 1'd1))) begin
        add_out_ap_vld = 1'b1;
    end else begin
        add_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln60_reg_459 == 1'd1) & (m_axi_gmem_RVALID == 1'b0)) | ((icmp_ln60_reg_459 == 1'd1) & (m_axi_gmem0_RVALID == 1'b0)))) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_io)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) & (icmp_ln60_reg_459 == 1'd1))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_186_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_186_p4 = UnifiedRetVal_reg_182;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_186_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln60_reg_459 == 1'd1))) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln60_reg_459 == 1'd1))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln60_reg_459 == 1'd1))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln60_reg_459 == 1'd1))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state2) | (~(((icmp_ln60_reg_459 == 1'd1) & (m_axi_gmem_RVALID == 1'b0)) | ((icmp_ln60_reg_459 == 1'd1) & (m_axi_gmem0_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state10)) | ((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3)))) begin
        grp_fu_370_ce = 1'b1;
    end else begin
        grp_fu_370_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln60_reg_459 == 1'd1))) begin
        m_axi_gmem0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln60_reg_459 == 1'd1) & (m_axi_gmem_RVALID == 1'b0)) | ((icmp_ln60_reg_459 == 1'd1) & (m_axi_gmem0_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln60_reg_459 == 1'd1))) begin
        m_axi_gmem0_RREADY = 1'b1;
    end else begin
        m_axi_gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln60_reg_459 == 1'd1))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln60_reg_459 == 1'd1) & (m_axi_gmem_RVALID == 1'b0)) | ((icmp_ln60_reg_459 == 1'd1) & (m_axi_gmem0_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln60_reg_459 == 1'd1))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if ((~(((icmp_ln60_reg_459 == 1'd1) & (m_axi_gmem_RVALID == 1'b0)) | ((icmp_ln60_reg_459 == 1'd1) & (m_axi_gmem0_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((icmp_ln66_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37) & (icmp_ln60_reg_459 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state37) & (icmp_ln60_reg_459 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_1_fu_335_p2 = (shl_ln64_1_fu_327_p3 + kernel);

assign add_ln64_2_fu_321_p2 = (add_ln64_4_fu_316_p2 + shl_ln2_fu_275_p3);

assign add_ln64_3_fu_262_p2 = ($signed(sext_ln62_cast_reg_449) + $signed(mul_ln62_fu_256_p2));

assign add_ln64_4_fu_316_p2 = ($signed(trunc_ln63_fu_267_p1) + $signed(sext_ln63_cast_reg_444));

assign add_ln64_fu_291_p2 = (shl_ln3_fu_283_p3 + in_r);

assign add_ln65_fu_246_p2 = (kernelChannelIdx_fu_104 + 64'd1);

assign add_ln66_fu_384_p2 = (in_ch_1_reg_454 + 64'd1);

assign add_out = add_reg_516;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10 = (((icmp_ln60_reg_459 == 1'd1) & (m_axi_gmem_RVALID == 1'b0)) | ((icmp_ln60_reg_459 == 1'd1) & (m_axi_gmem0_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = (((m_axi_gmem0_ARREADY == 1'b0) & (icmp_ln60_reg_459 == 1'd1)) | ((icmp_ln60_reg_459 == 1'd1) & (m_axi_gmem_ARREADY == 1'b0)));
end

assign bitcast_ln64_1_fu_376_p1 = gmem0_addr_read_reg_485;

assign bitcast_ln64_2_fu_380_p1 = gmem_addr_read_reg_490;

assign grp_fu_1590_p_ce = 1'b1;

assign grp_fu_1590_p_din0 = bitcast_ln64_1_fu_376_p1;

assign grp_fu_1590_p_din1 = bitcast_ln64_2_fu_380_p1;

assign grp_fu_348_p_ce = 1'b1;

assign grp_fu_348_p_din0 = add8122_fu_96;

assign grp_fu_348_p_din1 = mul_reg_505;

assign grp_fu_348_p_opcode = 2'd0;

assign grp_fu_370_p0 = (trunc_ln66_fu_360_p1 + 32'd1);

assign grp_fu_370_p1 = 32'd3;

assign icmp_ln60_fu_240_p2 = (($signed(in_ch_fu_100) < $signed(64'd3)) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_393_p2 = ((trunc_ln66_1_fu_389_p1 == 3'd0) ? 1'b1 : 1'b0);

assign m_axi_gmem0_ARADDR = gmem0_addr_reg_468;

assign m_axi_gmem0_ARBURST = 2'd0;

assign m_axi_gmem0_ARCACHE = 4'd0;

assign m_axi_gmem0_ARID = 1'd0;

assign m_axi_gmem0_ARLEN = 32'd1;

assign m_axi_gmem0_ARLOCK = 2'd0;

assign m_axi_gmem0_ARPROT = 3'd0;

assign m_axi_gmem0_ARQOS = 4'd0;

assign m_axi_gmem0_ARREGION = 4'd0;

assign m_axi_gmem0_ARSIZE = 3'd0;

assign m_axi_gmem0_ARUSER = 1'd0;

assign m_axi_gmem0_AWADDR = 64'd0;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 32'd0;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_AWVALID = 1'b0;

assign m_axi_gmem0_BREADY = 1'b0;

assign m_axi_gmem0_WDATA = 32'd0;

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WSTRB = 4'd0;

assign m_axi_gmem0_WUSER = 1'd0;

assign m_axi_gmem0_WVALID = 1'b0;

assign m_axi_gmem_ARADDR = gmem_addr_reg_474;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign mul_ln62_fu_256_p0 = in_ch_fu_100[61:0];

assign mul_ln62_fu_256_p1 = 62'd50176;

assign sext_ln60_cast_fu_215_p1 = $signed(sext_ln60);

assign sext_ln62_cast_fu_211_p1 = $signed(sext_ln62);

assign sext_ln63_cast_fu_207_p1 = $signed(sext_ln63);

assign sext_ln64_1_fu_350_p1 = $signed(trunc_ln64_2_fu_340_p4);

assign sext_ln64_fu_306_p1 = $signed(trunc_ln64_1_fu_296_p4);

assign shl_ln2_fu_275_p3 = {{trunc_ln63_1_fu_271_p1}, {3'd0}};

assign shl_ln3_fu_283_p3 = {{add_ln64_3_fu_262_p2}, {2'd0}};

assign shl_ln64_1_fu_327_p3 = {{add_ln64_2_fu_321_p2}, {2'd0}};

assign trunc_ln63_1_fu_271_p1 = kernelChannelIdx_fu_104[58:0];

assign trunc_ln63_fu_267_p1 = kernelChannelIdx_fu_104[61:0];

assign trunc_ln64_1_fu_296_p4 = {{add_ln64_fu_291_p2[63:2]}};

assign trunc_ln64_2_fu_340_p4 = {{add_ln64_1_fu_335_p2[63:2]}};

assign trunc_ln66_1_fu_389_p1 = grp_fu_370_p2[2:0];

assign trunc_ln66_fu_360_p1 = in_ch_fu_100[31:0];

endmodule //kernel_stage0_DW_conv_1_2_3_12_1_Pipeline_In_Channel
