-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_stage0_BatchNorm_3_4_5_6_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    img_ce0 : OUT STD_LOGIC;
    img_we0 : OUT STD_LOGIC;
    img_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    img_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    img_ce1 : OUT STD_LOGIC;
    img_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    img_offset : IN STD_LOGIC_VECTOR (18 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    running_mean : IN STD_LOGIC_VECTOR (63 downto 0);
    running_var : IN STD_LOGIC_VECTOR (63 downto 0);
    gamma : IN STD_LOGIC_VECTOR (63 downto 0);
    beta : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel_stage0_BatchNorm_3_4_5_6_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv64_3EB0C6F7A0B5ED8D : STD_LOGIC_VECTOR (63 downto 0) := "0011111010110000110001101111011110100000101101011110110110001101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_A80 : STD_LOGIC_VECTOR (11 downto 0) := "101010000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_70 : STD_LOGIC_VECTOR (6 downto 0) := "1110000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_230 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal img_offset_cast_fu_236_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal img_offset_cast_reg_853 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_cast4_mid_reg_858 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast5_mid_reg_863 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast6_mid_reg_868 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast7_mid_reg_873 : STD_LOGIC_VECTOR (61 downto 0);
    signal gmem_addr_reg_881 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln13_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_25_reg_887 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_26_reg_893 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_27_reg_899 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln17_fu_740_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln17_reg_905 : STD_LOGIC_VECTOR (19 downto 0);
    signal gmem_addr_read_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_25_read_reg_915 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_mid2_reg_920 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal gmem_addr_26_read_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_27_read_reg_930 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_mid2_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv3_mid2_reg_935 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln14_fu_797_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln14_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_945 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start : STD_LOGIC;
    signal grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_done : STD_LOGIC;
    signal grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_idle : STD_LOGIC;
    signal grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_ready : STD_LOGIC;
    signal grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_ce0 : STD_LOGIC;
    signal grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_we0 : STD_LOGIC;
    signal grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_address1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_ce1 : STD_LOGIC;
    signal grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_ce : STD_LOGIC;
    signal grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal sext_ln14_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln14_1_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln14_2_fu_658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln14_3_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal h_fu_108 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln15_fu_745_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_fu_112 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln14_6_fu_696_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_116 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln14_7_fu_757_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten138_fu_120 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln13_fu_414_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_213_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln14_1_fu_785_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln14_2_fu_789_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_mid2_fu_216_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_shl2_fu_306_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_fu_318_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_314_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_cast_fu_326_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_fu_336_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast10_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_157_fu_348_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_158_fu_353_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_159_fu_358_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_160_fu_363_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_330_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_cast4_fu_368_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast5_fu_378_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast6_fu_388_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast7_fu_398_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln15_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln13_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13_fu_432_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln13_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_fu_494_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_mid1_fu_514_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_mid1_fu_526_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_mid1_fu_522_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_cast_mid1_fu_534_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_mid1_fu_538_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln13_1_fu_440_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_mid_fu_552_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast10_mid1_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_mid121_fu_564_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_mid1_fu_584_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln13_2_fu_448_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln14_2_fu_594_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_mid123_fu_569_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_mid1_fu_612_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln13_3_fu_455_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln14_3_fu_622_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_mid125_fu_574_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast6_mid1_fu_640_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln13_4_fu_462_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln14_4_fu_650_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_mid127_fu_579_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast7_mid1_fu_668_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln13_5_fu_469_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln14_5_fu_678_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln14_fu_506_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln15_fu_704_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln14_1_fu_544_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_162_fu_708_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl5_fu_722_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl4_fu_714_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl5_cast_fu_730_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal empty_163_fu_734_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln14_1_fu_751_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_219_ce : STD_LOGIC;
    signal grp_fu_224_ce : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_stage0_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        add_ln17 : IN STD_LOGIC_VECTOR (19 downto 0);
        img_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        img_ce0 : OUT STD_LOGIC;
        img_we0 : OUT STD_LOGIC;
        img_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
        img_ce1 : OUT STD_LOGIC;
        img_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bitcast_ln14 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp : IN STD_LOGIC_VECTOR (63 downto 0);
        conv2_mid2 : IN STD_LOGIC_VECTOR (63 downto 0);
        conv3_mid2 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_219_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_219_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_219_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_219_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_219_p_ce : OUT STD_LOGIC );
    end component;


    component kernel_stage0_fpext_32ns_64_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_stage0_dadd_64ns_64ns_64_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_stage0_dsqrt_64ns_64ns_64_8_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202 : component kernel_stage0_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start,
        ap_done => grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_done,
        ap_idle => grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_idle,
        ap_ready => grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_ready,
        add_ln17 => add_ln17_reg_905,
        img_address0 => grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_address0,
        img_ce0 => grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_ce0,
        img_we0 => grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_we0,
        img_d0 => grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_d0,
        img_address1 => grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_address1,
        img_ce1 => grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_ce1,
        img_q1 => img_q1,
        bitcast_ln14 => bitcast_ln14_reg_940,
        tmp => tmp_reg_945,
        conv2_mid2 => reg_230,
        conv3_mid2 => conv3_mid2_reg_935,
        grp_fu_219_p_din0 => grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_din0,
        grp_fu_219_p_din1 => grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_din1,
        grp_fu_219_p_opcode => grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_opcode,
        grp_fu_219_p_dout0 => grp_fu_219_p2,
        grp_fu_219_p_ce => grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_ce);

    fpext_32ns_64_1_no_dsp_1_U40 : component kernel_stage0_fpext_32ns_64_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_213_p0,
        dout => grp_fu_213_p1);

    fpext_32ns_64_1_no_dsp_1_U41 : component kernel_stage0_fpext_32ns_64_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => conv3_mid2_fu_216_p0,
        dout => conv3_mid2_fu_216_p1);

    dadd_64ns_64ns_64_2_full_dsp_1_U42 : component kernel_stage0_dadd_64ns_64ns_64_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_219_p0,
        din1 => grp_fu_219_p1,
        ce => grp_fu_219_ce,
        dout => grp_fu_219_p2);

    dsqrt_64ns_64ns_64_8_no_dsp_1_U43 : component kernel_stage0_dsqrt_64ns_64ns_64_8_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => add_mid2_reg_920,
        ce => grp_fu_224_ce,
        dout => grp_fu_224_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_ready = ap_const_logic_1)) then 
                    grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_fu_112 <= ap_const_lv5_0;
            elsif (((icmp_ln13_fu_408_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_fu_112 <= select_ln14_6_fu_696_p3;
            end if; 
        end if;
    end process;

    h_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h_fu_108 <= ap_const_lv7_0;
            elsif (((icmp_ln13_fu_408_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                h_fu_108 <= add_ln15_fu_745_p2;
            end if; 
        end if;
    end process;

    indvar_flatten138_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten138_fu_120 <= ap_const_lv12_0;
            elsif (((icmp_ln13_fu_408_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten138_fu_120 <= add_ln13_fu_414_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_116 <= ap_const_lv12_0;
            elsif (((icmp_ln13_fu_408_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_fu_116 <= select_ln14_7_fu_757_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_408_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln17_reg_905 <= add_ln17_fu_740_p2;
                gmem_addr_25_reg_887 <= sext_ln14_1_fu_630_p1;
                gmem_addr_26_reg_893 <= sext_ln14_2_fu_658_p1;
                gmem_addr_27_reg_899 <= sext_ln14_3_fu_686_p1;
                gmem_addr_reg_881 <= sext_ln14_fu_602_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_mid2_reg_920 <= grp_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                bitcast_ln14_reg_940 <= bitcast_ln14_fu_797_p1;
                tmp_reg_945 <= grp_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                conv3_mid2_reg_935 <= conv3_mid2_fu_216_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                gmem_addr_25_read_reg_915 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                gmem_addr_26_read_reg_925 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                gmem_addr_27_read_reg_930 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                gmem_addr_read_reg_910 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    img_offset_cast_reg_853(18 downto 0) <= img_offset_cast_fu_236_p1(18 downto 0);
                p_cast4_mid_reg_858 <= running_mean(63 downto 2);
                p_cast5_mid_reg_863 <= running_var(63 downto 2);
                p_cast6_mid_reg_868 <= gamma(63 downto 2);
                p_cast7_mid_reg_873 <= beta(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_230 <= grp_fu_213_p1;
            end if;
        end if;
    end process;
    img_offset_cast_reg_853(19) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state19, ap_CS_fsm_state6, ap_CS_fsm_state20, ap_CS_fsm_state2, icmp_ln13_fu_408_p2, grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_done, ap_CS_fsm_state23)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln13_fu_408_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln13_fu_414_p2 <= std_logic_vector(unsigned(indvar_flatten138_fu_120) + unsigned(ap_const_lv12_1));
    add_ln14_1_fu_751_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_116) + unsigned(ap_const_lv12_1));
    add_ln14_fu_494_p2 <= std_logic_vector(unsigned(select_ln13_fu_432_p3) + unsigned(ap_const_lv5_1));
    add_ln15_fu_745_p2 <= std_logic_vector(unsigned(select_ln14_fu_506_p3) + unsigned(ap_const_lv7_1));
    add_ln17_fu_740_p2 <= std_logic_vector(unsigned(empty_163_fu_734_p2) + unsigned(img_offset_cast_reg_853));
    and_ln13_fu_488_p2 <= (xor_ln13_fu_476_p2 and icmp_ln15_fu_482_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state10_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state19_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;

    ap_ST_fsm_state23_blk_assign_proc : process(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_done)
    begin
        if ((grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln13_fu_408_p2)
    begin
        if ((((icmp_ln13_fu_408_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln13_fu_408_p2)
    begin
        if (((icmp_ln13_fu_408_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln14_1_fu_785_p1 <= gmem_addr_25_read_reg_915;
    bitcast_ln14_2_fu_789_p1 <= gmem_addr_26_read_reg_925;
    bitcast_ln14_fu_797_p1 <= gmem_addr_read_reg_910;
    conv3_mid2_fu_216_p0 <= gmem_addr_27_read_reg_930;
    empty_157_fu_348_p2 <= std_logic_vector(unsigned(p_cast10_fu_344_p1) + unsigned(running_mean));
    empty_158_fu_353_p2 <= std_logic_vector(unsigned(p_cast10_fu_344_p1) + unsigned(running_var));
    empty_159_fu_358_p2 <= std_logic_vector(unsigned(p_cast10_fu_344_p1) + unsigned(gamma));
    empty_160_fu_363_p2 <= std_logic_vector(unsigned(p_cast10_fu_344_p1) + unsigned(beta));
    empty_162_fu_708_p2 <= std_logic_vector(unsigned(zext_ln15_fu_704_p1) + unsigned(select_ln14_1_fu_544_p3));
    empty_163_fu_734_p2 <= std_logic_vector(unsigned(p_shl4_fu_714_p3) - unsigned(p_shl5_cast_fu_730_p1));
    empty_fu_330_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_314_p1) - unsigned(p_shl3_cast_fu_326_p1));

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start <= grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start_reg;

    grp_fu_213_p0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state21, bitcast_ln14_1_fu_785_p1, bitcast_ln14_2_fu_789_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_213_p0 <= bitcast_ln14_2_fu_789_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_213_p0 <= bitcast_ln14_1_fu_785_p1;
        else 
            grp_fu_213_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_219_ce_assign_proc : process(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_ce, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_219_ce <= grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_ce;
        else 
            grp_fu_219_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_219_p0_assign_proc : process(reg_230, grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_din0, ap_CS_fsm_state23, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_219_p0 <= grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_219_p0 <= reg_230;
        else 
            grp_fu_219_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_219_p1_assign_proc : process(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_din1, ap_CS_fsm_state23, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_219_p1 <= grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_219_p1 <= ap_const_lv64_3EB0C6F7A0B5ED8D;
        else 
            grp_fu_219_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_224_ce_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            grp_fu_224_ce <= ap_const_logic_1;
        else 
            grp_fu_224_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln13_fu_408_p2 <= "1" when (indvar_flatten138_fu_120 = ap_const_lv12_A80) else "0";
    icmp_ln14_fu_426_p2 <= "1" when (indvar_flatten_fu_116 = ap_const_lv12_A80) else "0";
    icmp_ln15_fu_482_p2 <= "1" when (h_fu_108 = ap_const_lv7_70) else "0";
    img_address0 <= grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_address0;
    img_address1 <= grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_address1;
    img_ce0 <= grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_ce0;
    img_ce1 <= grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_ce1;
    img_d0 <= grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_d0;
    img_offset_cast_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_offset),20));
    img_we0 <= grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_we0;

    m_axi_gmem_ARADDR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, gmem_addr_reg_881, gmem_addr_25_reg_887, gmem_addr_26_reg_893, gmem_addr_27_reg_899)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                m_axi_gmem_ARADDR <= gmem_addr_27_reg_899;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                m_axi_gmem_ARADDR <= gmem_addr_26_reg_893;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                m_axi_gmem_ARADDR <= gmem_addr_25_reg_887;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_axi_gmem_ARADDR <= gmem_addr_reg_881;
            else 
                m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if ((((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((m_axi_gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    or_ln14_fu_500_p2 <= (icmp_ln14_fu_426_p2 or and_ln13_fu_488_p2);
    p_cast10_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_336_p3),64));
    p_cast10_mid1_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid_fu_552_p3),64));
    p_cast4_fu_368_p4 <= empty_157_fu_348_p2(63 downto 2);
    p_cast4_mid1_fu_584_p4 <= p_mid121_fu_564_p2(63 downto 2);
    p_cast5_fu_378_p4 <= empty_158_fu_353_p2(63 downto 2);
    p_cast5_mid1_fu_612_p4 <= p_mid123_fu_569_p2(63 downto 2);
    p_cast6_fu_388_p4 <= empty_159_fu_358_p2(63 downto 2);
    p_cast6_mid1_fu_640_p4 <= p_mid125_fu_574_p2(63 downto 2);
    p_cast7_fu_398_p4 <= empty_160_fu_363_p2(63 downto 2);
    p_cast7_mid1_fu_668_p4 <= p_mid127_fu_579_p2(63 downto 2);
    p_mid121_fu_564_p2 <= std_logic_vector(unsigned(p_cast10_mid1_fu_560_p1) + unsigned(running_mean));
    p_mid123_fu_569_p2 <= std_logic_vector(unsigned(p_cast10_mid1_fu_560_p1) + unsigned(running_var));
    p_mid125_fu_574_p2 <= std_logic_vector(unsigned(p_cast10_mid1_fu_560_p1) + unsigned(gamma));
    p_mid127_fu_579_p2 <= std_logic_vector(unsigned(p_cast10_mid1_fu_560_p1) + unsigned(beta));
    p_mid1_fu_538_p2 <= std_logic_vector(unsigned(p_shl2_cast_mid1_fu_522_p1) - unsigned(p_shl3_cast_mid1_fu_534_p1));
    p_mid_fu_552_p3 <= (add_ln14_fu_494_p2 & ap_const_lv2_0);
    p_shl2_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_306_p3),13));
    p_shl2_cast_mid1_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_mid1_fu_514_p3),13));
    p_shl2_fu_306_p3 <= (c_fu_112 & ap_const_lv7_0);
    p_shl2_mid1_fu_514_p3 <= (add_ln14_fu_494_p2 & ap_const_lv7_0);
    p_shl3_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_318_p3),13));
    p_shl3_cast_mid1_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_mid1_fu_526_p3),13));
    p_shl3_fu_318_p3 <= (c_fu_112 & ap_const_lv4_0);
    p_shl3_mid1_fu_526_p3 <= (add_ln14_fu_494_p2 & ap_const_lv4_0);
    p_shl4_fu_714_p3 <= (empty_162_fu_708_p2 & ap_const_lv7_0);
        p_shl5_cast_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl5_fu_722_p3),20));

    p_shl5_fu_722_p3 <= (empty_162_fu_708_p2 & ap_const_lv4_0);
    select_ln13_1_fu_440_p3 <= 
        ap_const_lv13_0 when (icmp_ln14_fu_426_p2(0) = '1') else 
        empty_fu_330_p2;
    select_ln13_2_fu_448_p3 <= 
        p_cast4_mid_reg_858 when (icmp_ln14_fu_426_p2(0) = '1') else 
        p_cast4_fu_368_p4;
    select_ln13_3_fu_455_p3 <= 
        p_cast5_mid_reg_863 when (icmp_ln14_fu_426_p2(0) = '1') else 
        p_cast5_fu_378_p4;
    select_ln13_4_fu_462_p3 <= 
        p_cast6_mid_reg_868 when (icmp_ln14_fu_426_p2(0) = '1') else 
        p_cast6_fu_388_p4;
    select_ln13_5_fu_469_p3 <= 
        p_cast7_mid_reg_873 when (icmp_ln14_fu_426_p2(0) = '1') else 
        p_cast7_fu_398_p4;
    select_ln13_fu_432_p3 <= 
        ap_const_lv5_0 when (icmp_ln14_fu_426_p2(0) = '1') else 
        c_fu_112;
    select_ln14_1_fu_544_p3 <= 
        p_mid1_fu_538_p2 when (and_ln13_fu_488_p2(0) = '1') else 
        select_ln13_1_fu_440_p3;
    select_ln14_2_fu_594_p3 <= 
        p_cast4_mid1_fu_584_p4 when (and_ln13_fu_488_p2(0) = '1') else 
        select_ln13_2_fu_448_p3;
    select_ln14_3_fu_622_p3 <= 
        p_cast5_mid1_fu_612_p4 when (and_ln13_fu_488_p2(0) = '1') else 
        select_ln13_3_fu_455_p3;
    select_ln14_4_fu_650_p3 <= 
        p_cast6_mid1_fu_640_p4 when (and_ln13_fu_488_p2(0) = '1') else 
        select_ln13_4_fu_462_p3;
    select_ln14_5_fu_678_p3 <= 
        p_cast7_mid1_fu_668_p4 when (and_ln13_fu_488_p2(0) = '1') else 
        select_ln13_5_fu_469_p3;
    select_ln14_6_fu_696_p3 <= 
        add_ln14_fu_494_p2 when (and_ln13_fu_488_p2(0) = '1') else 
        select_ln13_fu_432_p3;
    select_ln14_7_fu_757_p3 <= 
        ap_const_lv12_1 when (icmp_ln14_fu_426_p2(0) = '1') else 
        add_ln14_1_fu_751_p2;
    select_ln14_fu_506_p3 <= 
        ap_const_lv7_0 when (or_ln14_fu_500_p2(0) = '1') else 
        h_fu_108;
        sext_ln14_1_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln14_3_fu_622_p3),64));

        sext_ln14_2_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln14_4_fu_650_p3),64));

        sext_ln14_3_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln14_5_fu_678_p3),64));

        sext_ln14_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln14_2_fu_594_p3),64));

    tmp_6_fu_336_p3 <= (c_fu_112 & ap_const_lv2_0);
    xor_ln13_fu_476_p2 <= (icmp_ln14_fu_426_p2 xor ap_const_lv1_1);
    zext_ln15_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_fu_506_p3),13));
end behav;
