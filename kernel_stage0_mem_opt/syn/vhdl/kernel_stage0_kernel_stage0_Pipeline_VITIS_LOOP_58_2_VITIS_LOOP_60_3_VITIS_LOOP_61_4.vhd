-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_stage0_kernel_stage0_Pipeline_VITIS_LOOP_58_2_VITIS_LOOP_60_3_VITIS_LOOP_61_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_1_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    img_1_ce0 : OUT STD_LOGIC;
    img_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    compute_tmp_1_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    compute_tmp_1_ce0 : OUT STD_LOGIC;
    compute_tmp_1_we0 : OUT STD_LOGIC;
    compute_tmp_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    compute_tmp_1_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    compute_tmp_1_ce1 : OUT STD_LOGIC;
    compute_tmp_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_814_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_814_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_814_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_814_p_ce : OUT STD_LOGIC );
end;


architecture behav of kernel_stage0_kernel_stage0_Pipeline_VITIS_LOOP_58_2_VITIS_LOOP_60_3_VITIS_LOOP_61_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv19_49800 : STD_LOGIC_VECTOR (18 downto 0) := "1001001100000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv14_3100 : STD_LOGIC_VECTOR (13 downto 0) := "11000100000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_24C0 : STD_LOGIC_VECTOR (13 downto 0) := "10010011000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv7_70 : STD_LOGIC_VECTOR (6 downto 0) := "1110000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv19_3100 : STD_LOGIC_VECTOR (18 downto 0) := "0000011000100000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln58_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln58_reg_552 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln58_reg_552_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal c_load_reg_556 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln60_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_561 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_561_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln58_1_fu_209_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln58_1_reg_570 : STD_LOGIC_VECTOR (4 downto 0);
    signal img_1_load_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_tmp_1_addr_reg_590 : STD_LOGIC_VECTOR (19 downto 0);
    signal addr_cmp_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_596 : STD_LOGIC_VECTOR (0 downto 0);
    signal reuse_select_fu_483_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal zext_ln58_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal sext_ln63_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal reuse_addr_reg_fu_84 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_fu_92 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln61_fu_464_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_fu_96 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln60_2_fu_410_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten9_fu_100 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln60_3_fu_233_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal c_fu_104 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln58_2_fu_215_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten41_fu_108 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln58_fu_191_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln60_1_fu_227_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln59_mid1_fu_256_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal or_ln_fu_263_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln58_1_fu_270_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl2_fu_285_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_fu_297_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_293_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl3_cast_fu_305_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_fu_309_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln61_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln58_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_fu_318_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln58_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln60_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln60_fu_349_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_mid1_fu_368_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_mid1_fu_380_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_mid1_fu_376_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl3_cast_mid1_fu_388_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_mid17_fu_392_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln58_3_fu_325_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln60_1_fu_398_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_fu_418_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_496_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_4_fu_418_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln60_fu_360_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_fu_427_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln62_fu_435_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln60_1_cast_fu_406_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln62_fu_439_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_496_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_496_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_496_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component kernel_stage0_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_stage0_mul_mul_5ns_14ns_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component kernel_stage0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_mul_5ns_14ns_19_4_1_U121 : component kernel_stage0_mul_mul_5ns_14ns_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 14,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_496_p0,
        din1 => grp_fu_496_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_496_p2);

    flow_control_loop_pipe_sequential_init_U : component kernel_stage0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    c_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                c_fu_104 <= ap_const_lv5_0;
            elsif (((icmp_ln58_fu_185_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                c_fu_104 <= select_ln58_2_fu_215_p3;
            end if; 
        end if;
    end process;

    h_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    h_fu_96 <= ap_const_lv7_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln58_reg_552_pp0_iter1_reg = ap_const_lv1_0))) then 
                    h_fu_96 <= select_ln60_2_fu_410_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten41_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                indvar_flatten41_fu_108 <= ap_const_lv19_0;
            elsif (((icmp_ln58_fu_185_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indvar_flatten41_fu_108 <= add_ln58_fu_191_p2;
            end if; 
        end if;
    end process;

    indvar_flatten9_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                indvar_flatten9_fu_100 <= ap_const_lv14_0;
            elsif (((icmp_ln58_fu_185_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indvar_flatten9_fu_100 <= select_ln60_3_fu_233_p3;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_84 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln58_reg_552_pp0_iter1_reg = ap_const_lv1_0))) then 
                    reuse_addr_reg_fu_84 <= sext_ln63_fu_445_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_reg_fu_88 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    reuse_reg_fu_88 <= grp_fu_814_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    w_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    w_fu_92 <= ap_const_lv7_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln58_reg_552_pp0_iter1_reg = ap_const_lv1_0))) then 
                    w_fu_92 <= add_ln61_fu_464_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_185_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln58_1_reg_570 <= add_ln58_1_fu_209_p2;
                c_load_reg_556 <= c_fu_104;
                icmp_ln60_reg_561 <= icmp_ln60_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln58_reg_552_pp0_iter1_reg = ap_const_lv1_0))) then
                addr_cmp_reg_596 <= addr_cmp_fu_453_p2;
                compute_tmp_1_addr_reg_590 <= sext_ln63_fu_445_p1(20 - 1 downto 0);
                img_1_load_reg_585 <= img_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln58_reg_552 <= icmp_ln58_fu_185_p2;
                icmp_ln58_reg_552_pp0_iter1_reg <= icmp_ln58_reg_552;
                icmp_ln60_reg_561_pp0_iter1_reg <= icmp_ln60_reg_561;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter2_stage0, ap_idle_pp0_0to1, ap_idle_pp0_1to3, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln58_1_fu_209_p2 <= std_logic_vector(unsigned(c_fu_104) + unsigned(ap_const_lv5_1));
    add_ln58_fu_191_p2 <= std_logic_vector(unsigned(indvar_flatten41_fu_108) + unsigned(ap_const_lv19_1));
    add_ln60_1_fu_227_p2 <= std_logic_vector(unsigned(indvar_flatten9_fu_100) + unsigned(ap_const_lv14_1));
    add_ln60_fu_349_p2 <= std_logic_vector(unsigned(select_ln58_fu_318_p3) + unsigned(ap_const_lv7_1));
    add_ln61_fu_464_p2 <= std_logic_vector(unsigned(select_ln60_fu_360_p3) + unsigned(ap_const_lv7_1));
    add_ln62_fu_439_p2 <= std_logic_vector(unsigned(zext_ln62_fu_435_p1) + unsigned(select_ln60_1_cast_fu_406_p1));
    addr_cmp_fu_453_p2 <= "1" when (reuse_addr_reg_fu_84 = sext_ln63_fu_445_p1) else "0";
    and_ln58_fu_343_p2 <= (xor_ln58_fu_332_p2 and icmp_ln61_fu_337_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln58_fu_185_p2)
    begin
        if (((icmp_ln58_fu_185_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln58_reg_552_pp0_iter1_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln58_reg_552_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    compute_tmp_1_address0 <= compute_tmp_1_addr_reg_590;
    compute_tmp_1_address1 <= sext_ln63_fu_445_p1(20 - 1 downto 0);

    compute_tmp_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compute_tmp_1_ce0 <= ap_const_logic_1;
        else 
            compute_tmp_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    compute_tmp_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compute_tmp_1_ce1 <= ap_const_logic_1;
        else 
            compute_tmp_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    compute_tmp_1_d0 <= grp_fu_814_p_dout0;

    compute_tmp_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compute_tmp_1_we0 <= ap_const_logic_1;
        else 
            compute_tmp_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_309_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_293_p1) - unsigned(p_shl3_cast_fu_305_p1));
    grp_fu_496_p0 <= grp_fu_496_p00(5 - 1 downto 0);
    grp_fu_496_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln58_2_fu_215_p3),19));
    grp_fu_496_p1 <= ap_const_lv19_3100(14 - 1 downto 0);
    grp_fu_814_p_ce <= ap_const_logic_1;
    grp_fu_814_p_din0 <= reuse_select_fu_483_p3;
    grp_fu_814_p_din1 <= img_1_load_reg_585;
    icmp_ln58_fu_185_p2 <= "1" when (indvar_flatten41_fu_108 = ap_const_lv19_49800) else "0";
    icmp_ln60_fu_203_p2 <= "1" when (indvar_flatten9_fu_100 = ap_const_lv14_3100) else "0";
    icmp_ln61_fu_337_p2 <= "1" when (w_fu_92 = ap_const_lv7_70) else "0";
    img_1_address0 <= zext_ln58_fu_277_p1(20 - 1 downto 0);

    img_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            img_1_ce0 <= ap_const_logic_1;
        else 
            img_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln59_mid1_fu_256_p3 <= (ap_const_lv14_24C0 & add_ln58_1_reg_570);
    or_ln60_fu_355_p2 <= (icmp_ln60_reg_561_pp0_iter1_reg or and_ln58_fu_343_p2);
    or_ln_fu_263_p3 <= (ap_const_lv14_24C0 & c_load_reg_556);
    p_mid17_fu_392_p2 <= std_logic_vector(unsigned(p_shl2_cast_mid1_fu_376_p1) - unsigned(p_shl3_cast_mid1_fu_388_p1));
    p_shl2_cast_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_285_p3),15));
    p_shl2_cast_mid1_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_mid1_fu_368_p3),15));
    p_shl2_fu_285_p3 <= (h_fu_96 & ap_const_lv7_0);
    p_shl2_mid1_fu_368_p3 <= (add_ln60_fu_349_p2 & ap_const_lv7_0);
    p_shl3_cast_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_297_p3),15));
    p_shl3_cast_mid1_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_mid1_fu_380_p3),15));
    p_shl3_fu_297_p3 <= (h_fu_96 & ap_const_lv4_0);
    p_shl3_mid1_fu_380_p3 <= (add_ln60_fu_349_p2 & ap_const_lv4_0);
    reuse_select_fu_483_p3 <= 
        reuse_reg_fu_88 when (addr_cmp_reg_596(0) = '1') else 
        compute_tmp_1_q1;
    select_ln58_1_fu_270_p3 <= 
        or_ln59_mid1_fu_256_p3 when (icmp_ln60_reg_561(0) = '1') else 
        or_ln_fu_263_p3;
    select_ln58_2_fu_215_p3 <= 
        add_ln58_1_fu_209_p2 when (icmp_ln60_fu_203_p2(0) = '1') else 
        c_fu_104;
    select_ln58_3_fu_325_p3 <= 
        ap_const_lv15_0 when (icmp_ln60_reg_561_pp0_iter1_reg(0) = '1') else 
        empty_fu_309_p2;
    select_ln58_fu_318_p3 <= 
        ap_const_lv7_0 when (icmp_ln60_reg_561_pp0_iter1_reg(0) = '1') else 
        h_fu_96;
        select_ln60_1_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln60_1_fu_398_p3),20));

    select_ln60_1_fu_398_p3 <= 
        p_mid17_fu_392_p2 when (and_ln58_fu_343_p2(0) = '1') else 
        select_ln58_3_fu_325_p3;
    select_ln60_2_fu_410_p3 <= 
        add_ln60_fu_349_p2 when (and_ln58_fu_343_p2(0) = '1') else 
        select_ln58_fu_318_p3;
    select_ln60_3_fu_233_p3 <= 
        ap_const_lv14_1 when (icmp_ln60_fu_203_p2(0) = '1') else 
        add_ln60_1_fu_227_p2;
    select_ln60_fu_360_p3 <= 
        ap_const_lv7_0 when (or_ln60_fu_355_p2(0) = '1') else 
        w_fu_92;
        sext_ln63_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln62_fu_439_p2),64));

    tmp2_fu_427_p3 <= (tmp_4_fu_418_p4 & select_ln60_fu_360_p3);
    tmp_4_fu_418_p1 <= grp_fu_496_p2;
    tmp_4_fu_418_p4 <= tmp_4_fu_418_p1(18 downto 7);
    xor_ln58_fu_332_p2 <= (icmp_ln60_reg_561_pp0_iter1_reg xor ap_const_lv1_1);
    zext_ln58_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln58_1_fu_270_p3),64));
    zext_ln62_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_427_p3),20));
end behav;
