-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_stage0_kernel_stage0_Pipeline_VITIS_LOOP_18_3_VITIS_LOOP_19_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    phi_mul : IN STD_LOGIC_VECTOR (18 downto 0);
    temp_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_1_out_ap_vld : OUT STD_LOGIC;
    img_1_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    img_1_ce0 : OUT STD_LOGIC;
    img_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    compute_tmp_1_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    compute_tmp_1_ce0 : OUT STD_LOGIC;
    compute_tmp_1_we0 : OUT STD_LOGIC;
    compute_tmp_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_818_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_818_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_818_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_818_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_818_p_ce : OUT STD_LOGIC );
end;


architecture behav of kernel_stage0_kernel_stage0_Pipeline_VITIS_LOOP_18_3_VITIS_LOOP_19_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_3100 : STD_LOGIC_VECTOR (13 downto 0) := "11000100000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv7_70 : STD_LOGIC_VECTOR (6 downto 0) := "1110000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln18_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln18_reg_368 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln20_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln20_reg_372 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal temp_1_fu_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_temp_1_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal w_fu_74 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_fu_305_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_w_load : STD_LOGIC_VECTOR (6 downto 0);
    signal h_fu_78 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln18_2_fu_264_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_h_2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_fu_82 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln18_fu_193_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_shl_fu_157_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_fu_169_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_165_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_cast_fu_177_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln19_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_1_fu_216_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_mid1_fu_222_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_mid1_fu_234_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_mid1_fu_230_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_cast_mid1_fu_242_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_mid1_fu_246_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_fu_181_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln18_1_fu_252_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_fu_272_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln18_fu_208_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_fu_282_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln20_fu_290_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln18_fu_260_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln20_fu_294_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_stage0_fadd_32ns_32ns_32_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_stage0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component kernel_stage0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    h_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln18_fu_187_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    h_fu_78 <= select_ln18_2_fu_264_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    h_fu_78 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln18_fu_187_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_82 <= add_ln18_fu_193_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_82 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    temp_1_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    temp_1_fu_70 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    temp_1_fu_70 <= grp_fu_818_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    w_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln18_fu_187_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    w_fu_74 <= add_ln19_fu_305_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    w_fu_74 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln18_reg_368 <= icmp_ln18_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_187_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sext_ln20_reg_372 <= sext_ln20_fu_300_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln18_1_fu_216_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_h_2) + unsigned(ap_const_lv7_1));
    add_ln18_fu_193_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv14_1));
    add_ln19_fu_305_p2 <= std_logic_vector(unsigned(select_ln18_fu_208_p3) + unsigned(ap_const_lv7_1));
    add_ln20_fu_294_p2 <= std_logic_vector(unsigned(zext_ln20_fu_290_p1) + unsigned(sext_ln18_fu_260_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln18_fu_187_p2)
    begin
        if (((icmp_ln18_fu_187_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_h_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, h_fu_78)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_h_2 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_h_2 <= h_fu_78;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_82;
        end if; 
    end process;


    ap_sig_allocacmp_temp_1_load_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, temp_1_fu_70, grp_fu_818_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_temp_1_load <= grp_fu_818_p_dout0;
        else 
            ap_sig_allocacmp_temp_1_load <= temp_1_fu_70;
        end if; 
    end process;


    ap_sig_allocacmp_w_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, w_fu_74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_w_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_w_load <= w_fu_74;
        end if; 
    end process;

    compute_tmp_1_address0 <= sext_ln20_reg_372(20 - 1 downto 0);

    compute_tmp_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compute_tmp_1_ce0 <= ap_const_logic_1;
        else 
            compute_tmp_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    compute_tmp_1_d0 <= img_1_q0;

    compute_tmp_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compute_tmp_1_we0 <= ap_const_logic_1;
        else 
            compute_tmp_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_181_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_165_p1) - unsigned(p_shl1_cast_fu_177_p1));
    grp_fu_818_p_ce <= ap_const_logic_1;
    grp_fu_818_p_din0 <= ap_sig_allocacmp_temp_1_load;
    grp_fu_818_p_din1 <= img_1_q0;
    grp_fu_818_p_opcode <= ap_const_lv2_0;
    icmp_ln18_fu_187_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv14_3100) else "0";
    icmp_ln19_fu_202_p2 <= "1" when (ap_sig_allocacmp_w_load = ap_const_lv7_70) else "0";
    img_1_address0 <= sext_ln20_fu_300_p1(20 - 1 downto 0);

    img_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_1_ce0 <= ap_const_logic_1;
        else 
            img_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid1_fu_246_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_230_p1) - unsigned(p_shl1_cast_mid1_fu_242_p1));
    p_shl1_cast_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_169_p3),15));
    p_shl1_cast_mid1_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_mid1_fu_234_p3),15));
    p_shl1_fu_169_p3 <= (ap_sig_allocacmp_h_2 & ap_const_lv4_0);
    p_shl1_mid1_fu_234_p3 <= (add_ln18_1_fu_216_p2 & ap_const_lv4_0);
    p_shl_cast_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_157_p3),15));
    p_shl_cast_mid1_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_222_p3),15));
    p_shl_fu_157_p3 <= (ap_sig_allocacmp_h_2 & ap_const_lv7_0);
    p_shl_mid1_fu_222_p3 <= (add_ln18_1_fu_216_p2 & ap_const_lv7_0);
    select_ln18_1_fu_252_p3 <= 
        p_mid1_fu_246_p2 when (icmp_ln19_fu_202_p2(0) = '1') else 
        empty_fu_181_p2;
    select_ln18_2_fu_264_p3 <= 
        add_ln18_1_fu_216_p2 when (icmp_ln19_fu_202_p2(0) = '1') else 
        ap_sig_allocacmp_h_2;
    select_ln18_fu_208_p3 <= 
        ap_const_lv7_0 when (icmp_ln19_fu_202_p2(0) = '1') else 
        ap_sig_allocacmp_w_load;
        sext_ln18_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_1_fu_252_p3),20));

        sext_ln20_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln20_fu_294_p2),64));

    temp_1_out <= temp_1_fu_70;

    temp_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln18_reg_368)
    begin
        if (((icmp_ln18_reg_368 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_1_out_ap_vld <= ap_const_logic_1;
        else 
            temp_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_282_p3 <= (tmp_3_fu_272_p4 & select_ln18_fu_208_p3);
    tmp_3_fu_272_p4 <= phi_mul(18 downto 7);
    zext_ln20_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_282_p3),20));
end behav;
