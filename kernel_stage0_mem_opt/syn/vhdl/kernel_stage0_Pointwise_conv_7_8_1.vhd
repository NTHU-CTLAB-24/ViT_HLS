-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_stage0_Pointwise_conv_7_8_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    out_r_ce1 : OUT STD_LOGIC;
    out_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    img_offset : IN STD_LOGIC_VECTOR (18 downto 0);
    out_offset : IN STD_LOGIC_VECTOR (18 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    buffer_kernel : IN STD_LOGIC_VECTOR (63 downto 0);
    buffer_bias : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel_stage0_Pointwise_conv_7_8_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv19_2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_const_lv19_3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000011";
    constant ap_const_lv19_4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_const_lv19_5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000101";
    constant ap_const_lv19_6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000110";
    constant ap_const_lv19_7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000111";
    constant ap_const_lv19_8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_const_lv19_9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001001";
    constant ap_const_lv19_A : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001010";
    constant ap_const_lv19_B : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001011";
    constant ap_const_lv19_C : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001100";
    constant ap_const_lv19_D : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001101";
    constant ap_const_lv19_E : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001110";
    constant ap_const_lv19_F : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001111";
    constant ap_const_lv19_10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_const_lv19_11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010001";
    constant ap_const_lv19_12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010010";
    constant ap_const_lv19_13 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010011";
    constant ap_const_lv19_14 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010100";
    constant ap_const_lv19_15 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010101";
    constant ap_const_lv19_16 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010110";
    constant ap_const_lv19_17 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln_reg_350 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln25_1_reg_355 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln30_2_fu_179_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_2_reg_360 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_3_fu_186_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_3_reg_365 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_4_fu_193_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_4_reg_370 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_5_fu_200_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_5_reg_375 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_6_fu_207_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_6_reg_380 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_7_fu_214_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_7_reg_385 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_8_fu_221_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_8_reg_390 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_9_fu_228_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_9_reg_395 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_10_fu_235_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_10_reg_400 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_11_fu_242_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_11_reg_405 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_12_fu_249_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_12_reg_410 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_13_fu_256_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_13_reg_415 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_14_fu_263_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_14_reg_420 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_15_fu_270_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_15_reg_425 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_16_fu_277_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_16_reg_430 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_17_fu_284_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_17_reg_435 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_18_fu_291_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_18_reg_440 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_19_fu_298_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_19_reg_445 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_20_fu_305_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_20_reg_450 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_21_fu_312_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_21_reg_455 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_22_fu_319_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_22_reg_460 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_23_fu_326_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_23_reg_465 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_24_fu_333_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_24_reg_470 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_start : STD_LOGIC;
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_done : STD_LOGIC;
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_idle : STD_LOGIC;
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_ready : STD_LOGIC;
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_ce0 : STD_LOGIC;
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_we0 : STD_LOGIC;
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_address1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_ce1 : STD_LOGIC;
    signal grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_stage0_Pointwise_conv_7_8_1_Pipeline_Output_Channel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
        out_r_ce1 : OUT STD_LOGIC;
        out_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        zext_ln30_22 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_21 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_20 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_19 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_18 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_17 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_16 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_15 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_14 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_13 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_12 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_11 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_10 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_9 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_8 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_7 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_6 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_5 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_4 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_3 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_2 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30_1 : IN STD_LOGIC_VECTOR (18 downto 0);
        zext_ln30 : IN STD_LOGIC_VECTOR (18 downto 0);
        img_offset_cast : IN STD_LOGIC_VECTOR (18 downto 0);
        out_offset : IN STD_LOGIC_VECTOR (18 downto 0);
        sext_ln25 : IN STD_LOGIC_VECTOR (61 downto 0);
        sext_ln30 : IN STD_LOGIC_VECTOR (61 downto 0) );
    end component;



begin
    grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120 : component kernel_stage0_Pointwise_conv_7_8_1_Pipeline_Output_Channel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_start,
        ap_done => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_done,
        ap_idle => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_idle,
        ap_ready => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_ready,
        m_axi_gmem_AWVALID => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM => m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        out_r_address0 => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_address0,
        out_r_ce0 => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_ce0,
        out_r_we0 => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_we0,
        out_r_d0 => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_d0,
        out_r_q0 => out_r_q0,
        out_r_address1 => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_address1,
        out_r_ce1 => grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_ce1,
        out_r_q1 => out_r_q1,
        zext_ln30_22 => add_ln30_24_reg_470,
        zext_ln30_21 => add_ln30_23_reg_465,
        zext_ln30_20 => add_ln30_22_reg_460,
        zext_ln30_19 => add_ln30_21_reg_455,
        zext_ln30_18 => add_ln30_20_reg_450,
        zext_ln30_17 => add_ln30_19_reg_445,
        zext_ln30_16 => add_ln30_18_reg_440,
        zext_ln30_15 => add_ln30_17_reg_435,
        zext_ln30_14 => add_ln30_16_reg_430,
        zext_ln30_13 => add_ln30_15_reg_425,
        zext_ln30_12 => add_ln30_14_reg_420,
        zext_ln30_11 => add_ln30_13_reg_415,
        zext_ln30_10 => add_ln30_12_reg_410,
        zext_ln30_9 => add_ln30_11_reg_405,
        zext_ln30_8 => add_ln30_10_reg_400,
        zext_ln30_7 => add_ln30_9_reg_395,
        zext_ln30_6 => add_ln30_8_reg_390,
        zext_ln30_5 => add_ln30_7_reg_385,
        zext_ln30_4 => add_ln30_6_reg_380,
        zext_ln30_3 => add_ln30_5_reg_375,
        zext_ln30_2 => add_ln30_4_reg_370,
        zext_ln30_1 => add_ln30_3_reg_365,
        zext_ln30 => add_ln30_2_reg_360,
        img_offset_cast => img_offset,
        out_offset => out_offset,
        sext_ln25 => trunc_ln_reg_350,
        sext_ln30 => trunc_ln25_1_reg_355);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_ready = ap_const_logic_1)) then 
                    grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln30_10_reg_400 <= add_ln30_10_fu_235_p2;
                add_ln30_11_reg_405 <= add_ln30_11_fu_242_p2;
                add_ln30_12_reg_410 <= add_ln30_12_fu_249_p2;
                add_ln30_13_reg_415 <= add_ln30_13_fu_256_p2;
                add_ln30_14_reg_420 <= add_ln30_14_fu_263_p2;
                add_ln30_15_reg_425 <= add_ln30_15_fu_270_p2;
                add_ln30_16_reg_430 <= add_ln30_16_fu_277_p2;
                add_ln30_17_reg_435 <= add_ln30_17_fu_284_p2;
                add_ln30_18_reg_440 <= add_ln30_18_fu_291_p2;
                add_ln30_19_reg_445 <= add_ln30_19_fu_298_p2;
                add_ln30_20_reg_450 <= add_ln30_20_fu_305_p2;
                add_ln30_21_reg_455 <= add_ln30_21_fu_312_p2;
                add_ln30_22_reg_460 <= add_ln30_22_fu_319_p2;
                add_ln30_23_reg_465 <= add_ln30_23_fu_326_p2;
                add_ln30_24_reg_470 <= add_ln30_24_fu_333_p2;
                add_ln30_2_reg_360 <= add_ln30_2_fu_179_p2;
                add_ln30_3_reg_365 <= add_ln30_3_fu_186_p2;
                add_ln30_4_reg_370 <= add_ln30_4_fu_193_p2;
                add_ln30_5_reg_375 <= add_ln30_5_fu_200_p2;
                add_ln30_6_reg_380 <= add_ln30_6_fu_207_p2;
                add_ln30_7_reg_385 <= add_ln30_7_fu_214_p2;
                add_ln30_8_reg_390 <= add_ln30_8_fu_221_p2;
                add_ln30_9_reg_395 <= add_ln30_9_fu_228_p2;
                trunc_ln25_1_reg_355 <= buffer_bias(63 downto 2);
                trunc_ln_reg_350 <= buffer_kernel(63 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln30_10_fu_235_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_9));
    add_ln30_11_fu_242_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_A));
    add_ln30_12_fu_249_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_B));
    add_ln30_13_fu_256_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_C));
    add_ln30_14_fu_263_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_D));
    add_ln30_15_fu_270_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_E));
    add_ln30_16_fu_277_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_F));
    add_ln30_17_fu_284_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_10));
    add_ln30_18_fu_291_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_11));
    add_ln30_19_fu_298_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_12));
    add_ln30_20_fu_305_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_13));
    add_ln30_21_fu_312_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_14));
    add_ln30_22_fu_319_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_15));
    add_ln30_23_fu_326_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_16));
    add_ln30_24_fu_333_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_17));
    add_ln30_2_fu_179_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_1));
    add_ln30_3_fu_186_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_2));
    add_ln30_4_fu_193_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_3));
    add_ln30_5_fu_200_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_4));
    add_ln30_6_fu_207_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_5));
    add_ln30_7_fu_214_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_6));
    add_ln30_8_fu_221_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_7));
    add_ln30_9_fu_228_p2 <= std_logic_vector(unsigned(img_offset) + unsigned(ap_const_lv19_8));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_done)
    begin
        if ((grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_done, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_done, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_start <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_ap_start_reg;
    m_axi_gmem_ARADDR <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARADDR;
    m_axi_gmem_ARBURST <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARBURST;
    m_axi_gmem_ARCACHE <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARCACHE;
    m_axi_gmem_ARID <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARID;
    m_axi_gmem_ARLEN <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARLEN;
    m_axi_gmem_ARLOCK <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARLOCK;
    m_axi_gmem_ARPROT <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARPROT;
    m_axi_gmem_ARQOS <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARQOS;
    m_axi_gmem_ARREGION <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARREGION;
    m_axi_gmem_ARSIZE <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARSIZE;
    m_axi_gmem_ARUSER <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARUSER;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_ARVALID <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_ARVALID;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_RREADY <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_m_axi_gmem_RREADY;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    out_r_address0 <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_address0;
    out_r_address1 <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_address1;
    out_r_ce0 <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_ce0;
    out_r_ce1 <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_ce1;
    out_r_d0 <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_d0;
    out_r_we0 <= grp_Pointwise_conv_7_8_1_Pipeline_Output_Channel_fu_120_out_r_we0;
end behav;
