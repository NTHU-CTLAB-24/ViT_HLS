// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_stage0_kernel_stage0_Pipeline_VITIS_LOOP_58_2_VITIS_LOOP_60_3_VITIS_LOOP_61_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_1_address0,
        img_1_ce0,
        img_1_q0,
        compute_tmp_1_address0,
        compute_tmp_1_ce0,
        compute_tmp_1_we0,
        compute_tmp_1_d0,
        compute_tmp_1_address1,
        compute_tmp_1_ce1,
        compute_tmp_1_q1,
        grp_fu_814_p_din0,
        grp_fu_814_p_din1,
        grp_fu_814_p_dout0,
        grp_fu_814_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [19:0] img_1_address0;
output   img_1_ce0;
input  [31:0] img_1_q0;
output  [19:0] compute_tmp_1_address0;
output   compute_tmp_1_ce0;
output   compute_tmp_1_we0;
output  [31:0] compute_tmp_1_d0;
output  [19:0] compute_tmp_1_address1;
output   compute_tmp_1_ce1;
input  [31:0] compute_tmp_1_q1;
output  [31:0] grp_fu_814_p_din0;
output  [31:0] grp_fu_814_p_din1;
input  [31:0] grp_fu_814_p_dout0;
output   grp_fu_814_p_ce;

reg ap_idle;
reg img_1_ce0;
reg compute_tmp_1_ce0;
reg compute_tmp_1_we0;
reg compute_tmp_1_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln58_fu_185_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln58_reg_552;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln58_reg_552_pp0_iter1_reg;
reg   [4:0] c_load_reg_556;
wire   [0:0] icmp_ln60_fu_203_p2;
reg   [0:0] icmp_ln60_reg_561;
reg   [0:0] icmp_ln60_reg_561_pp0_iter1_reg;
wire   [4:0] add_ln58_1_fu_209_p2;
reg   [4:0] add_ln58_1_reg_570;
reg   [31:0] img_1_load_reg_585;
reg   [19:0] compute_tmp_1_addr_reg_590;
wire   [0:0] addr_cmp_fu_453_p2;
reg   [0:0] addr_cmp_reg_596;
wire   [31:0] reuse_select_fu_483_p3;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [63:0] zext_ln58_fu_277_p1;
wire    ap_block_pp0_stage1;
wire  signed [63:0] sext_ln63_fu_445_p1;
wire    ap_block_pp0_stage0;
reg   [63:0] reuse_addr_reg_fu_84;
wire    ap_loop_init;
reg   [31:0] reuse_reg_fu_88;
reg   [6:0] w_fu_92;
wire   [6:0] add_ln61_fu_464_p2;
reg   [6:0] h_fu_96;
wire   [6:0] select_ln60_2_fu_410_p3;
reg   [13:0] indvar_flatten9_fu_100;
wire   [13:0] select_ln60_3_fu_233_p3;
reg   [4:0] c_fu_104;
wire   [4:0] select_ln58_2_fu_215_p3;
reg   [18:0] indvar_flatten41_fu_108;
wire   [18:0] add_ln58_fu_191_p2;
wire   [13:0] add_ln60_1_fu_227_p2;
wire   [18:0] or_ln59_mid1_fu_256_p3;
wire   [18:0] or_ln_fu_263_p3;
wire   [18:0] select_ln58_1_fu_270_p3;
wire   [13:0] p_shl2_fu_285_p3;
wire   [10:0] p_shl3_fu_297_p3;
wire   [14:0] p_shl2_cast_fu_293_p1;
wire   [14:0] p_shl3_cast_fu_305_p1;
wire   [14:0] empty_fu_309_p2;
wire   [0:0] icmp_ln61_fu_337_p2;
wire   [0:0] xor_ln58_fu_332_p2;
wire   [6:0] select_ln58_fu_318_p3;
wire   [0:0] and_ln58_fu_343_p2;
wire   [0:0] or_ln60_fu_355_p2;
wire   [6:0] add_ln60_fu_349_p2;
wire   [13:0] p_shl2_mid1_fu_368_p3;
wire   [10:0] p_shl3_mid1_fu_380_p3;
wire   [14:0] p_shl2_cast_mid1_fu_376_p1;
wire   [14:0] p_shl3_cast_mid1_fu_388_p1;
wire   [14:0] p_mid17_fu_392_p2;
wire   [14:0] select_ln58_3_fu_325_p3;
wire   [14:0] select_ln60_1_fu_398_p3;
wire   [18:0] tmp_4_fu_418_p1;
wire  signed [18:0] grp_fu_496_p2;
wire   [11:0] tmp_4_fu_418_p4;
wire   [6:0] select_ln60_fu_360_p3;
wire   [18:0] tmp2_fu_427_p3;
wire   [19:0] zext_ln62_fu_435_p1;
wire  signed [19:0] select_ln60_1_cast_fu_406_p1;
wire   [19:0] add_ln62_fu_439_p2;
wire   [4:0] grp_fu_496_p0;
wire   [13:0] grp_fu_496_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [18:0] grp_fu_496_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_stage0_mul_mul_5ns_14ns_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 19 ))
mul_mul_5ns_14ns_19_4_1_U121(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_496_p0),
    .din1(grp_fu_496_p1),
    .ce(1'b1),
    .dout(grp_fu_496_p2)
);

kernel_stage0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        c_fu_104 <= 5'd0;
    end else if (((icmp_ln58_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c_fu_104 <= select_ln58_2_fu_215_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            h_fu_96 <= 7'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln58_reg_552_pp0_iter1_reg == 1'd0))) begin
            h_fu_96 <= select_ln60_2_fu_410_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        indvar_flatten41_fu_108 <= 19'd0;
    end else if (((icmp_ln58_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten41_fu_108 <= add_ln58_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        indvar_flatten9_fu_100 <= 14'd0;
    end else if (((icmp_ln58_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten9_fu_100 <= select_ln60_3_fu_233_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg_fu_84 <= 64'd18446744073709551615;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln58_reg_552_pp0_iter1_reg == 1'd0))) begin
            reuse_addr_reg_fu_84 <= sext_ln63_fu_445_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_reg_fu_88 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            reuse_reg_fu_88 <= grp_fu_814_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            w_fu_92 <= 7'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln58_reg_552_pp0_iter1_reg == 1'd0))) begin
            w_fu_92 <= add_ln61_fu_464_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln58_1_reg_570 <= add_ln58_1_fu_209_p2;
        c_load_reg_556 <= c_fu_104;
        icmp_ln60_reg_561 <= icmp_ln60_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln58_reg_552_pp0_iter1_reg == 1'd0))) begin
        addr_cmp_reg_596 <= addr_cmp_fu_453_p2;
        compute_tmp_1_addr_reg_590 <= sext_ln63_fu_445_p1;
        img_1_load_reg_585 <= img_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln58_reg_552 <= icmp_ln58_fu_185_p2;
        icmp_ln58_reg_552_pp0_iter1_reg <= icmp_ln58_reg_552;
        icmp_ln60_reg_561_pp0_iter1_reg <= icmp_ln60_reg_561;
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_185_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln58_reg_552_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        compute_tmp_1_ce0 = 1'b1;
    end else begin
        compute_tmp_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        compute_tmp_1_ce1 = 1'b1;
    end else begin
        compute_tmp_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        compute_tmp_1_we0 = 1'b1;
    end else begin
        compute_tmp_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        img_1_ce0 = 1'b1;
    end else begin
        img_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln58_1_fu_209_p2 = (c_fu_104 + 5'd1);

assign add_ln58_fu_191_p2 = (indvar_flatten41_fu_108 + 19'd1);

assign add_ln60_1_fu_227_p2 = (indvar_flatten9_fu_100 + 14'd1);

assign add_ln60_fu_349_p2 = (select_ln58_fu_318_p3 + 7'd1);

assign add_ln61_fu_464_p2 = (select_ln60_fu_360_p3 + 7'd1);

assign add_ln62_fu_439_p2 = ($signed(zext_ln62_fu_435_p1) + $signed(select_ln60_1_cast_fu_406_p1));

assign addr_cmp_fu_453_p2 = ((reuse_addr_reg_fu_84 == sext_ln63_fu_445_p1) ? 1'b1 : 1'b0);

assign and_ln58_fu_343_p2 = (xor_ln58_fu_332_p2 & icmp_ln61_fu_337_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign compute_tmp_1_address0 = compute_tmp_1_addr_reg_590;

assign compute_tmp_1_address1 = sext_ln63_fu_445_p1;

assign compute_tmp_1_d0 = grp_fu_814_p_dout0;

assign empty_fu_309_p2 = (p_shl2_cast_fu_293_p1 - p_shl3_cast_fu_305_p1);

assign grp_fu_496_p0 = grp_fu_496_p00;

assign grp_fu_496_p00 = select_ln58_2_fu_215_p3;

assign grp_fu_496_p1 = 19'd12544;

assign grp_fu_814_p_ce = 1'b1;

assign grp_fu_814_p_din0 = reuse_select_fu_483_p3;

assign grp_fu_814_p_din1 = img_1_load_reg_585;

assign icmp_ln58_fu_185_p2 = ((indvar_flatten41_fu_108 == 19'd301056) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_203_p2 = ((indvar_flatten9_fu_100 == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_337_p2 = ((w_fu_92 == 7'd112) ? 1'b1 : 1'b0);

assign img_1_address0 = zext_ln58_fu_277_p1;

assign or_ln59_mid1_fu_256_p3 = {{14'd9408}, {add_ln58_1_reg_570}};

assign or_ln60_fu_355_p2 = (icmp_ln60_reg_561_pp0_iter1_reg | and_ln58_fu_343_p2);

assign or_ln_fu_263_p3 = {{14'd9408}, {c_load_reg_556}};

assign p_mid17_fu_392_p2 = (p_shl2_cast_mid1_fu_376_p1 - p_shl3_cast_mid1_fu_388_p1);

assign p_shl2_cast_fu_293_p1 = p_shl2_fu_285_p3;

assign p_shl2_cast_mid1_fu_376_p1 = p_shl2_mid1_fu_368_p3;

assign p_shl2_fu_285_p3 = {{h_fu_96}, {7'd0}};

assign p_shl2_mid1_fu_368_p3 = {{add_ln60_fu_349_p2}, {7'd0}};

assign p_shl3_cast_fu_305_p1 = p_shl3_fu_297_p3;

assign p_shl3_cast_mid1_fu_388_p1 = p_shl3_mid1_fu_380_p3;

assign p_shl3_fu_297_p3 = {{h_fu_96}, {4'd0}};

assign p_shl3_mid1_fu_380_p3 = {{add_ln60_fu_349_p2}, {4'd0}};

assign reuse_select_fu_483_p3 = ((addr_cmp_reg_596[0:0] == 1'b1) ? reuse_reg_fu_88 : compute_tmp_1_q1);

assign select_ln58_1_fu_270_p3 = ((icmp_ln60_reg_561[0:0] == 1'b1) ? or_ln59_mid1_fu_256_p3 : or_ln_fu_263_p3);

assign select_ln58_2_fu_215_p3 = ((icmp_ln60_fu_203_p2[0:0] == 1'b1) ? add_ln58_1_fu_209_p2 : c_fu_104);

assign select_ln58_3_fu_325_p3 = ((icmp_ln60_reg_561_pp0_iter1_reg[0:0] == 1'b1) ? 15'd0 : empty_fu_309_p2);

assign select_ln58_fu_318_p3 = ((icmp_ln60_reg_561_pp0_iter1_reg[0:0] == 1'b1) ? 7'd0 : h_fu_96);

assign select_ln60_1_cast_fu_406_p1 = $signed(select_ln60_1_fu_398_p3);

assign select_ln60_1_fu_398_p3 = ((and_ln58_fu_343_p2[0:0] == 1'b1) ? p_mid17_fu_392_p2 : select_ln58_3_fu_325_p3);

assign select_ln60_2_fu_410_p3 = ((and_ln58_fu_343_p2[0:0] == 1'b1) ? add_ln60_fu_349_p2 : select_ln58_fu_318_p3);

assign select_ln60_3_fu_233_p3 = ((icmp_ln60_fu_203_p2[0:0] == 1'b1) ? 14'd1 : add_ln60_1_fu_227_p2);

assign select_ln60_fu_360_p3 = ((or_ln60_fu_355_p2[0:0] == 1'b1) ? 7'd0 : w_fu_92);

assign sext_ln63_fu_445_p1 = $signed(add_ln62_fu_439_p2);

assign tmp2_fu_427_p3 = {{tmp_4_fu_418_p4}, {select_ln60_fu_360_p3}};

assign tmp_4_fu_418_p1 = grp_fu_496_p2;

assign tmp_4_fu_418_p4 = {{tmp_4_fu_418_p1[18:7]}};

assign xor_ln58_fu_332_p2 = (icmp_ln60_reg_561_pp0_iter1_reg ^ 1'd1);

assign zext_ln58_fu_277_p1 = select_ln58_1_fu_270_p3;

assign zext_ln62_fu_435_p1 = tmp2_fu_427_p3;

endmodule //kernel_stage0_kernel_stage0_Pipeline_VITIS_LOOP_58_2_VITIS_LOOP_60_3_VITIS_LOOP_61_4
