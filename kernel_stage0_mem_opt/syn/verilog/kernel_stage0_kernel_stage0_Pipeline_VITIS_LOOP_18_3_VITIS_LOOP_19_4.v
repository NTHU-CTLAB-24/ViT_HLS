// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_stage0_kernel_stage0_Pipeline_VITIS_LOOP_18_3_VITIS_LOOP_19_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        phi_mul,
        temp_1_out,
        temp_1_out_ap_vld,
        img_1_address0,
        img_1_ce0,
        img_1_q0,
        compute_tmp_1_address0,
        compute_tmp_1_ce0,
        compute_tmp_1_we0,
        compute_tmp_1_d0,
        grp_fu_818_p_din0,
        grp_fu_818_p_din1,
        grp_fu_818_p_opcode,
        grp_fu_818_p_dout0,
        grp_fu_818_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [18:0] phi_mul;
output  [31:0] temp_1_out;
output   temp_1_out_ap_vld;
output  [19:0] img_1_address0;
output   img_1_ce0;
input  [31:0] img_1_q0;
output  [19:0] compute_tmp_1_address0;
output   compute_tmp_1_ce0;
output   compute_tmp_1_we0;
output  [31:0] compute_tmp_1_d0;
output  [31:0] grp_fu_818_p_din0;
output  [31:0] grp_fu_818_p_din1;
output  [1:0] grp_fu_818_p_opcode;
input  [31:0] grp_fu_818_p_dout0;
output   grp_fu_818_p_ce;

reg ap_idle;
reg temp_1_out_ap_vld;
reg img_1_ce0;
reg compute_tmp_1_ce0;
reg compute_tmp_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln18_fu_187_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln18_reg_368;
wire  signed [63:0] sext_ln20_fu_300_p1;
reg  signed [63:0] sext_ln20_reg_372;
wire    ap_block_pp0_stage0;
reg   [31:0] temp_1_fu_70;
reg   [31:0] ap_sig_allocacmp_temp_1_load;
wire    ap_loop_init;
reg   [6:0] w_fu_74;
wire   [6:0] add_ln19_fu_305_p2;
reg   [6:0] ap_sig_allocacmp_w_load;
reg   [6:0] h_fu_78;
wire   [6:0] select_ln18_2_fu_264_p3;
reg   [6:0] ap_sig_allocacmp_h_2;
reg   [13:0] indvar_flatten_fu_82;
wire   [13:0] add_ln18_fu_193_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten_load;
wire    ap_block_pp0_stage0_01001;
wire   [13:0] p_shl_fu_157_p3;
wire   [10:0] p_shl1_fu_169_p3;
wire   [14:0] p_shl_cast_fu_165_p1;
wire   [14:0] p_shl1_cast_fu_177_p1;
wire   [0:0] icmp_ln19_fu_202_p2;
wire   [6:0] add_ln18_1_fu_216_p2;
wire   [13:0] p_shl_mid1_fu_222_p3;
wire   [10:0] p_shl1_mid1_fu_234_p3;
wire   [14:0] p_shl_cast_mid1_fu_230_p1;
wire   [14:0] p_shl1_cast_mid1_fu_242_p1;
wire   [14:0] p_mid1_fu_246_p2;
wire   [14:0] empty_fu_181_p2;
wire   [14:0] select_ln18_1_fu_252_p3;
wire   [11:0] tmp_3_fu_272_p4;
wire   [6:0] select_ln18_fu_208_p3;
wire   [18:0] tmp1_fu_282_p3;
wire   [19:0] zext_ln20_fu_290_p1;
wire  signed [19:0] sext_ln18_fu_260_p1;
wire   [19:0] add_ln20_fu_294_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_stage0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln18_fu_187_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            h_fu_78 <= select_ln18_2_fu_264_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            h_fu_78 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln18_fu_187_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_82 <= add_ln18_fu_193_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_82 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            temp_1_fu_70 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            temp_1_fu_70 <= grp_fu_818_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln18_fu_187_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            w_fu_74 <= add_ln19_fu_305_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            w_fu_74 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln18_reg_368 <= icmp_ln18_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_187_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sext_ln20_reg_372 <= sext_ln20_fu_300_p1;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_187_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_h_2 = 7'd0;
    end else begin
        ap_sig_allocacmp_h_2 = h_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_temp_1_load = grp_fu_818_p_dout0;
    end else begin
        ap_sig_allocacmp_temp_1_load = temp_1_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_w_load = 7'd0;
    end else begin
        ap_sig_allocacmp_w_load = w_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        compute_tmp_1_ce0 = 1'b1;
    end else begin
        compute_tmp_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        compute_tmp_1_we0 = 1'b1;
    end else begin
        compute_tmp_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_1_ce0 = 1'b1;
    end else begin
        img_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_368 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_1_out_ap_vld = 1'b1;
    end else begin
        temp_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_1_fu_216_p2 = (ap_sig_allocacmp_h_2 + 7'd1);

assign add_ln18_fu_193_p2 = (ap_sig_allocacmp_indvar_flatten_load + 14'd1);

assign add_ln19_fu_305_p2 = (select_ln18_fu_208_p3 + 7'd1);

assign add_ln20_fu_294_p2 = ($signed(zext_ln20_fu_290_p1) + $signed(sext_ln18_fu_260_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign compute_tmp_1_address0 = sext_ln20_reg_372;

assign compute_tmp_1_d0 = img_1_q0;

assign empty_fu_181_p2 = (p_shl_cast_fu_165_p1 - p_shl1_cast_fu_177_p1);

assign grp_fu_818_p_ce = 1'b1;

assign grp_fu_818_p_din0 = ap_sig_allocacmp_temp_1_load;

assign grp_fu_818_p_din1 = img_1_q0;

assign grp_fu_818_p_opcode = 2'd0;

assign icmp_ln18_fu_187_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_202_p2 = ((ap_sig_allocacmp_w_load == 7'd112) ? 1'b1 : 1'b0);

assign img_1_address0 = sext_ln20_fu_300_p1;

assign p_mid1_fu_246_p2 = (p_shl_cast_mid1_fu_230_p1 - p_shl1_cast_mid1_fu_242_p1);

assign p_shl1_cast_fu_177_p1 = p_shl1_fu_169_p3;

assign p_shl1_cast_mid1_fu_242_p1 = p_shl1_mid1_fu_234_p3;

assign p_shl1_fu_169_p3 = {{ap_sig_allocacmp_h_2}, {4'd0}};

assign p_shl1_mid1_fu_234_p3 = {{add_ln18_1_fu_216_p2}, {4'd0}};

assign p_shl_cast_fu_165_p1 = p_shl_fu_157_p3;

assign p_shl_cast_mid1_fu_230_p1 = p_shl_mid1_fu_222_p3;

assign p_shl_fu_157_p3 = {{ap_sig_allocacmp_h_2}, {7'd0}};

assign p_shl_mid1_fu_222_p3 = {{add_ln18_1_fu_216_p2}, {7'd0}};

assign select_ln18_1_fu_252_p3 = ((icmp_ln19_fu_202_p2[0:0] == 1'b1) ? p_mid1_fu_246_p2 : empty_fu_181_p2);

assign select_ln18_2_fu_264_p3 = ((icmp_ln19_fu_202_p2[0:0] == 1'b1) ? add_ln18_1_fu_216_p2 : ap_sig_allocacmp_h_2);

assign select_ln18_fu_208_p3 = ((icmp_ln19_fu_202_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_w_load);

assign sext_ln18_fu_260_p1 = $signed(select_ln18_1_fu_252_p3);

assign sext_ln20_fu_300_p1 = $signed(add_ln20_fu_294_p2);

assign temp_1_out = temp_1_fu_70;

assign tmp1_fu_282_p3 = {{tmp_3_fu_272_p4}, {select_ln18_fu_208_p3}};

assign tmp_3_fu_272_p4 = {{phi_mul[18:7]}};

assign zext_ln20_fu_290_p1 = tmp1_fu_282_p3;

endmodule //kernel_stage0_kernel_stage0_Pipeline_VITIS_LOOP_18_3_VITIS_LOOP_19_4
