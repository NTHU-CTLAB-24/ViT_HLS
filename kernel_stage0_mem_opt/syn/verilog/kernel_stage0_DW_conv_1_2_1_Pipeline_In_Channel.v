// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_stage0_DW_conv_1_2_1_Pipeline_In_Channel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln61,
        p_sum_cast,
        sext_ln63,
        sext_ln64,
        kernel,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        img_1_address0,
        img_1_ce0,
        img_1_we0,
        img_1_d0,
        img_1_q0,
        ap_return,
        grp_fu_271_p_din0,
        grp_fu_271_p_din1,
        grp_fu_271_p_opcode,
        grp_fu_271_p_dout0,
        grp_fu_271_p_ce,
        grp_fu_1419_p_din0,
        grp_fu_1419_p_din1,
        grp_fu_1419_p_dout0,
        grp_fu_1419_p_ce
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] sext_ln61;
input  [19:0] p_sum_cast;
input  [16:0] sext_ln63;
input  [10:0] sext_ln64;
input  [63:0] kernel;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
output  [19:0] img_1_address0;
output   img_1_ce0;
output   img_1_we0;
output  [31:0] img_1_d0;
input  [31:0] img_1_q0;
output  [0:0] ap_return;
output  [31:0] grp_fu_271_p_din0;
output  [31:0] grp_fu_271_p_din1;
output  [1:0] grp_fu_271_p_opcode;
input  [31:0] grp_fu_271_p_dout0;
output   grp_fu_271_p_ce;
output  [31:0] grp_fu_1419_p_din0;
output  [31:0] grp_fu_1419_p_din1;
input  [31:0] grp_fu_1419_p_dout0;
output   grp_fu_1419_p_ce;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg[19:0] img_1_address0;
reg img_1_ce0;
reg img_1_we0;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state36;
wire    ap_block_state36_pp0_stage35_iter0;
wire   [0:0] icmp_ln67_fu_391_p2;
reg   [0:0] icmp_ln61_reg_464;
reg    ap_condition_exit_pp0_iter0_stage35;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state9;
reg   [0:0] merge_reg_173;
wire  signed [19:0] sext_ln63_cast_fu_201_p1;
reg  signed [19:0] sext_ln63_cast_reg_443;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [63:0] p_sum_cast_cast_fu_205_p1;
reg   [63:0] p_sum_cast_cast_reg_448;
reg   [63:0] in_ch_1_reg_454;
reg   [19:0] img_1_addr_reg_459;
wire   [0:0] icmp_ln61_fu_240_p2;
wire   [63:0] add_ln66_fu_246_p2;
reg   [63:0] add_ln66_reg_468;
reg   [63:0] gmem_addr_reg_478;
reg   [31:0] img_1_load_1_reg_489;
wire    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state2_io;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire   [0:0] addr_cmp_fu_341_p2;
reg   [0:0] addr_cmp_reg_499;
wire   [31:0] reuse_select13_fu_355_p3;
reg   [31:0] reuse_select13_reg_504;
wire   [31:0] reuse_select_fu_366_p3;
reg   [31:0] reuse_select_reg_509;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
reg   [31:0] gmem_addr_read_reg_514;
reg    ap_block_state9_pp0_stage8_iter0;
wire   [31:0] bitcast_ln65_fu_373_p1;
wire    ap_CS_fsm_state10;
wire    ap_block_state10_pp0_stage9_iter0;
reg   [31:0] mul_reg_524;
wire    ap_CS_fsm_state11;
wire    ap_block_state11_pp0_stage10_iter0;
reg   [0:0] ap_phi_mux_merge_phi_fu_177_p4;
wire   [63:0] zext_ln64_fu_334_p1;
wire  signed [63:0] sext_ln65_fu_308_p1;
reg   [63:0] reuse_addr_reg_fu_94;
wire    ap_loop_init;
reg   [31:0] reuse_reg_fu_98;
wire    ap_CS_fsm_state13;
wire    ap_block_state13_pp0_stage12_iter0;
reg   [63:0] in_ch_fu_102;
wire   [63:0] add_ln67_fu_382_p2;
wire  signed [63:0] sext_ln61_cast_fu_210_p1;
reg   [63:0] ap_sig_allocacmp_in_ch_1;
reg   [63:0] kernelChannelIdx_fu_106;
reg   [63:0] ap_sig_allocacmp_kernelChannelIdx_1;
wire    ap_CS_fsm_state12;
wire   [58:0] trunc_ln64_1_fu_260_p1;
wire   [61:0] trunc_ln64_fu_256_p1;
wire  signed [61:0] sext_ln64_cast_fu_197_p1;
wire   [61:0] add_ln65_2_fu_272_p2;
wire   [61:0] shl_ln2_fu_264_p3;
wire   [61:0] add_ln65_1_fu_278_p2;
wire   [63:0] shl_ln3_fu_284_p3;
wire   [63:0] add_ln65_fu_292_p2;
wire   [61:0] trunc_ln3_fu_298_p4;
wire   [31:0] trunc_ln67_fu_318_p1;
wire   [31:0] grp_fu_328_p0;
wire   [2:0] grp_fu_328_p1;
wire  signed [19:0] zext_ln64_fu_334_p0;
wire   [19:0] grp_fu_406_p3;
wire   [0:0] addr_cmp12_fu_350_p2;
wire   [2:0] grp_fu_328_p2;
wire   [2:0] trunc_ln67_1_fu_387_p1;
wire  signed [19:0] grp_fu_406_p0;
wire   [15:0] grp_fu_406_p1;
wire  signed [16:0] grp_fu_406_p2;
wire    ap_CS_fsm_state3;
reg    grp_fu_185_ce;
wire    ap_block_state12_pp0_stage11_iter0;
reg    grp_fu_190_ce;
reg    grp_fu_328_ce;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_CS_fsm_state6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_CS_fsm_state7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_CS_fsm_state8;
wire    ap_block_state14_pp0_stage13_iter0;
wire    ap_CS_fsm_state14;
wire    ap_block_state15_pp0_stage14_iter0;
wire    ap_CS_fsm_state15;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_CS_fsm_state16;
wire    ap_block_state17_pp0_stage16_iter0;
wire    ap_CS_fsm_state17;
wire    ap_block_state18_pp0_stage17_iter0;
wire    ap_CS_fsm_state18;
wire    ap_block_state19_pp0_stage18_iter0;
wire    ap_CS_fsm_state19;
wire    ap_block_state20_pp0_stage19_iter0;
wire    ap_CS_fsm_state20;
wire    ap_block_state21_pp0_stage20_iter0;
wire    ap_CS_fsm_state21;
wire    ap_block_state22_pp0_stage21_iter0;
wire    ap_CS_fsm_state22;
wire    ap_block_state23_pp0_stage22_iter0;
wire    ap_CS_fsm_state23;
wire    ap_block_state24_pp0_stage23_iter0;
wire    ap_CS_fsm_state24;
wire    ap_block_state25_pp0_stage24_iter0;
wire    ap_CS_fsm_state25;
wire    ap_block_state26_pp0_stage25_iter0;
wire    ap_CS_fsm_state26;
wire    ap_block_state27_pp0_stage26_iter0;
wire    ap_CS_fsm_state27;
wire    ap_block_state28_pp0_stage27_iter0;
wire    ap_CS_fsm_state28;
wire    ap_block_state29_pp0_stage28_iter0;
wire    ap_CS_fsm_state29;
wire    ap_block_state30_pp0_stage29_iter0;
wire    ap_CS_fsm_state30;
wire    ap_block_state31_pp0_stage30_iter0;
wire    ap_CS_fsm_state31;
wire    ap_block_state32_pp0_stage31_iter0;
wire    ap_CS_fsm_state32;
wire    ap_block_state33_pp0_stage32_iter0;
wire    ap_CS_fsm_state33;
wire    ap_block_state34_pp0_stage33_iter0;
wire    ap_CS_fsm_state34;
wire    ap_block_state35_pp0_stage34_iter0;
wire    ap_CS_fsm_state35;
reg    grp_fu_406_ce;
reg   [0:0] ap_return_preg;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [35:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
#0 ap_return_preg = 1'd0;
#0 ap_done_reg = 1'b0;
end

kernel_stage0_srem_32ns_3ns_3_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 3 ))
srem_32ns_3ns_3_36_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_328_p0),
    .din1(grp_fu_328_p1),
    .ce(grp_fu_328_ce),
    .dout(grp_fu_328_p2)
);

kernel_stage0_mac_muladd_20s_16ns_17s_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 20 ))
mac_muladd_20s_16ns_17s_20_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_406_p0),
    .din1(grp_fu_406_p1),
    .din2(grp_fu_406_p2),
    .ce(grp_fu_406_ce),
    .dout(grp_fu_406_p3)
);

kernel_stage0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage35),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state36) & ((icmp_ln61_reg_464 == 1'd0) | (icmp_ln67_fu_391_p2 == 1'd1)))) begin
            ap_return_preg <= ap_phi_mux_merge_phi_fu_177_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_ch_fu_102 <= sext_ln61_cast_fu_210_p1;
    end else if (((icmp_ln61_reg_464 == 1'd1) & (icmp_ln67_fu_391_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state36))) begin
        in_ch_fu_102 <= add_ln67_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        kernelChannelIdx_fu_106 <= 64'd0;
    end else if (((icmp_ln61_reg_464 == 1'd1) & (icmp_ln67_fu_391_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state36))) begin
        kernelChannelIdx_fu_106 <= add_ln66_reg_468;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_reg_464 == 1'd1) & (icmp_ln67_fu_391_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        merge_reg_173 <= 1'd0;
    end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln61_fu_240_p2 == 1'd0))) begin
        merge_reg_173 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        reuse_addr_reg_fu_94 <= 64'd18446744073709551615;
    end else if (((icmp_ln61_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        reuse_addr_reg_fu_94 <= p_sum_cast_cast_reg_448;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        reuse_reg_fu_98 <= 32'd0;
    end else if (((icmp_ln61_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        reuse_reg_fu_98 <= grp_fu_271_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln66_reg_468 <= add_ln66_fu_246_p2;
        icmp_ln61_reg_464 <= icmp_ln61_fu_240_p2;
        img_1_addr_reg_459 <= p_sum_cast_cast_fu_205_p1;
        in_ch_1_reg_454 <= ap_sig_allocacmp_in_ch_1;
        p_sum_cast_cast_reg_448[19 : 0] <= p_sum_cast_cast_fu_205_p1[19 : 0];
        sext_ln63_cast_reg_443 <= sext_ln63_cast_fu_201_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        addr_cmp_reg_499 <= addr_cmp_fu_341_p2;
        reuse_select13_reg_504 <= reuse_select13_fu_355_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln61_reg_464 == 1'd1) & (m_axi_gmem_RVALID == 1'b0)) & (icmp_ln61_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        gmem_addr_read_reg_514 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln61_fu_240_p2 == 1'd1))) begin
        gmem_addr_reg_478 <= sext_ln65_fu_308_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        img_1_load_1_reg_489 <= img_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        mul_reg_524 <= grp_fu_1419_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        reuse_select_reg_509 <= reuse_select_fu_366_p3;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state2_io)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln61_reg_464 == 1'd1) & (m_axi_gmem_RVALID == 1'b0))) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) & ((icmp_ln61_reg_464 == 1'd0) | (icmp_ln67_fu_391_p2 == 1'd1)))) begin
        ap_condition_exit_pp0_iter0_stage35 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage35 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_464 == 1'd1) & (icmp_ln67_fu_391_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        ap_phi_mux_merge_phi_fu_177_p4 = 1'd0;
    end else begin
        ap_phi_mux_merge_phi_fu_177_p4 = merge_reg_173;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) & ((icmp_ln61_reg_464 == 1'd0) | (icmp_ln67_fu_391_p2 == 1'd1)))) begin
        ap_return = ap_phi_mux_merge_phi_fu_177_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_in_ch_1 = sext_ln61_cast_fu_210_p1;
    end else begin
        ap_sig_allocacmp_in_ch_1 = in_ch_fu_102;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_kernelChannelIdx_1 = 64'd0;
    end else begin
        ap_sig_allocacmp_kernelChannelIdx_1 = kernelChannelIdx_fu_106;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_185_ce = 1'b1;
    end else begin
        grp_fu_185_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_190_ce = 1'b1;
    end else begin
        grp_fu_190_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | (~((icmp_ln61_reg_464 == 1'd1) & (m_axi_gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io)))) begin
        grp_fu_328_ce = 1'b1;
    end else begin
        grp_fu_328_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | ((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io)))) begin
        grp_fu_406_ce = 1'b1;
    end else begin
        grp_fu_406_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        img_1_address0 = img_1_addr_reg_459;
    end else if (((icmp_ln61_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        img_1_address0 = zext_ln64_fu_334_p1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (icmp_ln61_fu_240_p2 == 1'd1))) begin
        img_1_address0 = p_sum_cast_cast_fu_205_p1;
    end else begin
        img_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln61_fu_240_p2 == 1'd1)) | ((icmp_ln61_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln61_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        img_1_ce0 = 1'b1;
    end else begin
        img_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        img_1_we0 = 1'b1;
    end else begin
        img_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln61_reg_464 == 1'd1) & (m_axi_gmem_RVALID == 1'b0)) & (icmp_ln61_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((~((icmp_ln61_reg_464 == 1'd1) & (m_axi_gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln65_1_fu_278_p2 = (add_ln65_2_fu_272_p2 + shl_ln2_fu_264_p3);

assign add_ln65_2_fu_272_p2 = ($signed(trunc_ln64_fu_256_p1) + $signed(sext_ln64_cast_fu_197_p1));

assign add_ln65_fu_292_p2 = (shl_ln3_fu_284_p3 + kernel);

assign add_ln66_fu_246_p2 = (ap_sig_allocacmp_kernelChannelIdx_1 + 64'd1);

assign add_ln67_fu_382_p2 = (in_ch_1_reg_454 + 64'd1);

assign addr_cmp12_fu_350_p2 = ((reuse_addr_reg_fu_94 == p_sum_cast_cast_reg_448) ? 1'b1 : 1'b0);

assign addr_cmp_fu_341_p2 = ((reuse_addr_reg_fu_94 == zext_ln64_fu_334_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state20_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage25_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage26_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage27_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage28_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((icmp_ln61_reg_464 == 1'd1) & (m_axi_gmem_ARREADY == 1'b0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage29_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage30_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage31_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage32_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage33_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage34_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage35_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage8_iter0 = ((icmp_ln61_reg_464 == 1'd1) & (m_axi_gmem_RVALID == 1'b0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage35;

assign bitcast_ln65_fu_373_p1 = gmem_addr_read_reg_514;

assign grp_fu_1419_p_ce = grp_fu_190_ce;

assign grp_fu_1419_p_din0 = reuse_select_reg_509;

assign grp_fu_1419_p_din1 = bitcast_ln65_fu_373_p1;

assign grp_fu_271_p_ce = grp_fu_185_ce;

assign grp_fu_271_p_din0 = reuse_select13_reg_504;

assign grp_fu_271_p_din1 = mul_reg_524;

assign grp_fu_271_p_opcode = 2'd0;

assign grp_fu_328_p0 = (trunc_ln67_fu_318_p1 + 32'd1);

assign grp_fu_328_p1 = 32'd3;

assign grp_fu_406_p0 = ap_sig_allocacmp_in_ch_1[19:0];

assign grp_fu_406_p1 = 20'd50176;

assign grp_fu_406_p2 = sext_ln63_cast_reg_443;

assign icmp_ln61_fu_240_p2 = (($signed(ap_sig_allocacmp_in_ch_1) < $signed(64'd3)) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_391_p2 = ((trunc_ln67_1_fu_387_p1 == 3'd0) ? 1'b1 : 1'b0);

assign img_1_d0 = grp_fu_271_p_dout0;

assign m_axi_gmem_ARADDR = gmem_addr_reg_478;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign p_sum_cast_cast_fu_205_p1 = p_sum_cast;

assign reuse_select13_fu_355_p3 = ((addr_cmp12_fu_350_p2[0:0] == 1'b1) ? reuse_reg_fu_98 : img_1_load_1_reg_489);

assign reuse_select_fu_366_p3 = ((addr_cmp_reg_499[0:0] == 1'b1) ? reuse_reg_fu_98 : img_1_q0);

assign sext_ln61_cast_fu_210_p1 = $signed(sext_ln61);

assign sext_ln63_cast_fu_201_p1 = $signed(sext_ln63);

assign sext_ln64_cast_fu_197_p1 = $signed(sext_ln64);

assign sext_ln65_fu_308_p1 = $signed(trunc_ln3_fu_298_p4);

assign shl_ln2_fu_264_p3 = {{trunc_ln64_1_fu_260_p1}, {3'd0}};

assign shl_ln3_fu_284_p3 = {{add_ln65_1_fu_278_p2}, {2'd0}};

assign trunc_ln3_fu_298_p4 = {{add_ln65_fu_292_p2[63:2]}};

assign trunc_ln64_1_fu_260_p1 = ap_sig_allocacmp_kernelChannelIdx_1[58:0];

assign trunc_ln64_fu_256_p1 = ap_sig_allocacmp_kernelChannelIdx_1[61:0];

assign trunc_ln67_1_fu_387_p1 = grp_fu_328_p2[2:0];

assign trunc_ln67_fu_318_p1 = ap_sig_allocacmp_in_ch_1[31:0];

assign zext_ln64_fu_334_p0 = grp_fu_406_p3;

assign zext_ln64_fu_334_p1 = $unsigned(zext_ln64_fu_334_p0);

always @ (posedge ap_clk) begin
    p_sum_cast_cast_reg_448[63:20] <= 44'b00000000000000000000000000000000000000000000;
end

endmodule //kernel_stage0_DW_conv_1_2_1_Pipeline_In_Channel
