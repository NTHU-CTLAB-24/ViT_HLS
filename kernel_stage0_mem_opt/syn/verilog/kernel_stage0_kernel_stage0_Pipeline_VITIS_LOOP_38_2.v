// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_stage0_kernel_stage0_Pipeline_VITIS_LOOP_38_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_1_address0,
        img_1_ce0,
        img_1_we0,
        img_1_d0,
        img_1_address1,
        img_1_ce1,
        img_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 19'd1;
parameter    ap_ST_fsm_pp0_stage1 = 19'd2;
parameter    ap_ST_fsm_pp0_stage2 = 19'd4;
parameter    ap_ST_fsm_pp0_stage3 = 19'd8;
parameter    ap_ST_fsm_pp0_stage4 = 19'd16;
parameter    ap_ST_fsm_pp0_stage5 = 19'd32;
parameter    ap_ST_fsm_pp0_stage6 = 19'd64;
parameter    ap_ST_fsm_pp0_stage7 = 19'd128;
parameter    ap_ST_fsm_pp0_stage8 = 19'd256;
parameter    ap_ST_fsm_pp0_stage9 = 19'd512;
parameter    ap_ST_fsm_pp0_stage10 = 19'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 19'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 19'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 19'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 19'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 19'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 19'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 19'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [19:0] img_1_address0;
output   img_1_ce0;
output   img_1_we0;
output  [31:0] img_1_d0;
output  [19:0] img_1_address1;
output   img_1_ce1;
input  [31:0] img_1_q1;

reg ap_idle;
reg img_1_ce0;
reg img_1_we0;
reg img_1_ce1;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state21_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln38_fu_117_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_state19_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state20_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln38_reg_212;
wire    ap_block_pp0_stage1_11001;
reg   [19:0] img_1_addr_reg_216;
wire   [0:0] addr_cmp_fu_145_p2;
reg   [0:0] addr_cmp_reg_222;
wire   [63:0] conv_i_fu_81_p1;
reg   [63:0] conv_i_reg_227;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [63:0] grp_fu_94_p2;
reg   [63:0] tmp_2_reg_232;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
wire   [63:0] grp_fu_84_p2;
reg   [63:0] add33_i_reg_237;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
wire   [63:0] grp_fu_89_p2;
reg   [63:0] div_i3_reg_242;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln42_fu_137_p1;
wire    ap_block_pp0_stage1;
reg   [63:0] reuse_addr_reg_fu_48;
wire    ap_loop_init;
reg   [31:0] reuse_reg_fu_52;
wire   [31:0] conv34_i_fu_77_p1;
wire    ap_block_pp0_stage2;
reg   [4:0] y_pos_fu_56;
wire   [4:0] add_ln38_fu_123_p2;
wire    ap_block_pp0_stage0;
wire   [31:0] conv_i_fu_81_p0;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire   [18:0] zext_ln42_cast_fu_129_p3;
wire   [31:0] temp_fu_164_p3;
wire   [31:0] bitcast_ln43_fu_171_p1;
wire   [31:0] xor_ln43_fu_175_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [18:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_state14_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_state15_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_state17_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_state18_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_stage0_fptrunc_64ns_32_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
fptrunc_64ns_32_1_no_dsp_1_U113(
    .din0(div_i3_reg_242),
    .dout(conv34_i_fu_77_p1)
);

kernel_stage0_fpext_32ns_64_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_1_no_dsp_1_U114(
    .din0(conv_i_fu_81_p0),
    .dout(conv_i_fu_81_p1)
);

kernel_stage0_dadd_64ns_64ns_64_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_2_full_dsp_1_U115(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_reg_232),
    .din1(64'd4607182418800017408),
    .ce(1'b1),
    .dout(grp_fu_84_p2)
);

kernel_stage0_ddiv_64ns_64ns_64_9_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_9_no_dsp_1_U116(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(add33_i_reg_237),
    .ce(1'b1),
    .dout(grp_fu_89_p2)
);

kernel_stage0_dexp_64ns_64ns_64_6_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dexp_64ns_64ns_64_6_full_dsp_1_U117(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(conv_i_reg_227),
    .ce(1'b1),
    .dout(grp_fu_94_p2)
);

kernel_stage0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage18_subdone) & (1'b1 == ap_CS_fsm_pp0_stage18))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
                reuse_addr_reg_fu_48[0] <= 1'b1;
        reuse_addr_reg_fu_48[1] <= 1'b1;
        reuse_addr_reg_fu_48[2] <= 1'b1;
        reuse_addr_reg_fu_48[3] <= 1'b1;
        reuse_addr_reg_fu_48[4] <= 1'b1;
        reuse_addr_reg_fu_48[5] <= 1'b1;
        reuse_addr_reg_fu_48[6] <= 1'b1;
        reuse_addr_reg_fu_48[7] <= 1'b1;
        reuse_addr_reg_fu_48[8] <= 1'b1;
        reuse_addr_reg_fu_48[9] <= 1'b1;
        reuse_addr_reg_fu_48[10] <= 1'b1;
        reuse_addr_reg_fu_48[13] <= 1'b1;
        reuse_addr_reg_fu_48[14] <= 1'b1;
        reuse_addr_reg_fu_48[16] <= 1'b1;
        reuse_addr_reg_fu_48[17] <= 1'b1;
        reuse_addr_reg_fu_48[19] <= 1'b1;
        reuse_addr_reg_fu_48[20] <= 1'b1;
        reuse_addr_reg_fu_48[21] <= 1'b1;
        reuse_addr_reg_fu_48[22] <= 1'b1;
        reuse_addr_reg_fu_48[23] <= 1'b1;
        reuse_addr_reg_fu_48[24] <= 1'b1;
        reuse_addr_reg_fu_48[25] <= 1'b1;
        reuse_addr_reg_fu_48[26] <= 1'b1;
        reuse_addr_reg_fu_48[27] <= 1'b1;
        reuse_addr_reg_fu_48[28] <= 1'b1;
        reuse_addr_reg_fu_48[29] <= 1'b1;
        reuse_addr_reg_fu_48[30] <= 1'b1;
        reuse_addr_reg_fu_48[31] <= 1'b1;
        reuse_addr_reg_fu_48[32] <= 1'b1;
        reuse_addr_reg_fu_48[33] <= 1'b1;
        reuse_addr_reg_fu_48[34] <= 1'b1;
        reuse_addr_reg_fu_48[35] <= 1'b1;
        reuse_addr_reg_fu_48[36] <= 1'b1;
        reuse_addr_reg_fu_48[37] <= 1'b1;
        reuse_addr_reg_fu_48[38] <= 1'b1;
        reuse_addr_reg_fu_48[39] <= 1'b1;
        reuse_addr_reg_fu_48[40] <= 1'b1;
        reuse_addr_reg_fu_48[41] <= 1'b1;
        reuse_addr_reg_fu_48[42] <= 1'b1;
        reuse_addr_reg_fu_48[43] <= 1'b1;
        reuse_addr_reg_fu_48[44] <= 1'b1;
        reuse_addr_reg_fu_48[45] <= 1'b1;
        reuse_addr_reg_fu_48[46] <= 1'b1;
        reuse_addr_reg_fu_48[47] <= 1'b1;
        reuse_addr_reg_fu_48[48] <= 1'b1;
        reuse_addr_reg_fu_48[49] <= 1'b1;
        reuse_addr_reg_fu_48[50] <= 1'b1;
        reuse_addr_reg_fu_48[51] <= 1'b1;
        reuse_addr_reg_fu_48[52] <= 1'b1;
        reuse_addr_reg_fu_48[53] <= 1'b1;
        reuse_addr_reg_fu_48[54] <= 1'b1;
        reuse_addr_reg_fu_48[55] <= 1'b1;
        reuse_addr_reg_fu_48[56] <= 1'b1;
        reuse_addr_reg_fu_48[57] <= 1'b1;
        reuse_addr_reg_fu_48[58] <= 1'b1;
        reuse_addr_reg_fu_48[59] <= 1'b1;
        reuse_addr_reg_fu_48[60] <= 1'b1;
        reuse_addr_reg_fu_48[61] <= 1'b1;
        reuse_addr_reg_fu_48[62] <= 1'b1;
        reuse_addr_reg_fu_48[63] <= 1'b1;
    end else if (((icmp_ln38_fu_117_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                reuse_addr_reg_fu_48[10 : 0] <= zext_ln42_fu_137_p1[10 : 0];
        reuse_addr_reg_fu_48[14 : 13] <= zext_ln42_fu_137_p1[14 : 13];
        reuse_addr_reg_fu_48[17 : 16] <= zext_ln42_fu_137_p1[17 : 16];
        reuse_addr_reg_fu_48[63 : 19] <= zext_ln42_fu_137_p1[63 : 19];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        reuse_reg_fu_52 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reuse_reg_fu_52 <= conv34_i_fu_77_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        y_pos_fu_56 <= 5'd0;
    end else if (((icmp_ln38_fu_117_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        y_pos_fu_56 <= add_ln38_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_212 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        add33_i_reg_237 <= grp_fu_84_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_117_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        addr_cmp_reg_222 <= addr_cmp_fu_145_p2;
        img_1_addr_reg_216[4 : 0] <= zext_ln42_fu_137_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_212 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        conv_i_reg_227 <= conv_i_fu_81_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_212 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        div_i3_reg_242 <= grp_fu_89_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln38_reg_212 <= icmp_ln38_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_212 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        tmp_2_reg_232 <= grp_fu_94_p2;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_117_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage18_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage18))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        img_1_ce0 = 1'b1;
    end else begin
        img_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        img_1_ce1 = 1'b1;
    end else begin
        img_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        img_1_we0 = 1'b1;
    end else begin
        img_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln38_fu_123_p2 = (y_pos_fu_56 + 5'd1);

assign addr_cmp_fu_145_p2 = ((reuse_addr_reg_fu_48 == zext_ln42_fu_137_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign bitcast_ln43_fu_171_p1 = temp_fu_164_p3;

assign conv_i_fu_81_p0 = xor_ln43_fu_175_p2;

assign icmp_ln38_fu_117_p2 = ((y_pos_fu_56 == 5'd24) ? 1'b1 : 1'b0);

assign img_1_address0 = img_1_addr_reg_216;

assign img_1_address1 = zext_ln42_fu_137_p1;

assign img_1_d0 = conv34_i_fu_77_p1;

assign temp_fu_164_p3 = ((addr_cmp_reg_222[0:0] == 1'b1) ? reuse_reg_fu_52 : img_1_q1);

assign xor_ln43_fu_175_p2 = (bitcast_ln43_fu_171_p1 ^ 32'd2147483648);

assign zext_ln42_cast_fu_129_p3 = {{14'd9408}, {y_pos_fu_56}};

assign zext_ln42_fu_137_p1 = zext_ln42_cast_fu_129_p3;

always @ (posedge ap_clk) begin
    img_1_addr_reg_216[19:5] <= 15'b010010011000000;
    reuse_addr_reg_fu_48[12:11] <= 2'b11;
    reuse_addr_reg_fu_48[15:15] <= 1'b1;
    reuse_addr_reg_fu_48[18] <= 1'b1;
end

endmodule //kernel_stage0_kernel_stage0_Pipeline_VITIS_LOOP_38_2
