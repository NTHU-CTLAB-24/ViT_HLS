// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_stage0_kernel_stage0_Pipeline_VITIS_LOOP_8_11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_1_address0,
        img_1_ce0,
        img_1_we0,
        img_1_d0,
        img_1_address1,
        img_1_ce1,
        img_1_q1,
        grp_fu_818_p_din0,
        grp_fu_818_p_din1,
        grp_fu_818_p_opcode,
        grp_fu_818_p_dout0,
        grp_fu_818_p_ce,
        grp_fu_814_p_din0,
        grp_fu_814_p_din1,
        grp_fu_814_p_dout0,
        grp_fu_814_p_ce,
        grp_fu_547_p_din0,
        grp_fu_547_p_din1,
        grp_fu_547_p_dout0,
        grp_fu_547_p_ce,
        grp_fu_822_p_din0,
        grp_fu_822_p_din1,
        grp_fu_822_p_dout0,
        grp_fu_822_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [19:0] img_1_address0;
output   img_1_ce0;
output   img_1_we0;
output  [31:0] img_1_d0;
output  [19:0] img_1_address1;
output   img_1_ce1;
input  [31:0] img_1_q1;
output  [31:0] grp_fu_818_p_din0;
output  [31:0] grp_fu_818_p_din1;
output  [1:0] grp_fu_818_p_opcode;
input  [31:0] grp_fu_818_p_dout0;
output   grp_fu_818_p_ce;
output  [31:0] grp_fu_814_p_din0;
output  [31:0] grp_fu_814_p_din1;
input  [31:0] grp_fu_814_p_dout0;
output   grp_fu_814_p_ce;
output  [31:0] grp_fu_547_p_din0;
output  [31:0] grp_fu_547_p_din1;
input  [31:0] grp_fu_547_p_dout0;
output   grp_fu_547_p_ce;
output  [31:0] grp_fu_822_p_din0;
output  [31:0] grp_fu_822_p_din1;
input  [31:0] grp_fu_822_p_dout0;
output   grp_fu_822_p_ce;

reg ap_idle;
reg img_1_ce0;
reg img_1_we0;
reg img_1_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_1_fu_93_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [19:0] img_1_addr_reg_143;
reg   [19:0] img_1_addr_reg_143_pp0_iter1_reg;
reg   [19:0] img_1_addr_reg_143_pp0_iter2_reg;
reg   [19:0] img_1_addr_reg_143_pp0_iter3_reg;
reg   [19:0] img_1_addr_reg_143_pp0_iter4_reg;
reg   [19:0] img_1_addr_reg_143_pp0_iter5_reg;
reg   [19:0] img_1_addr_reg_143_pp0_iter6_reg;
reg   [19:0] img_1_addr_reg_143_pp0_iter7_reg;
reg   [19:0] img_1_addr_reg_143_pp0_iter8_reg;
reg   [19:0] img_1_addr_reg_143_pp0_iter9_reg;
reg   [19:0] img_1_addr_reg_143_pp0_iter10_reg;
reg   [19:0] img_1_addr_reg_143_pp0_iter11_reg;
reg   [19:0] img_1_addr_reg_143_pp0_iter12_reg;
reg   [31:0] x_reg_149;
reg   [31:0] x_reg_149_pp0_iter2_reg;
reg   [31:0] x_reg_149_pp0_iter3_reg;
reg   [31:0] x_reg_149_pp0_iter4_reg;
reg   [31:0] x_reg_149_pp0_iter5_reg;
reg   [31:0] x_reg_149_pp0_iter6_reg;
reg   [31:0] x_reg_149_pp0_iter7_reg;
reg   [31:0] x_reg_149_pp0_iter8_reg;
reg   [31:0] x_reg_149_pp0_iter9_reg;
reg   [31:0] x_reg_149_pp0_iter10_reg;
reg   [31:0] x_reg_149_pp0_iter11_reg;
wire   [31:0] bitcast_ln11_1_fu_127_p1;
reg   [31:0] tmp_reg_159;
reg   [31:0] add_i_reg_164;
reg   [31:0] div_i_reg_169;
wire   [63:0] i_2_cast_fu_101_p1;
wire    ap_block_pp0_stage0;
reg   [19:0] i_2_fu_44;
wire   [19:0] add_ln8_fu_106_p2;
wire    ap_loop_init;
reg   [19:0] ap_sig_allocacmp_i;
wire   [31:0] bitcast_ln11_fu_117_p1;
wire   [31:0] xor_ln11_fu_121_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_stage0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter12_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_1_fu_93_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_2_fu_44 <= add_ln8_fu_106_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_44 <= 20'd301055;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_i_reg_164 <= grp_fu_818_p_dout0;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        div_i_reg_169 <= grp_fu_547_p_dout0;
        img_1_addr_reg_143_pp0_iter10_reg <= img_1_addr_reg_143_pp0_iter9_reg;
        img_1_addr_reg_143_pp0_iter11_reg <= img_1_addr_reg_143_pp0_iter10_reg;
        img_1_addr_reg_143_pp0_iter12_reg <= img_1_addr_reg_143_pp0_iter11_reg;
        img_1_addr_reg_143_pp0_iter2_reg <= img_1_addr_reg_143_pp0_iter1_reg;
        img_1_addr_reg_143_pp0_iter3_reg <= img_1_addr_reg_143_pp0_iter2_reg;
        img_1_addr_reg_143_pp0_iter4_reg <= img_1_addr_reg_143_pp0_iter3_reg;
        img_1_addr_reg_143_pp0_iter5_reg <= img_1_addr_reg_143_pp0_iter4_reg;
        img_1_addr_reg_143_pp0_iter6_reg <= img_1_addr_reg_143_pp0_iter5_reg;
        img_1_addr_reg_143_pp0_iter7_reg <= img_1_addr_reg_143_pp0_iter6_reg;
        img_1_addr_reg_143_pp0_iter8_reg <= img_1_addr_reg_143_pp0_iter7_reg;
        img_1_addr_reg_143_pp0_iter9_reg <= img_1_addr_reg_143_pp0_iter8_reg;
        tmp_reg_159 <= grp_fu_822_p_dout0;
        x_reg_149_pp0_iter10_reg <= x_reg_149_pp0_iter9_reg;
        x_reg_149_pp0_iter11_reg <= x_reg_149_pp0_iter10_reg;
        x_reg_149_pp0_iter2_reg <= x_reg_149;
        x_reg_149_pp0_iter3_reg <= x_reg_149_pp0_iter2_reg;
        x_reg_149_pp0_iter4_reg <= x_reg_149_pp0_iter3_reg;
        x_reg_149_pp0_iter5_reg <= x_reg_149_pp0_iter4_reg;
        x_reg_149_pp0_iter6_reg <= x_reg_149_pp0_iter5_reg;
        x_reg_149_pp0_iter7_reg <= x_reg_149_pp0_iter6_reg;
        x_reg_149_pp0_iter8_reg <= x_reg_149_pp0_iter7_reg;
        x_reg_149_pp0_iter9_reg <= x_reg_149_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        img_1_addr_reg_143_pp0_iter1_reg <= img_1_addr_reg_143;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_93_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_1_addr_reg_143 <= i_2_cast_fu_101_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_reg_149 <= img_1_q1;
    end
end

always @ (*) begin
    if (((tmp_1_fu_93_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter12_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 20'd301055;
    end else begin
        ap_sig_allocacmp_i = i_2_fu_44;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        img_1_ce0 = 1'b1;
    end else begin
        img_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_1_ce1 = 1'b1;
    end else begin
        img_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        img_1_we0 = 1'b1;
    end else begin
        img_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln8_fu_106_p2 = ($signed(ap_sig_allocacmp_i) + $signed(20'd1048575));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln11_1_fu_127_p1 = xor_ln11_fu_121_p2;

assign bitcast_ln11_fu_117_p1 = img_1_q1;

assign grp_fu_547_p_ce = 1'b1;

assign grp_fu_547_p_din0 = 32'd1065353216;

assign grp_fu_547_p_din1 = add_i_reg_164;

assign grp_fu_814_p_ce = 1'b1;

assign grp_fu_814_p_din0 = x_reg_149_pp0_iter11_reg;

assign grp_fu_814_p_din1 = div_i_reg_169;

assign grp_fu_818_p_ce = 1'b1;

assign grp_fu_818_p_din0 = tmp_reg_159;

assign grp_fu_818_p_din1 = 32'd1065353216;

assign grp_fu_818_p_opcode = 2'd0;

assign grp_fu_822_p_ce = 1'b1;

assign grp_fu_822_p_din0 = 32'd0;

assign grp_fu_822_p_din1 = bitcast_ln11_1_fu_127_p1;

assign i_2_cast_fu_101_p1 = ap_sig_allocacmp_i;

assign img_1_address0 = img_1_addr_reg_143_pp0_iter12_reg;

assign img_1_address1 = i_2_cast_fu_101_p1;

assign img_1_d0 = grp_fu_814_p_dout0;

assign tmp_1_fu_93_p3 = ap_sig_allocacmp_i[32'd19];

assign xor_ln11_fu_121_p2 = (bitcast_ln11_fu_117_p1 ^ 32'd2147483648);

endmodule //kernel_stage0_kernel_stage0_Pipeline_VITIS_LOOP_8_11
