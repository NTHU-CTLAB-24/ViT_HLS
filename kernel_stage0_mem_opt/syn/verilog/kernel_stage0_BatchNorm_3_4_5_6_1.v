// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_stage0_BatchNorm_3_4_5_6_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_address0,
        img_ce0,
        img_we0,
        img_d0,
        img_address1,
        img_ce1,
        img_q1,
        img_offset,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        running_mean,
        running_var,
        gamma,
        beta
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [19:0] img_address0;
output   img_ce0;
output   img_we0;
output  [31:0] img_d0;
output  [19:0] img_address1;
output   img_ce1;
input  [31:0] img_q1;
input  [18:0] img_offset;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] running_mean;
input  [63:0] running_var;
input  [63:0] gamma;
input  [63:0] beta;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state20;
wire   [63:0] grp_fu_213_p1;
reg   [63:0] reg_230;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state21;
wire   [19:0] img_offset_cast_fu_236_p1;
reg   [19:0] img_offset_cast_reg_853;
reg   [61:0] p_cast4_mid_reg_858;
reg   [61:0] p_cast5_mid_reg_863;
reg   [61:0] p_cast6_mid_reg_868;
reg   [61:0] p_cast7_mid_reg_873;
reg   [63:0] gmem_addr_reg_881;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln13_fu_408_p2;
reg   [63:0] gmem_addr_25_reg_887;
reg   [63:0] gmem_addr_26_reg_893;
reg   [63:0] gmem_addr_27_reg_899;
wire   [19:0] add_ln17_fu_740_p2;
reg   [19:0] add_ln17_reg_905;
reg   [31:0] gmem_addr_read_reg_910;
reg   [31:0] gmem_addr_25_read_reg_915;
wire   [63:0] grp_fu_219_p2;
reg   [63:0] add_mid2_reg_920;
wire    ap_CS_fsm_state14;
reg   [31:0] gmem_addr_26_read_reg_925;
reg   [31:0] gmem_addr_27_read_reg_930;
wire   [63:0] conv3_mid2_fu_216_p1;
reg   [63:0] conv3_mid2_reg_935;
wire   [31:0] bitcast_ln14_fu_797_p1;
reg   [31:0] bitcast_ln14_reg_940;
wire    ap_CS_fsm_state22;
wire   [63:0] grp_fu_224_p2;
reg   [63:0] tmp_reg_945;
wire    grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start;
wire    grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_done;
wire    grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_idle;
wire    grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_ready;
wire   [19:0] grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_address0;
wire    grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_ce0;
wire    grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_we0;
wire   [31:0] grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_d0;
wire   [19:0] grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_address1;
wire    grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_ce1;
wire   [63:0] grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_din0;
wire   [63:0] grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_din1;
wire   [1:0] grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_opcode;
wire    grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_ce;
reg    grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start_reg;
wire    ap_CS_fsm_state23;
wire  signed [63:0] sext_ln14_fu_602_p1;
wire  signed [63:0] sext_ln14_1_fu_630_p1;
wire  signed [63:0] sext_ln14_2_fu_658_p1;
wire  signed [63:0] sext_ln14_3_fu_686_p1;
reg   [6:0] h_fu_108;
wire   [6:0] add_ln15_fu_745_p2;
reg   [4:0] c_fu_112;
wire   [4:0] select_ln14_6_fu_696_p3;
reg   [11:0] indvar_flatten_fu_116;
wire   [11:0] select_ln14_7_fu_757_p3;
reg   [11:0] indvar_flatten138_fu_120;
wire   [11:0] add_ln13_fu_414_p2;
reg   [31:0] grp_fu_213_p0;
wire   [31:0] bitcast_ln14_1_fu_785_p1;
wire   [31:0] bitcast_ln14_2_fu_789_p1;
wire   [31:0] conv3_mid2_fu_216_p0;
reg   [63:0] grp_fu_219_p0;
reg   [63:0] grp_fu_219_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire   [11:0] p_shl2_fu_306_p3;
wire   [8:0] p_shl3_fu_318_p3;
wire   [12:0] p_shl2_cast_fu_314_p1;
wire   [12:0] p_shl3_cast_fu_326_p1;
wire   [6:0] tmp_6_fu_336_p3;
wire   [63:0] p_cast10_fu_344_p1;
wire   [63:0] empty_157_fu_348_p2;
wire   [63:0] empty_158_fu_353_p2;
wire   [63:0] empty_159_fu_358_p2;
wire   [63:0] empty_160_fu_363_p2;
wire   [0:0] icmp_ln14_fu_426_p2;
wire   [12:0] empty_fu_330_p2;
wire   [61:0] p_cast4_fu_368_p4;
wire   [61:0] p_cast5_fu_378_p4;
wire   [61:0] p_cast6_fu_388_p4;
wire   [61:0] p_cast7_fu_398_p4;
wire   [0:0] icmp_ln15_fu_482_p2;
wire   [0:0] xor_ln13_fu_476_p2;
wire   [4:0] select_ln13_fu_432_p3;
wire   [0:0] and_ln13_fu_488_p2;
wire   [0:0] or_ln14_fu_500_p2;
wire   [4:0] add_ln14_fu_494_p2;
wire   [11:0] p_shl2_mid1_fu_514_p3;
wire   [8:0] p_shl3_mid1_fu_526_p3;
wire   [12:0] p_shl2_cast_mid1_fu_522_p1;
wire   [12:0] p_shl3_cast_mid1_fu_534_p1;
wire   [12:0] p_mid1_fu_538_p2;
wire   [12:0] select_ln13_1_fu_440_p3;
wire   [6:0] p_mid_fu_552_p3;
wire   [63:0] p_cast10_mid1_fu_560_p1;
wire   [63:0] p_mid121_fu_564_p2;
wire   [61:0] p_cast4_mid1_fu_584_p4;
wire   [61:0] select_ln13_2_fu_448_p3;
wire   [61:0] select_ln14_2_fu_594_p3;
wire   [63:0] p_mid123_fu_569_p2;
wire   [61:0] p_cast5_mid1_fu_612_p4;
wire   [61:0] select_ln13_3_fu_455_p3;
wire   [61:0] select_ln14_3_fu_622_p3;
wire   [63:0] p_mid125_fu_574_p2;
wire   [61:0] p_cast6_mid1_fu_640_p4;
wire   [61:0] select_ln13_4_fu_462_p3;
wire   [61:0] select_ln14_4_fu_650_p3;
wire   [63:0] p_mid127_fu_579_p2;
wire   [61:0] p_cast7_mid1_fu_668_p4;
wire   [61:0] select_ln13_5_fu_469_p3;
wire   [61:0] select_ln14_5_fu_678_p3;
wire   [6:0] select_ln14_fu_506_p3;
wire   [12:0] zext_ln15_fu_704_p1;
wire   [12:0] select_ln14_1_fu_544_p3;
wire   [12:0] empty_162_fu_708_p2;
wire   [16:0] p_shl5_fu_722_p3;
wire   [19:0] p_shl4_fu_714_p3;
wire  signed [19:0] p_shl5_cast_fu_730_p1;
wire   [19:0] empty_163_fu_734_p2;
wire   [11:0] add_ln14_1_fu_751_p2;
reg    grp_fu_219_ce;
reg    grp_fu_224_ce;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
reg   [22:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
#0 grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start_reg = 1'b0;
end

kernel_stage0_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4 grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start),
    .ap_done(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_done),
    .ap_idle(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_idle),
    .ap_ready(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_ready),
    .add_ln17(add_ln17_reg_905),
    .img_address0(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_address0),
    .img_ce0(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_ce0),
    .img_we0(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_we0),
    .img_d0(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_d0),
    .img_address1(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_address1),
    .img_ce1(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_ce1),
    .img_q1(img_q1),
    .bitcast_ln14(bitcast_ln14_reg_940),
    .tmp(tmp_reg_945),
    .conv2_mid2(reg_230),
    .conv3_mid2(conv3_mid2_reg_935),
    .grp_fu_219_p_din0(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_din0),
    .grp_fu_219_p_din1(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_din1),
    .grp_fu_219_p_opcode(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_opcode),
    .grp_fu_219_p_dout0(grp_fu_219_p2),
    .grp_fu_219_p_ce(grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_ce)
);

kernel_stage0_fpext_32ns_64_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_1_no_dsp_1_U40(
    .din0(grp_fu_213_p0),
    .dout(grp_fu_213_p1)
);

kernel_stage0_fpext_32ns_64_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_1_no_dsp_1_U41(
    .din0(conv3_mid2_fu_216_p0),
    .dout(conv3_mid2_fu_216_p1)
);

kernel_stage0_dadd_64ns_64ns_64_2_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_2_full_dsp_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_219_p0),
    .din1(grp_fu_219_p1),
    .ce(grp_fu_219_ce),
    .dout(grp_fu_219_p2)
);

kernel_stage0_dsqrt_64ns_64ns_64_8_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsqrt_64ns_64ns_64_8_no_dsp_1_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(add_mid2_reg_920),
    .ce(grp_fu_224_ce),
    .dout(grp_fu_224_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state22)) begin
            grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start_reg <= 1'b1;
        end else if ((grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_ready == 1'b1)) begin
            grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_fu_112 <= 5'd0;
    end else if (((icmp_ln13_fu_408_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_fu_112 <= select_ln14_6_fu_696_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        h_fu_108 <= 7'd0;
    end else if (((icmp_ln13_fu_408_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        h_fu_108 <= add_ln15_fu_745_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten138_fu_120 <= 12'd0;
    end else if (((icmp_ln13_fu_408_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten138_fu_120 <= add_ln13_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_fu_116 <= 12'd0;
    end else if (((icmp_ln13_fu_408_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_fu_116 <= select_ln14_7_fu_757_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_408_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln17_reg_905 <= add_ln17_fu_740_p2;
        gmem_addr_25_reg_887 <= sext_ln14_1_fu_630_p1;
        gmem_addr_26_reg_893 <= sext_ln14_2_fu_658_p1;
        gmem_addr_27_reg_899 <= sext_ln14_3_fu_686_p1;
        gmem_addr_reg_881 <= sext_ln14_fu_602_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_mid2_reg_920 <= grp_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        bitcast_ln14_reg_940 <= bitcast_ln14_fu_797_p1;
        tmp_reg_945 <= grp_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        conv3_mid2_reg_935 <= conv3_mid2_fu_216_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        gmem_addr_25_read_reg_915 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        gmem_addr_26_read_reg_925 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        gmem_addr_27_read_reg_930 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        gmem_addr_read_reg_910 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        img_offset_cast_reg_853[18 : 0] <= img_offset_cast_fu_236_p1[18 : 0];
        p_cast4_mid_reg_858 <= {{running_mean[63:2]}};
        p_cast5_mid_reg_863 <= {{running_var[63:2]}};
        p_cast6_mid_reg_868 <= {{gamma[63:2]}};
        p_cast7_mid_reg_873 <= {{beta[63:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_230 <= grp_fu_213_p1;
    end
end

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

always @ (*) begin
    if ((grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_done == 1'b0)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln13_fu_408_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_408_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_213_p0 = bitcast_ln14_2_fu_789_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_213_p0 = bitcast_ln14_1_fu_785_p1;
    end else begin
        grp_fu_213_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_219_ce = grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_ce;
    end else begin
        grp_fu_219_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_219_p0 = grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_219_p0 = reg_230;
    end else begin
        grp_fu_219_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_219_p1 = grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_grp_fu_219_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_219_p1 = 64'd4517329193108106637;
    end else begin
        grp_fu_219_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | ((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19)))) begin
        grp_fu_224_ce = 1'b1;
    end else begin
        grp_fu_224_ce = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            m_axi_gmem_ARADDR = gmem_addr_27_reg_899;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            m_axi_gmem_ARADDR = gmem_addr_26_reg_893;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            m_axi_gmem_ARADDR = gmem_addr_25_reg_887;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_gmem_ARADDR = gmem_addr_reg_881;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln13_fu_408_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_414_p2 = (indvar_flatten138_fu_120 + 12'd1);

assign add_ln14_1_fu_751_p2 = (indvar_flatten_fu_116 + 12'd1);

assign add_ln14_fu_494_p2 = (select_ln13_fu_432_p3 + 5'd1);

assign add_ln15_fu_745_p2 = (select_ln14_fu_506_p3 + 7'd1);

assign add_ln17_fu_740_p2 = (empty_163_fu_734_p2 + img_offset_cast_reg_853);

assign and_ln13_fu_488_p2 = (xor_ln13_fu_476_p2 & icmp_ln15_fu_482_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign bitcast_ln14_1_fu_785_p1 = gmem_addr_25_read_reg_915;

assign bitcast_ln14_2_fu_789_p1 = gmem_addr_26_read_reg_925;

assign bitcast_ln14_fu_797_p1 = gmem_addr_read_reg_910;

assign conv3_mid2_fu_216_p0 = gmem_addr_27_read_reg_930;

assign empty_157_fu_348_p2 = (p_cast10_fu_344_p1 + running_mean);

assign empty_158_fu_353_p2 = (p_cast10_fu_344_p1 + running_var);

assign empty_159_fu_358_p2 = (p_cast10_fu_344_p1 + gamma);

assign empty_160_fu_363_p2 = (p_cast10_fu_344_p1 + beta);

assign empty_162_fu_708_p2 = (zext_ln15_fu_704_p1 + select_ln14_1_fu_544_p3);

assign empty_163_fu_734_p2 = ($signed(p_shl4_fu_714_p3) - $signed(p_shl5_cast_fu_730_p1));

assign empty_fu_330_p2 = (p_shl2_cast_fu_314_p1 - p_shl3_cast_fu_326_p1);

assign grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start = grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_ap_start_reg;

assign icmp_ln13_fu_408_p2 = ((indvar_flatten138_fu_120 == 12'd2688) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_426_p2 = ((indvar_flatten_fu_116 == 12'd2688) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_482_p2 = ((h_fu_108 == 7'd112) ? 1'b1 : 1'b0);

assign img_address0 = grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_address0;

assign img_address1 = grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_address1;

assign img_ce0 = grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_ce0;

assign img_ce1 = grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_ce1;

assign img_d0 = grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_d0;

assign img_offset_cast_fu_236_p1 = img_offset;

assign img_we0 = grp_BatchNorm_3_4_5_6_1_Pipeline_VITIS_LOOP_16_4_fu_202_img_we0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign or_ln14_fu_500_p2 = (icmp_ln14_fu_426_p2 | and_ln13_fu_488_p2);

assign p_cast10_fu_344_p1 = tmp_6_fu_336_p3;

assign p_cast10_mid1_fu_560_p1 = p_mid_fu_552_p3;

assign p_cast4_fu_368_p4 = {{empty_157_fu_348_p2[63:2]}};

assign p_cast4_mid1_fu_584_p4 = {{p_mid121_fu_564_p2[63:2]}};

assign p_cast5_fu_378_p4 = {{empty_158_fu_353_p2[63:2]}};

assign p_cast5_mid1_fu_612_p4 = {{p_mid123_fu_569_p2[63:2]}};

assign p_cast6_fu_388_p4 = {{empty_159_fu_358_p2[63:2]}};

assign p_cast6_mid1_fu_640_p4 = {{p_mid125_fu_574_p2[63:2]}};

assign p_cast7_fu_398_p4 = {{empty_160_fu_363_p2[63:2]}};

assign p_cast7_mid1_fu_668_p4 = {{p_mid127_fu_579_p2[63:2]}};

assign p_mid121_fu_564_p2 = (p_cast10_mid1_fu_560_p1 + running_mean);

assign p_mid123_fu_569_p2 = (p_cast10_mid1_fu_560_p1 + running_var);

assign p_mid125_fu_574_p2 = (p_cast10_mid1_fu_560_p1 + gamma);

assign p_mid127_fu_579_p2 = (p_cast10_mid1_fu_560_p1 + beta);

assign p_mid1_fu_538_p2 = (p_shl2_cast_mid1_fu_522_p1 - p_shl3_cast_mid1_fu_534_p1);

assign p_mid_fu_552_p3 = {{add_ln14_fu_494_p2}, {2'd0}};

assign p_shl2_cast_fu_314_p1 = p_shl2_fu_306_p3;

assign p_shl2_cast_mid1_fu_522_p1 = p_shl2_mid1_fu_514_p3;

assign p_shl2_fu_306_p3 = {{c_fu_112}, {7'd0}};

assign p_shl2_mid1_fu_514_p3 = {{add_ln14_fu_494_p2}, {7'd0}};

assign p_shl3_cast_fu_326_p1 = p_shl3_fu_318_p3;

assign p_shl3_cast_mid1_fu_534_p1 = p_shl3_mid1_fu_526_p3;

assign p_shl3_fu_318_p3 = {{c_fu_112}, {4'd0}};

assign p_shl3_mid1_fu_526_p3 = {{add_ln14_fu_494_p2}, {4'd0}};

assign p_shl4_fu_714_p3 = {{empty_162_fu_708_p2}, {7'd0}};

assign p_shl5_cast_fu_730_p1 = $signed(p_shl5_fu_722_p3);

assign p_shl5_fu_722_p3 = {{empty_162_fu_708_p2}, {4'd0}};

assign select_ln13_1_fu_440_p3 = ((icmp_ln14_fu_426_p2[0:0] == 1'b1) ? 13'd0 : empty_fu_330_p2);

assign select_ln13_2_fu_448_p3 = ((icmp_ln14_fu_426_p2[0:0] == 1'b1) ? p_cast4_mid_reg_858 : p_cast4_fu_368_p4);

assign select_ln13_3_fu_455_p3 = ((icmp_ln14_fu_426_p2[0:0] == 1'b1) ? p_cast5_mid_reg_863 : p_cast5_fu_378_p4);

assign select_ln13_4_fu_462_p3 = ((icmp_ln14_fu_426_p2[0:0] == 1'b1) ? p_cast6_mid_reg_868 : p_cast6_fu_388_p4);

assign select_ln13_5_fu_469_p3 = ((icmp_ln14_fu_426_p2[0:0] == 1'b1) ? p_cast7_mid_reg_873 : p_cast7_fu_398_p4);

assign select_ln13_fu_432_p3 = ((icmp_ln14_fu_426_p2[0:0] == 1'b1) ? 5'd0 : c_fu_112);

assign select_ln14_1_fu_544_p3 = ((and_ln13_fu_488_p2[0:0] == 1'b1) ? p_mid1_fu_538_p2 : select_ln13_1_fu_440_p3);

assign select_ln14_2_fu_594_p3 = ((and_ln13_fu_488_p2[0:0] == 1'b1) ? p_cast4_mid1_fu_584_p4 : select_ln13_2_fu_448_p3);

assign select_ln14_3_fu_622_p3 = ((and_ln13_fu_488_p2[0:0] == 1'b1) ? p_cast5_mid1_fu_612_p4 : select_ln13_3_fu_455_p3);

assign select_ln14_4_fu_650_p3 = ((and_ln13_fu_488_p2[0:0] == 1'b1) ? p_cast6_mid1_fu_640_p4 : select_ln13_4_fu_462_p3);

assign select_ln14_5_fu_678_p3 = ((and_ln13_fu_488_p2[0:0] == 1'b1) ? p_cast7_mid1_fu_668_p4 : select_ln13_5_fu_469_p3);

assign select_ln14_6_fu_696_p3 = ((and_ln13_fu_488_p2[0:0] == 1'b1) ? add_ln14_fu_494_p2 : select_ln13_fu_432_p3);

assign select_ln14_7_fu_757_p3 = ((icmp_ln14_fu_426_p2[0:0] == 1'b1) ? 12'd1 : add_ln14_1_fu_751_p2);

assign select_ln14_fu_506_p3 = ((or_ln14_fu_500_p2[0:0] == 1'b1) ? 7'd0 : h_fu_108);

assign sext_ln14_1_fu_630_p1 = $signed(select_ln14_3_fu_622_p3);

assign sext_ln14_2_fu_658_p1 = $signed(select_ln14_4_fu_650_p3);

assign sext_ln14_3_fu_686_p1 = $signed(select_ln14_5_fu_678_p3);

assign sext_ln14_fu_602_p1 = $signed(select_ln14_2_fu_594_p3);

assign tmp_6_fu_336_p3 = {{c_fu_112}, {2'd0}};

assign xor_ln13_fu_476_p2 = (icmp_ln14_fu_426_p2 ^ 1'd1);

assign zext_ln15_fu_704_p1 = select_ln14_fu_506_p3;

always @ (posedge ap_clk) begin
    img_offset_cast_reg_853[19] <= 1'b0;
end

endmodule //kernel_stage0_BatchNorm_3_4_5_6_1
